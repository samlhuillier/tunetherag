SELECT count(*) FROM singer
SELECT name ,  country ,  age FROM singer ORDER BY age
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
SELECT song_name ,  song_release_year FROM singer ORDER BY age ASC LIMIT 1
SELECT DISTINCT country FROM singer WHERE age  >  20
SELECT country ,  count(*) FROM singer GROUP BY country
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)
SELECT LOCATION, name FROM stadium WHERE capacity  >  5000 AND capacity  <  10000
SELECT max(capacity) ,  avg(capacity) FROM stadium
SELECT avg(capacity) ,  max(capacity) FROM stadium
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
SELECT count(*) FROM concert WHERE YEAR  IN  ('2014','2015')
SELECT t1.name ,  COUNT(*) FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id  =  t2.stadium_id GROUP BY t2.stadium_id
SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id  =  t2.stadium_id WHERE t2.year >= '2014' GROUP BY t1.stadium_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id  =  t2.stadium_id WHERE t2.year  >  2013 GROUP BY t1.stadium_id ORDER BY count(*) DESC LIMIT 1
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
SELECT name FROM stadium EXCEPT SELECT T2.name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  '2014'
SELECT T1.concert_name ,  T1.theme ,  COUNT(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_id
SELECT T1.concert_name ,  T1.theme ,  COUNT(DISTINCT T2.singer_name) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_name ,  T1.theme
SELECT T1.name ,  count(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.name
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  "2014"
SELECT T1.name ,  T1.country FROM singer AS T1 JOIN song AS T2 ON T1.name  =  T2.name WHERE T2.song_name LIKE "%Hey%"
SELECT t1.name ,  t1.location FROM stadium AS t1 JOIN concert AS t2 ON t1.id  =  t2.stadium_id WHERE t2.Year  =  '2014' OR t2.Year  =  '2015'
SELECT COUNT(*) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE capacity = (SELECT MAX(capacity) FROM stadium)
SELECT count(*) FROM pets WHERE weight  >  10
SELECT weight FROM pets ORDER BY pet_age ASC LIMIT 1
SELECT max(weight) ,  petType FROM pets GROUP BY petType
SELECT count(*) FROM has_pet AS T1 JOIN student AS T2 ON T1.stuid  =  T2.stuid WHERE T2.age  >  20
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.sex  =  'F'
SELECT count(DISTINCT pettype) FROM pets
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T2.petid IN (SELECT petid FROM pets WHERE pettype  =  "Cat" UNION SELECT petid FROM pets WHERE pettype  =  "Dog")
SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T2.petid IN (SELECT petid FROM pets WHERE pettype  =  "Cat" INTERSECT SELECT petid FROM pets WHERE pettype  =  "Dog")
SELECT DISTINCT Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE pettype  =  'cat' AND pettype  =  'dog'
SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype  =  "cat"))
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid  =  "Dog" EXCEPT SELECT stuid FROM has_pet WHERE petid  =  "Cat")
SELECT pettype ,  weight FROM pets WHERE pet_age  =  'youngest'
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)
SELECT T1.petid FROM has_pet AS T1 JOIN student AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Lname  =  'Smith'
SELECT count(*) ,  stuid FROM has_pet GROUP BY stuid HAVING count(*)  >  0
SELECT count(*) ,  stuid FROM has_pet GROUP BY stuid
SELECT fname ,  sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(stuid) > 1)
SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype  =  "Cat" AND pet_age  =  3))
SELECT avg(age) FROM student WHERE stuid NOT IN ( SELECT stuid FROM has_pet )
SELECT count(*) FROM CONTINENTS
SELECT ContId ,  Continent ,  COUNT(*) FROM COUNTRIES GROUP BY ContId ,  Continent
SELECT count(*) FROM COUNTRIES
SELECT FullName ,  Id ,  count(*) FROM MODEL_LIST AS t1 JOIN CAR_MAKERS AS t2 ON t1.Maker  =  t2.Id GROUP BY FullName ,  Id
SELECT T1.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId ORDER BY T1.horsepower ASC LIMIT 1
SELECT T1.model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
SELECT Maker FROM MODEL_LIST WHERE model  IN  (SELECT model FROM CAR_NAMES WHERE MakeId  IN  (SELECT Id FROM CAR_MAKERS WHERE Maker  IN  (SELECT Maker FROM CARS_DATA WHERE year  =  '1970')))
SELECT Make ,  Year FROM CAR_NAMES INNER JOIN CARS_DATA ON CAR_NAMES.Id = CARS_DATA.Id WHERE Year = (SELECT MIN(Year) FROM CARS_DATA)
SELECT DISTINCT model FROM CARS_DATA WHERE year > 1980;
SELECT continent, COUNT(*) FROM countries JOIN continents ON countries.continent = continents.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continent;
SELECT CountryName FROM COUNTRIES WHERE CountryId IN (SELECT Country FROM CAR_MAKERS GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1)
SELECT count(*) ,  T2.fullname FROM model_list AS T1 JOIN car_makers AS T2 ON T1.maker  =  T2.id GROUP BY T2.fullname
SELECT COUNT(Model_name), Maker FROM MODEL_LIST GROUP BY Maker;
SELECT Accelerate FROM CARS_DATA WHERE Id = (SELECT Id FROM CAR_NAMES WHERE Make = "AMC" AND MakeId = "sw")
SELECT count(*) FROM CAR_MAKERS WHERE Country = 'France'
SELECT count(*) FROM MODEL_LIST WHERE Country = 'USA'
SELECT AVG(mpg) FROM CARS_DATA WHERE Cylinders = 4
SELECT weight FROM cars_data WHERE weight  =  (SELECT min(weight) FROM cars_data WHERE cylinders  =  '8' AND year  =  '1974')
SELECT Maker, Model FROM MODEL_LIST
SELECT CountryName ,  CountryId FROM COUNTRIES JOIN CAR_MAKERS ON COUNTRIES.CountryName  =  CAR_MAKERS.Country
SELECT count(*) FROM CARS_DATA WHERE horsepower > 150
SELECT avg(Weight) FROM CARS_DATA GROUP BY YEAR
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId JOIN CONTINENTS AS T3 ON T2.Continent  =  T3.ContId WHERE T3.Continent  =  'Europe' GROUP BY T2.CountryName HAVING count(*)  >=  3
SELECT T1.Make, MAX(CAST(T2.horsepower AS INTEGER)) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 GROUP BY T1.Make;
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.Id  =  T2.Id ORDER BY T2.mpg DESC
SELECT T1.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id = T2.makeid ORDER BY T1.mpg DESC LIMIT 1;
SELECT AVG(horsepower) FROM CARS_DATA WHERE YEAR  <  1980
SELECT AVG(horsepower) FROM cars_data WHERE year  <  1980
SELECT avg(T1.edispl) FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = "volvo"
SELECT max(T1.Accelerate) ,  T1.Cylinders FROM CARS_DATA AS T1 GROUP BY T1.Cylinders
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1
SELECT count(*) FROM CARS_DATA WHERE Cylinders > 4;
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980
SELECT count(*) FROM MODEL_LIST WHERE Maker = 'American Motor Company'
SELECT FullName, Id FROM CAR_MAKERS WHERE Maker IN (SELECT Maker FROM MODEL_LIST GROUP BY Maker HAVING COUNT(*) > 3);
SELECT DISTINCT Model FROM MODEL_LIST WHERE Maker IN (SELECT Id FROM CAR_MAKERS WHERE FullName = 'General Motors') OR weight > '3500'
SELECT year FROM cars_data WHERE weight  >  3000 AND weight  <  4000
SELECT max(T1.horsepower) FROM CARS_DATA AS T1 JOIN CARS_DATA AS T2 ON T1.accelerate = T2.accelerate WHERE T1.horsepower > T2.horsepower
SELECT min(T1.cylinders) FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.Id WHERE T2.Model = "volvo"
SELECT COUNT(*) FROM CARS_DATA AS T1 WHERE T1.Accelerate > (SELECT MAX(T2.Horsepower) FROM CARS_DATA AS T2)
SELECT T2.country FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.country GROUP BY T2.country HAVING count(*)  >  2
SELECT count(*) FROM CARS_DATA WHERE Cylinders > 6
SELECT Model FROM CAR_NAMES WHERE MakeId IN (SELECT MakeId FROM CARS_DATA WHERE Cylinders = 4) ORDER BY horsepower DESC LIMIT 1;
SELECT T1.MakeId ,  T1.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower > (SELECT T3.Horsepower FROM CARS_DATA AS T3 ORDER BY T3.Horsepower ASC LIMIT 1) AND T1.Cylinders < 3
SELECT makeid, make FROM car_names WHERE id NOT IN (SELECT id FROM cars_data WHERE horsepower >= 100) AND cylinders < 4
SELECT max(mpg) FROM cars_data WHERE cylinders  =  '8' OR year  <  1980
SELECT T1.model FROM MODEL_LIST AS T1 JOIN CARS_DATA AS T2 ON T1.model = T2.Model WHERE T2.weight < 3500 AND T1.Maker != 'Ford Motor Company'
SELECT CountryName FROM countries WHERE CountryName NOT IN (SELECT Country FROM CAR_MAKERS)
SELECT id ,  maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING count(*)  >  2) AND id IN (SELECT maker FROM car_makers GROUP BY maker HAVING count(*)  >  3)
SELECT Id, Maker FROM CAR_MAKERS WHERE Id IN (SELECT Maker FROM MODEL_LIST GROUP BY Maker HAVING count(model) >= 2) AND Id IN (SELECT Maker FROM CAR_NAMES GROUP BY Maker HAVING count(model) >= 3)
SELECT T1.CountryName ,  T1.CountryId FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat' OR COUNT(*)  >  3 GROUP BY T1.CountryName ,  T1.CountryId
SELECT T2.countryid ,  T2.countryname FROM model_list AS T1 JOIN car_makers AS T2 ON T1.maker  =  T2.country WHERE T1.model  =  'fiat' OR count(*)  >  3 GROUP BY T2.countryid ,  T2.countryname
SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'
SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  'USA'
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city = 'Anthony'
SELECT count(*) FROM airlines
SELECT count(*) FROM AIRLINES
SELECT count(*) FROM AIRPORTS
SELECT count(*) FROM Flight
SELECT count(*) FROM FLIGHTS
SELECT * FROM AIRLINES WHERE Abbreviation = 'UAL'
SELECT COUNT(*) FROM AIRLINES WHERE Country = 'USA'
SELECT City, Country FROM AIRPORTS WHERE AirportName = 'Alton'
SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  'AKO'
SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'
SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'APG'
SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'ATO'
SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'ABERDEEN'
SELECT count(*) FROM FLIGHTS WHERE DestAirport = (SELECT AirportCode FROM AIRPORTS WHERE City = 'Aberdeen')
SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'Ashley' AND SourceAirport = 'Aberdeen'
SELECT count(*) FROM FLIGHTS WHERE Airline = 'JetBlue Airways'
SELECT count(*) FROM FLIGHTS WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT count(*) FROM FLIGHTS WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'Aberdeen' AND Airline = 'United Airlines'
SELECT T1.City FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode GROUP BY T2.City ORDER BY count(*) DESC LIMIT 1
SELECT City FROM AIRPORTS WHERE AirportCode IN (SELECT SourceAirport FROM FLIGHTS GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1)
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T2.DestAirport ORDER BY count(*) DESC LIMIT 1
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T2.DestAirport ORDER BY count(*) LIMIT 1
SELECT Airline FROM FLIGHTS GROUP BY Airline ORDER BY count(*) DESC LIMIT 1
SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.Airline  =  T2.Airline GROUP BY T1.Abbreviation ORDER BY count(*) LIMIT 1
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'AHD'
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  'AHD'
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG' AND T2.SourceAirport  =  'CVO'
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' AND T2.Airline NOT IN (SELECT T3.Airline FROM AIRLINES AS T3 JOIN FLIGHTS AS T4 ON T3.uid  =  T4.
SELECT T1.Airline FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >= 10
SELECT T1.Airline FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.Airline GROUP BY T1.Airline HAVING count(*) < 200
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.Airline WHERE T2.Airline  =  'United Airlines'
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'
SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "Aberdeen"
SELECT FlightNo FROM FLIGHTS WHERE DestAirport IN (SELECT AirportCode FROM AIRPORTS WHERE City = "Aberdeen")
SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene'
SELECT T1.AirportName FROM Flights AS T1 LEFT JOIN Airports AS T2 ON T1.AirportCode  =  T2.AirportCode WHERE T2.AirportName IS NULL
SELECT count(*) FROM Employee
SELECT count(*) FROM Employee
SELECT name FROM employee ORDER BY age
SELECT count(*) ,  city FROM employee GROUP BY city
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
SELECT t1.LOCATION ,  count(*) FROM shop AS t1 GROUP BY t1.LOCATION
SELECT t1.manager_name ,  t1.district FROM shop AS t1 JOIN (SELECT shop_id ,  COUNT(*) AS number_products FROM shop GROUP BY shop_id ORDER BY number_products DESC LIMIT 1) AS t2 ON t1.shop_id  =  t2.shop_id
SELECT min(Number_products) ,  max(Number_products) FROM shop
SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT name FROM shop WHERE shop_id IN (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1)
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
SELECT count(*) ,  name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY name
SELECT sum(bonus) FROM evaluation
SELECT * FROM hiring
SELECT district FROM shop WHERE Number_products  >  10000 AND Number_products  <  3000
SELECT count(DISTINCT LOCATION) FROM shop
SELECT count(*) FROM Documents
SELECT document_id ,  document_name ,  document_description FROM Documents
SELECT T1.document_name ,  T1.template_id FROM Documents AS T1 WHERE T1.Document_Description LIKE '%w%'
SELECT Documents.document_id, Documents.template_id, Documents.Document_Description FROM Documents WHERE Documents.document_name = "Robbin CV"
SELECT count(DISTINCT template_id) FROM Documents
SELECT count(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')
SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
SELECT template_id, Template_Type_Code FROM Documents INNER JOIN Templates ON Documents.template_id = Templates.template_id GROUP BY template_id, Template_Type_Code ORDER BY count(*) DESC LIMIT 1
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >=  2
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
SELECT count(*) FROM Templates
SELECT template_id ,  version_number ,  template_type_code FROM Templates
SELECT DISTINCT template_type_code FROM Templates
SELECT template_id FROM Templates WHERE template_type_code IN ('PP', 'PPT')
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
SELECT version_number, template_type_code FROM Templates WHERE version_number > 5
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
SELECT template_type_code, MIN(Version_Number) FROM Templates GROUP BY template_type_code
SELECT template_type_code FROM Templates WHERE template_id  =  (SELECT template_id FROM Documents WHERE document_name  =  "Data base")
SELECT document_name FROM Documents WHERE template_id IN (SELECT template_id FROM Templates WHERE template_type_code = "BK")
SELECT template_type_code ,  count(*) FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id GROUP BY template_type_code
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
SELECT template_type_code FROM Templates WHERE template_type_code NOT IN (SELECT template_id FROM Documents)
SELECT template_type_code ,  template_type_description FROM Ref_template_types
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
SELECT template_type_code FROM Ref_template_types WHERE template_type_description = "Book"
SELECT DISTINCT template_type_description FROM Ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM Templates WHERE template_ID IN (SELECT template_ID FROM Documents));
SELECT T1.template_id FROM Templates AS T1 JOIN Ref_template_types AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T2.template_type_description  =  "Presentation"
SELECT count(*) FROM Paragraphs
SELECT count(*) FROM Paragraphs WHERE document_ID IN (SELECT document_ID FROM Documents WHERE document_name = "Summer Show");
SELECT other_details ,  paragraph_text FROM paragraphs WHERE paragraph_text LIKE '%Korea %'
SELECT paragraph_id ,  paragraph_text FROM Paragraphs WHERE document_id IN (SELECT document_id FROM Documents WHERE Document_Name = 'Welcome to NY')
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'
SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
SELECT document_id ,  document_name ,  count(*) FROM Documents JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY document_id ,  document_name
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
SELECT t1.document_id, t1.document_name FROM Documents AS t1 JOIN Paragraphs AS t2 ON t1.document_id  =  t2.document_id GROUP BY t1.document_id ORDER BY count(*) DESC LIMIT 1
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
SELECT document_id FROM Paragraphs WHERE count(*) BETWEEN 1 AND 2;
SELECT document_id FROM Paragraphs WHERE paragraph_text = "Brazil" AND paragraph_text = "Ireland";
SELECT count(*) FROM teacher
SELECT Name FROM teacher ORDER BY Age
SELECT Age, Hometown FROM teacher
SELECT name FROM teacher WHERE hometown  !=  "Little Lever Urban District"
SELECT Name FROM  teacher WHERE Age  =  32 OR Age  =  33
SELECT Hometown FROM teacher WHERE Age  =  (SELECT min(Age) FROM teacher)
SELECT Hometown ,  count(*) FROM teacher GROUP BY Hometown
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY count(*) DESC LIMIT 1
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >  1
SELECT T1.Name ,  T2.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID JOIN course AS T3 ON T1.Course_ID  =  T3.Course_ID
SELECT T1.Name ,  T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID  =  T3.Course_ID ORDER BY T1.Name
SELECT T2.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "MATH"
SELECT T1.Name ,  COUNT(T1.Teacher_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Name
SELECT DISTINCT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(*) >= 2)
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
SELECT count(*) FROM visitor WHERE age  <  30
SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4
SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age
SELECT museum_id ,  name FROM museum WHERE num_of_staff = (SELECT max(num_of_staff) FROM museum)
SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
SELECT T1.Open_Year ,  T1.Num_of_Staff FROM museum AS T1 WHERE T1.name  =  "Plaza Museum"
SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
SELECT T1.id ,  T1.name ,  T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id GROUP BY T2.visitor_id HAVING count(*)  >  1
SELECT T1.id ,  T1.name ,  T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id ORDER BY T2.Total_spent DESC LIMIT 1
SELECT T1.Museum_ID ,  T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID  =  T2.Museum_ID WHERE T1.museum_id  NOT IN ( SELECT T3.museum_id FROM visit AS T3 JOIN museum AS T4 ON T3.Museum_ID  =  T4.Museum_ID )
SELECT T1.name ,  T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
SELECT sum(Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_id  =  T2.id WHERE T2.Level_of_membership  =  '1'
SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id JOIN museum AS T3 ON T2.Museum_ID  =  T3.Museum_ID WHERE T3.open_year  <  2009 AND T3.open_year  >  2011
SELECT count(*) FROM visitor WHERE id NOT IN (SELECT visitor_id FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE open_year > 2010))
SELECT count(*) FROM museum WHERE open_year  >=  2013 OR open_year  <  2008
SELECT count(*) FROM players
SELECT count(*) FROM player
SELECT count(*) FROM matches
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
SELECT avg(winner_rank) FROM matches
SELECT max(loser_rank) FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT count(DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches WHERE tourney_name IN (SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10)
SELECT winner_name FROM matches WHERE YEAR  =  2013 AND YEAR  =  2016
SELECT count(*) FROM matches WHERE YEAR IN ('2013', '2016')
SELECT country_code ,  first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE tourney_name  =  'WTA Championships' INTERSECT SELECT country_code ,  first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE tourney_name  =  'Australian
SELECT first_name ,  country_code FROM players ORDER BY birth_date DESC LIMIT 1
SELECT first_name ,  last_name FROM players ORDER BY birth_date ASC
SELECT first_name ,  last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC
SELECT T2.first_name ,  T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
SELECT T1.winner_name ,  T1.winner_rank_points FROM matches AS T1 JOIN matches AS T2 ON T1.winner_name  =  T2.winner_name WHERE T1.winner_rank_points  >  T2.winner_rank_points GROUP BY T1.winner_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.winner_name FROM matches AS T1 WHERE T1.tourney_name  =  'Australian Open' AND T1.winner_rank_points  =  (SELECT MAX(T2.winner_rank_points) FROM matches AS T2 WHERE T2.tourney_name  =  'Australian Open')
SELECT T1.winner_name ,  T1.loser_name FROM matches AS T1 JOIN (SELECT winner_name ,  COUNT(*) AS CNT FROM matches GROUP BY winner_name ORDER BY CNT DESC LIMIT 1) AS T2 ON T1.winner_name  =  T2.winner_name
SELECT T1.first_name ,  avg(ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
SELECT T1.first_name, sum(ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
SELECT country_code, COUNT(*) FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50
SELECT ranking_date ,  SUM(tours) FROM rankings GROUP BY ranking_date
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
SELECT winner_name ,  winner_rank FROM matches WHERE winner_rank  =  'Winner' ORDER BY winner_age ASC LIMIT 3
SELECT COUNT(*) FROM matches WHERE tourney_name = "WTA Championships" AND winner_hand = "Left"
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id GROUP BY T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
SELECT hand ,  count(*) FROM players GROUP BY hand
SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'
SELECT name, tonnage FROM ship ORDER BY name DESC
SELECT T1.name ,  T1.date ,  T2.result FROM battle AS T1 JOIN battle_result AS T2 ON T1.name  =  T2.name
SELECT max(killed) ,  min(killed) FROM death
SELECT avg(injured) FROM death
SELECT killed, injured FROM death WHERE caused_by_ship_id = 't'
SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != "Boril"
SELECT T1.id ,  T2.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
SELECT T1.id ,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id JOIN ship AS T3 ON T2.killed  >=  10
SELECT T1.Id ,  T1.name FROM ship AS T1 JOIN death AS T2 ON T1.Id  =  T2.caused_by_ship_id GROUP BY T1.Id ORDER BY count(*) DESC LIMIT 1
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = "Kaloyan" AND latin_commander = "Baldwin I"
SELECT count(*) FROM battle
SELECT count(*) FROM ship WHERE tonnage = '225' AND lost_in_battle = '0' INTERSECT SELECT count(*) FROM battle WHERE tonnage = '225'
SELECT t1.name ,  t1.date FROM ship AS t1 JOIN battle AS t2 ON t1.lost_in_battle  =  t2.id WHERE t1.name  =  'Lettice' OR t1.name  =  'HMS Atalanta'
SELECT name ,  result ,  bulgarian_commander FROM battle WHERE location = 'English Channel' AND id NOT IN (SELECT lost_in_battle FROM ship)
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1, line_2 FROM addresses
SELECT count(*) FROM COURSES
SELECT count(*) FROM Courses
SELECT course_description FROM Courses WHERE course_name = 'Math'
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
SELECT T1.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
SELECT T2.department_name ,  T1.department_id FROM degree_programs AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
SELECT count(DISTINCT department_id) FROM Degree_Programs
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT count(DISTINCT department_id) FROM Degree_Programs WHERE department_id  =  (SELECT department_id FROM Departments WHERE department_name  =  'Engineering')
SELECT section_name, section_description FROM Sections
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  <=  2
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name  LIKE  '%the computer%'
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  =  2
SELECT first_name ,  middle_name ,  last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id = 'Bachelor')
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.student_id ,  T2.first_name ,  T2.middle_name ,  T2.last_name ,  COUNT(*) AS enrollments FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'North Carolina' AND T1.student_id NOT IN (SELECT T3.student_id FROM Student_Enrolment AS T3)
SELECT T1.transcript_date ,  T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_date ,  T1.transcript_id HAVING COUNT(T2.transcript_id) >= 2
SELECT cell_mobile_number FROM Students WHERE first_name  =  "Timmothy" AND last_name  =  "Ward"
SELECT cell_mobile_number FROM students WHERE first_name = "Timmothy" AND last_name = "Ward"
SELECT first_name ,  middle_name ,  last_name FROM Students WHERE date_first_registered  =  (SELECT MIN(date_first_registered) FROM Students)
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Students AS T2 ON T1.date_left  <  T2.date_left WHERE T2.date_left  IS NULL
SELECT first_name FROM Students WHERE current_address_id  !=  permanent_address_id
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
SELECT avg(transcript_date) FROM Transcripts
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT count(*) FROM Transcripts
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT T1.student_course_id ,  count(*) FROM Transcript_Contents AS T1 GROUP BY T1.student_course_id
SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Transcript_Contents GROUP BY transcript_id))
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_program_id IN ('Master', 'Bachelor')) GROUP BY semester_id HAVING COUNT(*)  =  2
SELECT count(DISTINCT current_address_id) FROM Students
SELECT * FROM Students ORDER BY other_student_details DESC
SELECT t1.section_description FROM Sections AS t1 JOIN Sections AS t2 ON t1.section_name  =  t2.section_name WHERE t2.section_name  =  "h"
SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country  =  'Haiti') OR cell_mobile_number  =  '09700166582'
SELECT Title FROM Cartoon ORDER BY Title
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT count(*) FROM Cartoon AS t1 JOIN authors AS t2 ON t1.Written_by  =  t2.Id WHERE  t2.fname  =  "Joseph" AND t2.lname  =  "Kuhr"
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT Country, count(Country) FROM TV_Channel GROUP BY Country ORDER BY count(Country) DESC
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel
SELECT Content FROM TV_Channel WHERE series_name  =  'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name  =  'Sky Radio'
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'English'
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
SELECT t1.LANGUAGE, count(t1.LANGUAGE) FROM TV_Channel AS t1 GROUP BY t1.LANGUAGE
SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!')
SELECT t1.Title FROM Cartoon AS t1 JOIN TV_Channel AS t2 ON t1.Channel  =  t2.id WHERE t2.series_name  =  'Sky Radio'
SELECT Episode FROM TV_series ORDER BY rating
SELECT T1.Episode ,  T1.Rating FROM TV_series AS T1 ORDER BY T1.Rating DESC LIMIT 3
SELECT min(SHARE) ,  max(SHARE) FROM TV_series
SELECT Air_Date FROM TV_series WHERE Episode  =  "A Love of a Lifetime"
SELECT Weekly_Rank FROM TV_series WHERE Episode  =  'A Love of a Lifetime'
SELECT t1.Channel FROM TV_series AS t1 JOIN TV_Channel AS t2 ON t1.Channel  =  t2.id WHERE t1.Episode  =  'A Love of a Lifetime'
SELECT Episode FROM TV_series WHERE Channel = 'Sky Radio'
SELECT Directed_by ,  COUNT(*) FROM cartoon GROUP BY Directed_by
SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
SELECT package_option, series_name FROM TV_Channel WHERE hight_definition_TV = 'Yes'
SELECT t1.country FROM TV_Channel AS t1 JOIN cartoon AS t2 ON t1.id  =  t2.Channel WHERE t2.written_by  =  'Todd Casey'
SELECT country FROM TV_Channel WHERE country NOT IN (SELECT country FROM TV_Channel WHERE country IN (SELECT country FROM cartoon WHERE written_by  =  "Todd Casey"))
SELECT t1.series_name, t1.country FROM TV_Channel AS t1 JOIN cartoon AS t2 ON t1.id  =  t2.Channel WHERE t2.directed_by  =  'Ben Jones' OR t2.directed_by  =  'Michael Chang'
SELECT Pixel_aspect_ratio_PAR, country FROM tv_channel WHERE LANGUAGE NOT LIKE "%English%"
SELECT id FROM tv_channel WHERE country IN (SELECT country FROM tv_channel GROUP BY country HAVING count(DISTINCT id) > 2)
SELECT t1.id FROM TV_Channel AS t1 JOIN cartoon AS t2 ON t1.channel  =  t2.channel WHERE t2.directed_by  !=  'Ben Jones'
SELECT package_option FROM cartoon EXCEPT SELECT package_option FROM TV_Channel WHERE directed_by  =  "Ben Jones"
SELECT count(*) FROM poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
SELECT avg(Earnings) FROM poker_player
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT max(Earnings) FROM poker_player)
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
SELECT Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Earnings > 300000)
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made ASC
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1;
SELECT Money_Rank FROM poker_player WHERE People_ID = (SELECT People_ID FROM people ORDER BY Height DESC LIMIT 1)
SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY Earnings DESC
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >  1
SELECT Name, Birth_Date FROM people ORDER BY Name
SELECT Name FROM people WHERE Nationality  !=  "Russia"
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT count(DISTINCT Nationality) FROM people
SELECT count(*) FROM area_code_state
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC
SELECT vote_id ,  phone_number ,  state FROM votes
SELECT max(area_code) ,  min(area_code) FROM area_code_state
SELECT MAX(created) FROM votes WHERE state  =  "CA"
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
SELECT DISTINCT state ,  created FROM votes
SELECT T1.contestant_number, T2.contestant_name FROM votes AS T1 JOIN contestants AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE votes  >  1
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number = (SELECT contestant_number FROM votes ORDER BY contestant_number ASC LIMIT 1)
SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
SELECT count(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
SELECT area_code FROM area_code_state GROUP BY area_code ORDER BY count(*) DESC LIMIT 1
SELECT created ,  state ,  phone_number FROM votes WHERE contestant_number  =  'Tabatha Gehling'
SELECT area_code FROM votes, contestants, area_code_state WHERE votes.contestant_number = contestants.contestant_number AND contestants.contestant_name = 'Tabatha Gehling' AND contestants.contestant_name = 'Kelly Clauss'
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
SELECT Name FROM country WHERE IndepYear  >  1950
SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT Continent FROM country WHERE Name = 'Anguilla'
SELECT T2.Code FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.Name  =  'Kabul'
SELECT Language FROM countrylanguage WHERE CountryCode  =  "AW" GROUP BY Language ORDER BY count(*) DESC LIMIT 1
SELECT Population, LifeExpectancy FROM country WHERE Name  =  "Brazil"
SELECT Region, Population FROM country WHERE Name = "Angola"
SELECT avg(LifeExpectancy) FROM country WHERE Region = "Central Africa"
SELECT Name FROM country WHERE Continent  =  'Asia' ORDER BY LifeExpectancy LIMIT 1
SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT count(*) FROM city WHERE District = "Gelderland"
SELECT avg(GNP), sum(population) FROM country WHERE GovernmentForm = 'US Territory'
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = "Africa"
SELECT count(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = "Aruba")
SELECT count(*) FROM countrylanguage WHERE CountryCode  =  "AF"
SELECT T1.Name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY count(DISTINCT T2.CountryCode) DESC
SELECT count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" AND T2.Language = "Dutch"
SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = "English") AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = "French")
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.Language  =  "French"
SELECT count(DISTINCT country.Code) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese'
SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language  =  "English" OR T2.language  =  "Dutch"
SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.GovernmentForm  =  "Republic" GROUP BY T1.Language HAVING COUNT(*)  =  1
SELECT t1.Name FROM city AS t1 JOIN countrylanguage AS t2 ON t1.CountryCode  =  t2.CountryCode WHERE t2.Language  =  'English' ORDER BY t1.Population DESC LIMIT 1
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
SELECT avg(LifeExpectancy) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language != 'English'
SELECT count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != "English"
SELECT Language FROM countrylanguage WHERE CountryCode  =  (SELECT Code FROM country WHERE HeadOfState  =  "Beatrix") AND IsOfficial  =  "Yes"
SELECT count(DISTINCT T1.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Code  <  "1930"
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  'Europe')
SELECT T1.Name FROM country AS T1 JOIN country AS T2 ON T1.population  <  T2.population WHERE T1.Continent  =  'Africa' AND T2.Continent  =  'Asia'
SELECT T1.Name FROM country AS T1 JOIN country AS T2 ON T1.population  >  T2.population WHERE T1.Continent  =  'Africa' AND T2.Continent  =  'Asia'
SELECT Name FROM country WHERE Continent  =  'Asia' AND population  >  (SELECT population FROM country WHERE Continent  =  'Africa' ORDER BY population DESC LIMIT 1)
SELECT Name FROM country WHERE Continent = 'Asia' AND population > (SELECT population FROM country WHERE Continent = 'Africa')
SELECT countrycode FROM countrylanguage WHERE language  !=  'English'
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
SELECT countrylanguage.Code FROM countrylanguage JOIN country ON countrylanguage.CountryCode  =  country.Code WHERE countrylanguage.LANGUAGE  !=  "English" AND country.GovernmentForm  !=  "Republic"
SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code JOIN countrylanguage AS T3 ON T2.Code  =  T3.CountryCode WHERE T3.IsOfficial  =  "No" AND T2.Continent  =  "Europe"
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'
SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code JOIN countrylanguage AS T3 ON T1.CountryCode  =  T3.CountryCode WHERE T2.Continent  =  'Asia' AND T3.Language  =  'Chinese' AND T3.IsOfficial  =  'Yes'
SELECT Name ,  IndepYear ,  SurfaceArea FROM country ORDER BY Population ASC LIMIT 1
SELECT Name, population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
SELECT Name ,  COUNT(*) FROM countrylanguage GROUP BY CountryCode HAVING count(Language)  >  2
SELECT count(District) FROM city WHERE Population  >  (SELECT avg(Population) FROM city)
SELECT GovernmentForm ,  Population FROM country WHERE LifeExpectancy  >  72 GROUP BY GovernmentForm
SELECT avg(LifeExpectancy) ,  Population ,  Continent FROM country WHERE LifeExpectancy  <  72 GROUP BY Continent
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT count(*) FROM country WHERE continent  =  "Asia"
SELECT Name FROM country WHERE continent  =  'Europe' AND Population  =  80000
SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea  >  3000
SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
SELECT name FROM city WHERE population  >  160000 AND population  <  900000
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY Percentage DESC
SELECT COUNT(*) FROM countrylanguage WHERE Percentage = (SELECT MAX(Percentage) FROM countrylanguage)
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode ORDER BY Percentage DESC
SELECT count(*) FROM conductor
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor WHERE Nationality != 'USA'
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT avg(Attendance) FROM SHOW
SELECT MAX(SHARE), MIN(SHARE) FROM performance WHERE TYPE != "Live final"
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
SELECT T2.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Name HAVING COUNT(*)  >  1
SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC
SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T1.Conductor_ID  >  "2008"
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
SELECT T1.Record_Company ,  count(*) FROM orchestra AS T1 JOIN music_festival AS T2 ON T1.Record_Company  =  T2.Record_Company GROUP BY T1.Record_Company ORDER BY count(*) DESC LIMIT 1
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT T1.Record_Company FROM orchestra AS T1 JOIN orchestra AS T2 ON T1.Record_Company  =  T2.Record_Company WHERE T1.Year_of_Founded  <  '2003' AND T2.Year_of_Founded  >  '2003'
SELECT count(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
SELECT DISTINCT YEAR(Date) FROM performance JOIN orchestra ON performance.Orchestra_ID  =  orchestra.Orchestra_ID GROUP BY YEAR(Date) HAVING COUNT(Orchestra_ID) > 1
SELECT count(*) FROM Highschooler
SELECT name ,  grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT DISTINCT grade FROM Highschooler WHERE name  =  "Kyle"
SELECT name FROM Highschooler WHERE grade = 10
SELECT ID FROM Highschooler WHERE name  =  "Kyle"
SELECT count(*) FROM Highschooler WHERE grade IN ('9', '10')
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*)  >=  4
SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
SELECT name ,  count(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id GROUP BY name
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name HAVING count(T2.student_id)  =  (SELECT max(count(T2.student_id)) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name)
SELECT name FROM Highschooler WHERE id IN (SELECT student_id FROM Friend GROUP BY student_id HAVING count(student_id)  >=  3)
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id WHERE T2.friend_id  =  'Kyle'
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'
SELECT id FROM Highschooler WHERE student_id NOT IN (SELECT student_id FROM Friend)
SELECT name FROM Highschooler EXCEPT SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id
SELECT T1.student_id FROM Friend AS T1 JOIN Likes AS T2 ON T1.student_id  =  T2.liked_id GROUP BY T1.student_id HAVING count(*)  >=  2
SELECT T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id  =  T2.student_id WHERE T1.id  IN (SELECT T3.liked_id FROM Highschooler AS T4 JOIN Likes AS T3 ON T4.id  =  T3.liked_id)
SELECT count(*) ,  student_id FROM Likes GROUP BY student_id
SELECT name ,  count(*) FROM Highschooler WHERE id IN (SELECT student_id FROM Likes) GROUP BY name
SELECT T1.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING COUNT(*)  >=  2
SELECT name FROM Highschooler WHERE id IN (SELECT student_id FROM Friend WHERE student_id IN (SELECT id FROM Highschooler WHERE grade > 5)) AND id IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2)
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'
SELECT avg(grade) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id
SELECT MIN(grade) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.id  =  T2.student_id WHERE T2.student_id  IS NULL
SELECT state FROM Owners JOIN Professionals ON Owners.state = Professionals.state
SELECT avg(T2.age) FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id  =  T2.dog_id
SELECT professional_id, last_name, cell_number FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.state  =  'Indiana' OR count(*)  >  2
SELECT name FROM dogs WHERE cost_of_treatment  <  1000 EXCEPT SELECT T2.name FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id
SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT first_name FROM Dogs) AND first_name NOT IN (SELECT first_name FROM Professionals)
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.professional_id IS NULL
SELECT T2.owner_id ,  T2.first_name ,  T2.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING COUNT(T2.professional_id)  >=  2
SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) DESC LIMIT 1)
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.treatment_type_description FROM Treatments AS T1 JOIN Treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code ORDER BY T1.cost LIMIT 1
SELECT T1.owner_id ,  T2.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(cost_of_treatment) DESC LIMIT 1
SELECT professional_id, cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  1
SELECT first_name ,  last_name FROM Professionals WHERE Id IN (SELECT T1.Id FROM Treatments AS T1 JOIN Treatments AS T2 ON T1.cost_of_treatment  <  T2.cost_of_treatment)
SELECT date_of_treatment, first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
SELECT cost_of_treatment ,  treatment_type_description FROM Treatments JOIN treatment_types ON treatment_types.treatment_type_code  =  Treatments.treatment_type_code
SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
SELECT first_name ,  name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id;
SELECT name, date_of_treatment FROM Treatments INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Dogs.breed_code = (SELECT breed_code FROM Dogs ORDER BY COUNT(breed_code) DESC LIMIT 1)
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
SELECT date_arrived ,  date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs ORDER BY age DESC LIMIT 1)
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
SELECT date_arrived ,  date_departed FROM Dogs
SELECT count(distinct dog_id) FROM Treatments
SELECT count(DISTINCT professional_id) FROM Treatments
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE "%West%"
SELECT T1.first_name ,  T1.last_name ,  T1.email_address FROM Owners AS T1 WHERE T1.state LIKE "%North%"
SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs)
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)
SELECT count(DISTINCT professional_id) FROM Professionals EXCEPT SELECT professional_id FROM Treatments
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
SELECT avg(age) FROM Dogs
SELECT age FROM Dogs ORDER BY age DESC LIMIT 1
SELECT charge_type ,  charge_amount FROM Charges
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
SELECT email_address ,  cell_number ,  home_phone FROM professionals
SELECT DISTINCT breed_code, size_code FROM dogs
SELECT T1.first_name, T2.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Birth_Year ,  Citizenship FROM singer
SELECT Name FROM singer WHERE Citizenship != "France"
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY count(*) DESC LIMIT 1
SELECT citizenship, count(*) FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1
SELECT Citizenship ,  MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING count(*)  >  1
SELECT T1.Name ,  SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
SELECT Name FROM singer WHERE Singer_ID NOT IN(SELECT Singer_ID FROM song)
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 AND Birth_Year  >  1955
SELECT count(*) FROM Other_Available_Features
SELECT t1.feature_type_name FROM Other_Available_Features AS t1 JOIN Ref_Feature_Types AS t2 ON t1.feature_type_code  =  t2.feature_type_code WHERE t1.feature_name  =  "AirCon"
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties)
SELECT property_name FROM Properties WHERE property_type_code  IN  ('house', 'apartment') AND room_count  >  1
