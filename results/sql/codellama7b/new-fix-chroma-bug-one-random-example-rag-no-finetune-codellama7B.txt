SELECT COUNT(Id) FROM singer
SELECT T1.name ,  T1.country ,  T1.age FROM singer AS T1 ORDER BY T1.age ASC
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';
SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)
SELECT DISTINCT country FROM singer WHERE age > 20
SELECT T1.country ,  COUNT(T1.country) FROM singer AS T1 GROUP BY T1.country
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)
SELECT T1.LOCATION ,  T1.name FROM stadium AS T1 WHERE T1.capacity  BETWEEN  5000  AND  10000
SELECT max(capacity) ,  avg(average) FROM stadium
SELECT AVG(capacity), MAX(capacity) FROM stadium
SELECT T1.name, T1.capacity FROM stadium AS T1 WHERE T1.average = (SELECT MAX(T2.average) FROM stadium AS T2)
SELECT COUNT(*) FROM concert WHERE YEAR IN ("2014", "2015")
SELECT T1.name, count(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.name;
SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT T1.stadium_id FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  >=  '2014')
SELECT name ,  capacity FROM stadium WHERE stadium_id  =  (SELECT stadium_id FROM concert WHERE year  >  2013 ORDER BY year DESC LIMIT 1)
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM stadium WHERE name NOT IN (SELECT DISTINCT stadium_id FROM concert)
SELECT T1.country FROM singer AS T1 WHERE T1.age > 40 AND T1.age < 30
SELECT name FROM stadium WHERE name NOT IN (SELECT name FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year = 2014))
SELECT concert_name, theme, count(*) FROM singer_in_concert INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY concert_name, theme;
SELECT concert_name, theme, COUNT(concert_id) FROM singer_in_concert INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY concert_name, theme
SELECT name, COUNT(singer_id) FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY name
SELECT T1.name FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id WHERE T2.year  =  '2014'
SELECT T1.name, T1.country FROM singer AS T1 WHERE T1.song_name  LIKE  '%Hey%'
SELECT name, location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE Year IN ('2014', '2015'));
SELECT T1.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T1.capacity DESC LIMIT 1
SELECT COUNT(*) FROM pets WHERE weight > 10
SELECT weight FROM pets WHERE pet_age = (SELECT min(pet_age) FROM pets)
SELECT MAX(weight) ,  petType FROM pets GROUP BY petType
SELECT COUNT(stuid) FROM student WHERE age > 20 AND stuid IN (SELECT stuid FROM has_pet)
SELECT count(petid) FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog') AND stuid IN (SELECT stuid FROM student WHERE sex = 'F')
SELECT count(distinct pettype) FROM pets
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.
SELECT Fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat') AND petid IN (SELECT petid FROM pets WHERE pettype = 'dog'))
SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'));
SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)
SELECT petid, weight FROM pets WHERE pet_age > 1
SELECT T1.pettype ,  AVG(T1.pet_age) ,  MAX(T1.pet_age) FROM pets AS T1 GROUP BY T1.pettype
SELECT pettype, AVG(weight) FROM pets GROUP BY pettype
SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)
SELECT T1.petid FROM has_pet AS T1 JOIN student AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Lname  =  'Smith'
SELECT stuid, COUNT(stuid) FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY stuid
SELECT stuid, count(stuid) FROM has_pet AS T1 JOIN student AS T2 ON T1.stuid  =  T2.stuid GROUP BY stuid
SELECT T1.fname, T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING COUNT(*)  >=  1
SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pet_age = 3 AND pettype = 'cat'))
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);
SELECT COUNT(*) FROM CONTINENTS
SELECT ContId, Continent, COUNT(Continent) FROM COUNTRIES, CONTINENTS WHERE COUNTRIES.Continent = CONTINENTS.Continent GROUP BY ContId, Continent
SELECT COUNT(*) FROM COUNTRIES
SELECT T1.FullName, T1.Id, COUNT(T2.Maker) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.FullName, T1.Id
SELECT T1.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId GROUP BY T1.Model ORDER BY T1.horsepower ASC LIMIT 1
SELECT t1.model FROM CARS_DATA AS t1 JOIN CAR_NAMES AS t2 ON t1.Id  =  t2.MakeId WHERE t1.Weight < (SELECT AVG(t3.Weight) FROM CARS_DATA AS t3)
SELECT model FROM MODEL_LIST WHERE Maker IN (SELECT Maker FROM CAR_MAKERS WHERE Id IN (SELECT id FROM CARS_DATA WHERE year = '1970'))
SELECT Make, Year FROM CARS_DATA INNER JOIN CAR_NAMES ON CARS_DATA.Id = CAR_NAMES.MakeId WHERE Year = (SELECT MIN(Year) FROM CARS_DATA)
SELECT T1.model FROM MODEL_LIST AS T1 JOIN CARS_DATA AS T2 ON T1.model = T2.model WHERE T2.year > 1980 GROUP BY T1.model
SELECT T1.Continent, COUNT(T2.CountryId) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.Continent JOIN car_makers AS T3 ON T1.CountryId = T3.Country GROUP BY T1.Continent
SELECT CountryName FROM COUNTRIES WHERE CountryId IN (SELECT Country FROM CAR_MAKERS GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1)
SELECT count(*), maker FROM model_list GROUP BY maker
SELECT COUNT(DISTINCT(maker)), maker, id, fullname FROM car_makers, model_list WHERE maker = model_list.maker GROUP BY maker, id, fullname
SELECT Accelerate FROM CARS_DATA WHERE Id = 'sw'
SELECT COUNT(*) FROM CAR_MAKERS WHERE Country = 'France'
SELECT COUNT(DISTINCT(Maker)) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'USA'
SELECT AVG(mpg) FROM CARS_DATA WHERE Cylinders = '4'
SELECT min(weight) FROM cars_data WHERE cylinders = '8' AND year = '1974'
SELECT DISTINCT Maker, Model FROM MODEL_LIST
SELECT CountryName, CountryId FROM COUNTRIES WHERE CountryId IN (SELECT Country FROM CAR_MAKERS);
SELECT COUNT(*) FROM CARS_DATA WHERE horsepower > 150
SELECT AVG(Weight) FROM CARS_DATA GROUP BY YEAR
SELECT CountryName FROM COUNTRIES WHERE Continent = 'Europe' AND CountryId IN (SELECT Country FROM CAR_MAKERS GROUP BY Country HAVING COUNT(*) >= 3)
SELECT max(T1.horsepower), T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.Id WHERE T1.cylinders  =  3 GROUP BY T2.Make
SELECT Model FROM CAR_NAMES WHERE Id = (SELECT Id FROM CARS_DATA ORDER BY mpg DESC LIMIT 1)
SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)
SELECT AVG(T1.horsepower) FROM CARS_DATA AS T1 WHERE T1.YEAR  <  1980
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980
SELECT AVG(edispl) FROM CARS_DATA WHERE Id IN (SELECT Id FROM CAR_NAMES WHERE MakeId = 'volvo')
SELECT MAX(Accelerate) FROM CARS_DATA GROUP BY Cylinders
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY COUNT(*) DESC
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 4
SELECT COUNT(*) FROM CARS_DATA WHERE YEAR = '1980'
SELECT COUNT(DISTINCT(MODEL_LIST.Maker)) FROM MODEL_LIST INNER JOIN CAR_MAKERS ON MODEL_LIST.Maker = CAR_MAKERS.Id WHERE CAR_MAKERS.FullName = 'American Motor Company'
SELECT FullName, Id FROM CAR_MAKERS WHERE Id IN (SELECT Maker FROM MODEL_LIST GROUP BY Maker HAVING COUNT(Maker) > 3)
SELECT DISTINCT Model FROM MODEL_LIST WHERE Maker IN (SELECT Id FROM CAR_MAKERS WHERE FullName = 'General Motors') OR weight > '3500'
SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000
SELECT T1.horsepower FROM CARS_DATA AS T1 WHERE T1.accelerate  =  (SELECT MAX(T2.accelerate) FROM CARS_DATA AS T2)
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.Id WHERE T2.Model = 'volvo' GROUP BY T1.cylinders ORDER BY T1.accelerate ASC LIMIT 1
SELECT COUNT(*) FROM CARS_DATA AS t1 JOIN CARS_DATA AS t2 ON t1.Accelerate > t2.Accelerate WHERE t1.Horsepower > t2.Horsepower
SELECT count(*) FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING count(*) > 2);
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6
SELECT Model FROM CARS_DATA WHERE Cylinders = 4 ORDER BY horsepower DESC LIMIT 1
SELECT MakeId ,  Make FROM CAR_NAMES WHERE MakeId NOT IN (SELECT MakeId FROM CARS_DATA WHERE Horsepower > (SELECT MIN(Horsepower) FROM CARS_DATA) AND Cylinders > 3)
SELECT makeid, make FROM car_names WHERE id NOT IN (SELECT id FROM cars_data WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data)) AND cylinders < '4'
SELECT MAX(mpg) FROM cars_data WHERE cylinders = '8' OR year < '1980'
SELECT Model FROM MODEL_LIST WHERE weight < 3500 AND MakeId NOT IN (SELECT Id FROM CAR_MAKERS WHERE FullName = 'Ford Motor Company')
SELECT CountryName FROM countries WHERE CountryName NOT IN (SELECT Country FROM CAR_MAKERS)
SELECT id, maker FROM car_makers WHERE id IN (SELECT DISTINCT maker FROM model_list GROUP BY maker HAVING COUNT(*) >= 2) AND id IN (SELECT DISTINCT maker FROM car_names GROUP BY maker HAVING COUNT(*) <= 3)
SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Maker = T2.Maker GROUP BY T1.Id HAVING count(*)  >  2 AND count(*)  >  3;
SELECT countryId, CountryName FROM Countries WHERE countryId IN (SELECT Country FROM CAR_MAKERS GROUP BY Country HAVING COUNT(*) > 3) OR Model = 'fiat'
SELECT countryid ,  countryname FROM countries WHERE countryid  IN  (SELECT T1.country FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country WHERE T1.countryid  IN  (SELECT T1.country FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country GROUP BY T1.country HAVING
SELECT T1.Country FROM AIRLINES AS T1 WHERE T1.Airline  =  'JetBlue Airways';
SELECT Abbreviation FROM AIRLINES WHERE Airline = "JetBlue Airways"
SELECT Airline, Abbreviation FROM AIRLINES WHERE Country = "USA"
SELECT AirportCode, AirportName FROM AIRPORTS WHERE city = 'Anthony'
SELECT COUNT(*) FROM airlines
SELECT count(*) FROM AIRLINES
SELECT COUNT(*) FROM AIRPORTS
SELECT count(Id) FROM Flight
SELECT count(*) FROM FLIGHTS
SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'
SELECT COUNT(*) FROM AIRLINES WHERE Country = "USA"
SELECT T1.City, T1.Country FROM AIRPORTS AS T1 WHERE T1.AirportName  =  "Alton"
SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  'AKO'
SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'
SELECT COUNT(*) FROM FLIGHTS WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM FLIGHTS WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
SELECT COUNT(*) FROM FLIGHTS WHERE DestAirport = 'ABERDEEN'
SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.City = 'Aberdeen' AND T3.City = 'Ashley'
SELECT COUNT(*) FROM FLIGHTS WHERE Airline = 'JetBlue Airways'
SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T1.DestAirport  =  'ASY' AND T2.Airline  =  'United Airlines'
SELECT COUNT(*) FROM FLIGHTS WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
SELECT COUNT(*) FROM FLIGHTS WHERE DestAirport = 'Aberdeen'
SELECT City FROM AIRPORTS AS t1 JOIN FLIGHTS AS t2 ON t1.AirportCode  =  t2.DestAirport GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1
SELECT City, COUNT(SourceAirport) FROM AIRPORTS, FLIGHTS WHERE AIRPORTS.AirportCode = FLIGHTS.SourceAirport GROUP BY City ORDER BY COUNT(SourceAirport) DESC
SELECT T1.AirportCode FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.AirportCode  =  (SELECT T3.AirportCode FROM AIRPORTS AS T3 JOIN FLIGHTS AS T4 ON T3.AirportCode  =  T4.DestAirport GROUP
SELECT AirportCode FROM AIRPORTS WHERE AirportCode IN (SELECT DestAirport FROM FLIGHTS GROUP BY DestAirport HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM FLIGHTS GROUP BY DestAirport));
SELECT T1.Airline FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.Airline GROUP BY T1.Airline ORDER BY COUNT(T1.Airline) DESC
SELECT Abbreviation, Country FROM AIRLINES WHERE uid IN (SELECT Airline FROM FLIGHTS GROUP BY Airline HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM FLIGHTS GROUP BY Airline))
SELECT Airline FROM AIRLINES WHERE EXISTS (SELECT * FROM FLIGHTS WHERE Airline = AIRLINES.Airline AND SourceAirport = 'AHD')
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG' AND T2.SourceAirport  =  'CVO'
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' AND NOT T2.SourceAirport  =  'APG'
SELECT Airline FROM FLIGHTS WHERE Airline IN (SELECT Airline FROM AIRLINES GROUP BY Airline HAVING COUNT(*) >= 10)
SELECT Airline FROM FLIGHTS WHERE Airline NOT IN (SELECT Airline FROM AIRLINES WHERE uid < 200)
SELECT t1.FlightNo FROM FLIGHTS AS t1 JOIN AIRLINES AS t2 ON t1.Airline = t2.Airline WHERE t2.Airline = "United Airlines"
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = "APG"
SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport IN (SELECT AirportCode FROM AIRPORTS WHERE City = "Aberdeen ")
SELECT FlightNo FROM FLIGHTS WHERE DestAirport = "Aberdeen"
SELECT COUNT(*) FROM Flights WHERE DestAirport IN ('Aberdeen', 'Abilene')
SELECT AirportName FROM Airports WHERE AirportName NOT IN (SELECT AirportName FROM Flights)
SELECT COUNT(*) FROM Employee
SELECT count(*) FROM employee
SELECT name FROM employee ORDER BY age ASC;
SELECT COUNT(city) FROM employee
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1
SELECT COUNT (DISTINCT LOCATION) FROM shop
SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT name, LOCATION, district FROM shop ORDER BY number_products DESC
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID GROUP BY T1.name ORDER BY COUNT(T2.Employee_ID) DESC LIMIT 1
SELECT name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation WHERE bonus = (SELECT MAX(bonus) FROM evaluation))
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT T1.name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.name ORDER BY COUNT(T2.shop_id) DESC LIMIT 1
SELECT name FROM shop WHERE name NOT IN (SELECT name FROM hiring)
SELECT name ,  COUNT(shop_id) FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.name
SELECT sum(bonus) FROM evaluation
SELECT * FROM hiring
SELECT district FROM shop WHERE Number_products < 3000 AND Number_products > 10000
SELECT COUNT(DISTINCT LOCATION) FROM shop
SELECT COUNT(*) FROM Documents
SELECT * FROM Documents
SELECT document_name, template_id FROM Documents WHERE Document_Description LIKE '%w%'
SELECT document_id, template_id, Document_Description FROM Documents WHERE document_name = "Robbin CV"
SELECT COUNT(DISTINCT template_id) FROM Documents
SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')
SELECT template_id, COUNT(template_id) FROM Documents GROUP BY template_id
SELECT template_id, Template_Type_Code FROM Templates WHERE template_id IN (SELECT template_id FROM Documents GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1
SELECT template_id FROM Templates WHERE template_id NOT IN (SELECT template_id FROM Documents)
SELECT COUNT(*) FROM Templates
SELECT template_id, version_number, template_type_code FROM Templates
SELECT DISTINCT template_type_code FROM Templates
SELECT template_id FROM Templates WHERE template_type_code IN ('PP', 'PPT')
SELECT COUNT(*) FROM Templates WHERE template_type_code = 'CV'
SELECT T1.version_number, T1.template_type_code FROM Templates AS T1 WHERE T1.version_number  >  5
SELECT template_type_code, count(template_type_code) FROM Templates GROUP BY template_type_code
SELECT template_type_code ,  COUNT(template_type_code) AS count FROM Templates GROUP BY template_type_code ORDER BY count DESC LIMIT 1
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING COUNT(*) < 3
SELECT MIN(Version_Number) ,  Template_Type_Code FROM Templates
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  'Data base'
SELECT document_name FROM Documents WHERE template_id IN (SELECT template_id FROM Templates WHERE template_type_code = "BK")
SELECT template_type_code, count(*) FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id GROUP BY template_type_code
SELECT T1.template_type_code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY COUNT(T1.template_id) DESC
SELECT template_type_code FROM Templates WHERE template_type_code NOT IN (SELECT template_id FROM Documents)
SELECT t1.template_type_code, t1.template_type_description FROM Ref_template_types AS t1
SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD';
SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'
SELECT DISTINCT template_type_description FROM Ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM Templates WHERE template_ID IN (SELECT template_ID FROM Documents))
SELECT T1.template_id FROM Templates AS T1 JOIN Ref_template_types AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T2.template_type_description  =  "Presentation"
SELECT COUNT(*) FROM Paragraphs
SELECT count(document_ID) FROM Paragraphs WHERE document_ID IN (SELECT document_ID FROM Documents WHERE document_name = "Summer Show")
SELECT * FROM paragraphs WHERE paragraph_text = 'Korea '
SELECT paragraph_id, paragraph_text FROM Paragraphs WHERE document_id = 'Welcome to NY'
SELECT paragraph_text FROM Paragraphs WHERE document_id = 'Customer reviews'
SELECT document_id, count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
SELECT document_id, document_name, COUNT(paragraph_id) FROM Documents LEFT JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY document_id, document_name
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING COUNT(document_id) >= 2
SELECT T1.document_id, T1.document_name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id, T1.document_name ORDER BY COUNT(T2.document_id) DESC LIMIT 1
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1
SELECT T1.document_id FROM Paragraphs AS T1 WHERE (SELECT count(*) FROM Paragraphs AS T2 WHERE T2.document_id = T1.document_id) BETWEEN 1 AND 2
SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' OR paragraph_text = 'Ireland'
SELECT COUNT(*) FROM teacher
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Age, Hometown FROM teacher
SELECT name FROM teacher WHERE hometown  !=  "Little Lever Urban District"
SELECT Name FROM teacher WHERE Age = 32 OR Age = 33
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown, count(*) FROM teacher GROUP BY Hometown
SELECT T1.Hometown FROM teacher AS T1 GROUP BY T1.Hometown ORDER BY count(*) DESC
SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(Hometown)  >=  2
SELECT teacher.Name, course.Course FROM course_arrange INNER JOIN course ON course_arrange.Course_ID = course.Course_ID INNER JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID
SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Course_ID IN (SELECT Course_ID FROM course WHERE Course = 'Math'));
SELECT Name, COUNT(Teacher_ID) FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY Name
SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(*) >= 2)
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
SELECT count(*) FROM visitor WHERE age < 30
SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
SELECT AVG(age) FROM visitor WHERE Level_of_membership <= '4'
SELECT name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age
SELECT museum_id ,  name FROM museum WHERE num_of_staff = (SELECT MAX(num_of_staff) FROM museum)
SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009
SELECT Open_Year, Num_of_Staff FROM museum WHERE name = 'Plaza Museum'
SELECT T1.name FROM museum AS T1 JOIN (SELECT name, MIN(num_of_staff) AS min_staff FROM museum WHERE open_year > 2010 GROUP BY name) AS T2 ON T1.num_of_staff > T2.min_staff
SELECT visitor.id, visitor.name, visitor.age FROM visitor INNER JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id HAVING COUNT(visitor.id) > 1
SELECT visitor.id ,  visitor.name ,  visitor.Level_of_membership FROM visitor INNER JOIN visit ON visitor.id = visit.visitor_id ORDER BY visit.Total_spent DESC
SELECT T1.Museum_ID ,  T1.name FROM museum AS T1 JOIN (SELECT Museum_ID ,  count(Museum_ID) AS cnt FROM visit GROUP BY Museum_ID ORDER BY cnt DESC LIMIT 1) AS T2 ON T1.Museum_ID  =  T2.Museum_ID
SELECT name FROM museum WHERE museum_id NOT IN ( SELECT museum_id FROM visit )
SELECT name, age FROM visitor WHERE id = (SELECT visitor_id FROM visit GROUP BY visitor_id ORDER BY SUM(num_of_ticket) DESC LIMIT 1)
SELECT avg(num_of_ticket), max(num_of_ticket) FROM visit
SELECT SUM(T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_id  =  T2.id WHERE T2.Level_of_membership  =  "1"
SELECT name FROM visitor WHERE id IN (SELECT visitor_id FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE open_year < 2009 INTERSECT SELECT Museum_ID FROM museum WHERE open_year > 2011))
SELECT count(*) FROM visitor AS t1 LEFT JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t2.Museum_ID  IS NULL OR t2.Museum_ID  <  "2010"
SELECT count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008
SELECT count(*) FROM players;
SELECT COUNT(*) FROM player
SELECT count(*) FROM matches
SELECT T1.first_name ,  T1.birth_date FROM players AS T1 WHERE T1.country_code  =  'USA'
SELECT AVG(loser_age), AVG(winner_age) FROM matches
SELECT avg(winner_rank) FROM matches
SELECT MAX(loser_rank) FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT count(distinct loser_name) FROM matches
SELECT tourney_name FROM matches WHERE (SELECT COUNT(*) FROM matches WHERE tourney_name = tourney_name) > 10
SELECT winner_name FROM matches AS T1 JOIN matches AS T2 ON T1.winner_name  =  T2.winner_name WHERE T1.YEAR  =  "2013" AND T2.YEAR  =  "2016"
SELECT COUNT(*) FROM matches WHERE YEAR IN ('2013', '2016')
SELECT country_code, first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')
SELECT first_name ,  country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players);
SELECT T1.first_name, T1.last_name FROM players AS T1 ORDER BY T1.birth_date
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date
SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id WHERE T2.tours  =  (SELECT MAX(T3.tours) FROM rankings AS T3)
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1;
SELECT winner_name, winner_rank_points FROM matches ORDER BY winner_rank_points DESC LIMIT 1
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
SELECT T1.winner_name ,  T1.loser_name FROM matches AS T1 WHERE T1.minutes = (SELECT MAX(T2.minutes) FROM matches AS T2)
SELECT avg(ranking), first_name FROM players, rankings GROUP BY player_id
SELECT first_name, SUM(ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY first_name
SELECT country_code, count(*) FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50
SELECT ranking_date ,  sum(tours) FROM rankings GROUP BY ranking_date
SELECT YEAR ,  COUNT(*) FROM matches GROUP BY YEAR
SELECT T1.winner_name, T1.winner_rank FROM matches AS T1 JOIN (SELECT winner_name, winner_rank, MIN(winner_age) AS winner_age FROM matches GROUP BY winner_name, winner_rank) AS T2 ON T1.winner_name  =  T2.winner_name AND T1.winner_rank  =  T2.winner_rank AND T1.
SELECT COUNT(*) FROM matches WHERE winner_name IN (SELECT winner_name FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'left')
SELECT first_name, country_code, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY winner_rank_points DESC LIMIT 1);
SELECT count(hand) FROM players GROUP BY hand
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT DISTINCT T1.name ,  T1.tonnage FROM ship AS T1 ORDER BY T1.name DESC
SELECT T1.name, T1.date, T2.result FROM battle AS T1 JOIN battle_result AS T2 ON T1.name = T2.name
SELECT max(killed), min(killed) FROM death
SELECT AVG(injured) FROM  death
SELECT killed, injured FROM death WHERE caused_by_ship_id = 't'
SELECT T1.name, T1.RESULT FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril'
SELECT DISTINCT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig')
SELECT id ,  name FROM battle WHERE (SELECT SUM(killed) FROM death WHERE caused_by_ship_id = id) > 10
SELECT ship.Id, ship.Name FROM ship INNER JOIN death ON ship.Id = death.caused_by_ship_id GROUP BY ship.Id, ship.Name ORDER BY SUM(death.caused_by_ship_id) DESC
SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander  =  "Kaloyan" AND T1.latin_commander  =  "Baldwin I"
SELECT count(DISTINCT RESULT) FROM battle
SELECT COUNT(*) FROM ship WHERE tonnage = '225' AND lost_in_battle = '0'
SELECT T1.name ,  T2.date FROM ship AS T1 JOIN battle AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Lettice' OR T1.name  =  'HMS Atalanta'
SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.lost_in_battle  =  'English Channel' GROUP BY T1.name ORDER BY T1.name
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1 ,  line_2 FROM addresses
SELECT count(*) FROM COURSES
SELECT count(*) FROM Courses
SELECT course_description FROM Courses WHERE course_name = 'math'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT T2.department_name, T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
SELECT department_name ,  department_id FROM departments WHERE department_id  =  (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(department_id) DESC LIMIT 1)
SELECT COUNT(*) FROM Degree_Programs
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT COUNT(*) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = "Engineering");
SELECT section_name ,  section_description FROM Sections
SELECT course_name, course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY course_name, course_id HAVING count(*) <= 2
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT semester_name, semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY semester_name, semester_id ORDER BY COUNT(semester_id) DESC
SELECT * FROM Departments WHERE department_name LIKE '%the computer%'
SELECT first_name, middle_name, last_name, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment GROUP BY student_id HAVING count(*) = 2)
SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor'))
SELECT degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Student_Enrolment GROUP BY degree_program_id))
SELECT DISTINCT degree_program_id, degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY degree_program_id, degree_summary_name ORDER BY COUNT(degree_program_id) DESC
SELECT student_id, first_name, middle_name, last_name, COUNT(student_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id ORDER BY COUNT(student_id) DESC
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)
SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY COUNT(course_id) DESC LIMIT 1)
SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING count(*) >= 2)
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT T1.cell_mobile_number FROM students AS T1 WHERE T1.first_name  = 'Timmothy' AND T1.last_name  = 'Ward'
SELECT t1.first_name, t1.middle_name, t1.last_name FROM Students AS t1 WHERE t1.date_first_registered  =  (SELECT min(t2.date_first_registered) FROM Students AS t2)
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 WHERE T1.date_left = (SELECT MIN(T2.date_left) FROM Students AS T2)
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id HAVING count(T2.current_address_id)  =  (SELECT max(count(T2.current_address_id)) FROM Students AS T2
SELECT AVG(transcript_date) FROM Transcripts
SELECT transcript_date ,  other_details FROM Transcripts WHERE transcript_date = '2019-01-01'
SELECT COUNT(Id) FROM Transcripts
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT T1.student_course_id ,  COUNT(T1.student_course_id) AS "Count" FROM Transcript_Contents AS T1 GROUP BY T1.student_course_id HAVING COUNT(T1.student_course_id) > 1
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING count(*) = (SELECT min(count(*)) FROM Transcript_Contents GROUP BY transcript_id))
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_program_id = 'Master') AND degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_program_id = 'Bachelor')
SELECT COUNT(DISTINCT current_address_id) FROM Students
SELECT * FROM Students ORDER BY other_student_details DESC
SELECT * FROM Sections WHERE section_name = 'h'
SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'
SELECT Title FROM Cartoon ORDER BY Title
SELECT * FROM Cartoon WHERE Directed_by = "Ben Jones"
SELECT COUNT(*) FROM Cartoon WHERE Written_by  =  "Joseph Kuhr"
SELECT title, directed_by, original_air_date FROM cartoon ORDER BY original_air_date
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti"
SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country ORDER BY COUNT(Country) DESC;
SELECT COUNT(DISTINCT series_name) , COUNT(DISTINCT content) FROM TV_Channel
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT COUNT(*) FROM TV_Channel WHERE LANGUAGE = 'English'
SELECT LANGUAGE, COUNT(LANGUAGE) FROM TV_Channel GROUP BY LANGUAGE ORDER BY COUNT(LANGUAGE) ASC
SELECT T1.LANGUAGE, COUNT(T1.LANGUAGE) FROM TV_Channel AS T1 GROUP BY T1.LANGUAGE
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'
SELECT Title FROM Cartoon WHERE Channel = (SELECT series_name FROM TV_Channel WHERE id = 'Sky Radio')
SELECT Episode FROM TV_series ORDER BY rating
SELECT T1.Episode, T1.Rating FROM TV_series AS T1 ORDER BY T1.Rating DESC LIMIT 3
SELECT min(SHARE), max(SHARE) FROM TV_series
SELECT T1.Air_Date FROM TV_series AS T1 WHERE T1.Episode  =  'A Love of a Lifetime'
SELECT T1.Weekly_Rank FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'
SELECT Channel FROM TV_series WHERE Episode = 'A Love of a Lifetime' INTERSECT SELECT series_name FROM TV_Channel
SELECT Episode FROM TV_series WHERE Channel = 'Sky Radio'
SELECT T1.Directed_by, COUNT (T1.Directed_by) FROM cartoon AS T1 GROUP BY T1.Directed_by
SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)
SELECT T1.package_option ,  T1.series_name FROM TV_Channel AS T1 WHERE T1.hight_definition_TV  =  'yes'
SELECT country FROM TV_Channel WHERE id IN (SELECT Channel FROM cartoon WHERE written_by = 'Todd Casey')
SELECT country FROM TV_Channel WHERE country NOT IN (SELECT country FROM TV_Channel WHERE Channel IN (SELECT Channel FROM cartoon WHERE written_by = 'Todd Casey'))
SELECT series_name, country FROM TV_Channel WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name IN (SELECT Channel FROM cartoon WHERE directed_by = 'Ben Jones') AND country IN (SELECT Channel FROM cartoon WHERE directed_by = 'Michael Chang'))
SELECT Pixel_aspect_ratio_PAR, country FROM tv_channel WHERE LANGUAGE != 'English'
SELECT T1.id FROM tv_channel AS T1 JOIN tv_channel AS T2 ON T1.country  =  T2.country WHERE T1.id  !=  T2.id GROUP BY T1.id HAVING COUNT(T1.id)  >  2
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = "Ben Jones")
SELECT T1.package_option FROM cartoon AS T1 LEFT JOIN TV_Channel AS T2 ON T1.id = T2.id WHERE T1.directed_by != 'Ben Jones'
SELECT COUNT(*) FROM poker_player
SELECT T1.Earnings FROM poker_player AS T1 ORDER BY T1.Earnings DESC
SELECT Final_Table_Made, Best_Finish FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player)
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Earnings > 300000)
SELECT Name FROM people, poker_player WHERE people.People_ID = poker_player.People_ID ORDER BY Final_Table_Made ASC
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings = (SELECT MIN(T3.Earnings) FROM poker_player AS T3)
SELECT Money_Rank FROM poker_player WHERE People_ID IN (SELECT People_ID FROM people WHERE Height = (SELECT MAX(Height) FROM people))
SELECT AVG(Earnings) FROM poker_player WHERE Height > 200
SELECT people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC
SELECT Nationality, COUNT(Nationality) FROM people GROUP BY Nationality
SELECT T1.Nationality , COUNT(T1.Nationality) AS Count FROM people AS T1 GROUP BY T1.Nationality ORDER BY Count DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
SELECT Name, Birth_Date FROM people ORDER BY Name
SELECT Name FROM people WHERE Nationality != "Russia"
SELECT T1.Name FROM people AS T1 LEFT JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.People_ID IS NULL
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(*) FROM area_code_state
SELECT T1.contestant_number, T1.contestant_name FROM contestants AS T1 ORDER BY T1.contestant_name DESC
SELECT vote_id, phone_number, state FROM votes
SELECT MAX(area_code) ,  MIN(area_code) FROM area_code_state
SELECT MAX(created) FROM votes WHERE state = 'CA'
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
SELECT distinct(state), created FROM votes
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)
SELECT T1.contestant_number ,  T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number ORDER BY T2.contestant_number ASC LIMIT 1
SELECT COUNT(state) FROM votes WHERE state = 'NY' OR state = 'CA'
SELECT count(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY COUNT(T2.state) DESC LIMIT 1
SELECT created, state, phone_number FROM votes WHERE contestant_number = "Tabatha Gehling"
SELECT area_code FROM area_code_state WHERE state IN (SELECT state FROM votes WHERE contestant_number = '1' AND contestant_name = 'Tabatha Gehling' UNION SELECT state FROM votes WHERE contestant_number = '1' AND contestant_name = 'Kelly Clauss')
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
SELECT Name FROM country WHERE IndepYear > 1950
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'republic'
SELECT SUM(SurfaceArea) FROM country WHERE Region = "Caribbean"
SELECT T1.Continent FROM country AS T1 JOIN country AS T2 ON T1.Name  =  T2.Name WHERE T2.Name  =  'Anguilla'
SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  'Kabul'
SELECT Language FROM countrylanguage WHERE CountryCode = 'AW' GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1
SELECT T1.Region ,  T1.Population FROM country AS T1 WHERE T1.Name  =  'Angola'
SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT Name FROM country WHERE Continent = "Asia" ORDER BY LifeExpectancy LIMIT 1
SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = "Asia"
SELECT AVG(T1.LifeExpectancy) FROM country AS T1 WHERE T1.Continent = 'Africa' AND T1.GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT COUNT(*) FROM city WHERE District = 'Gelderland'
SELECT AVG(GNP), SUM(population) FROM country WHERE GovernmentForm = 'US Territory'
SELECT COUNT(DISTINCT LANGUAGE) FROM countrylanguage
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Name = "Aruba")
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG'
SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM countrylanguage GROUP BY CountryCode))
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(T2.CountryCode) DESC LIMIT 1
SELECT COUNT(*) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch')
SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French')
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'Yes' AND T1.Code  IN (SELECT T3.CountryCode FROM countrylanguage AS T3 WHERE T3.Language  =  'French' AND T3.IsOfficial  =  'Yes')
SELECT COUNT(DISTINCT country.Code) FROM country, countrylanguage WHERE countrylanguage.Language = 'Chinese' AND country.Code = countrylanguage.CountryCode
SELECT T1.Region FROM countrylanguage AS T1 JOIN country AS T2 ON T1.Code  =  T2.Code WHERE T1.Language  =  "English" OR T1.Language  =  "Dutch"
SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch'))
SELECT CountryCode FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch'))
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' GROUP BY T1.Language ORDER BY COUNT(*) DESC LIMIT 1
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT CountryCode FROM country WHERE GovernmentForm = "Republic") GROUP BY Language HAVING COUNT(*) = 1
SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  'English' ORDER BY T1.Population DESC LIMIT 1
SELECT T1.Name ,  T1.Population ,  T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent  =  'Asia' ORDER BY T1.SurfaceArea DESC
SELECT AVG(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT Name FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'Yes')
SELECT SUM(t1.Population) FROM country AS t1 LEFT JOIN countrylanguage AS t2 ON t1.Code  =  t2.CountryCode WHERE t2.Language  !=  'English'
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.HeadOfState  =  'Beatrix'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Year < 1930)
SELECT T1.Name FROM country AS T1 WHERE T1.SurfaceArea  >  (SELECT max(T1.SurfaceArea) FROM country AS T1 WHERE T1.Continent  =  "Europe")
SELECT Name FROM country WHERE Continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE Continent = 'Asia')
SELECT country.Name FROM country JOIN country AS country2 ON country.population > country2.population WHERE country.Continent = 'Africa' AND country2.Continent = 'Asia'
SELECT Name FROM country WHERE Continent = 'Asia' AND population > (SELECT max(population) FROM country WHERE Continent = 'Africa')
SELECT Name FROM country WHERE Continent = "Asia" AND population > (SELECT population FROM country WHERE Continent = "Africa")
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE NOT IN ('English')
SELECT T1.CountryCode FROM countrylanguage AS T1 WHERE T1.LANGUAGE  !=  'English'
SELECT Code FROM countrylanguage WHERE LANGUAGE != 'English' AND GovernmentForm != 'Republic'
SELECT city.Name FROM city, country, countrylanguage WHERE city.CountryCode = country.Code AND country.Code = countrylanguage.CountryCode AND countrylanguage.Language = "english" AND country.Continent = "Europe"
SELECT DISTINCT city.name FROM city, countrylanguage, country WHERE city.name = countrylanguage.name AND countrylanguage.countrycode = country.code AND country.continent = "Asia" AND countrylanguage.language = "Chinese"
SELECT DISTINCT city.Name FROM city, country, countrylanguage WHERE city.CountryCode = country.Code AND country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'Chinese' AND country.Continent = 'Asia'
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)
SELECT population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT T1.Name , COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(T2.Language) >= 3
SELECT District, count(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city GROUP BY District)
SELECT T1.GovernmentForm, SUM(T1.Population) FROM country AS T1 WHERE T1.LifeExpectancy > 72 GROUP BY T1.GovernmentForm
SELECT T1.Continent, AVG(T1.LifeExpectancy), SUM(T1.Population) FROM country AS T1 WHERE T1.LifeExpectancy < 72 GROUP BY T1.Continent
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT T1.Name FROM country AS T1 ORDER BY T1.Population LIMIT 3
SELECT COUNT(*) FROM country WHERE continent = 'Asia'
SELECT Name FROM country WHERE Population = 80000 AND continent = 'Europe'
SELECT SUM(T1.population) ,  AVG(T1.surfacearea) FROM country AS T1 WHERE T1.continent  =  'North America' AND T1.surfacearea  >  3000
SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.LANGUAGE ,   T1.CountryCode ,   T1.Percentage FROM countrylanguage AS T1 JOIN (SELECT T2.LANGUAGE ,   MAX(T2.Percentage) AS MaxPercentage FROM countrylanguage AS T2 GROUP BY T2.LANGUAGE) AS T3 ON T1.LANGUAGE  =  T3.LANGUAGE AND T1.Percentage  =  T
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE LANGUAGE = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE LANGUAGE = 'Spanish')
SELECT T1.CountryCode FROM countrylanguage AS T1 JOIN (SELECT T2.CountryCode, MAX(T2.Percentage) AS Max_Percentage FROM countrylanguage AS T2 GROUP BY T2.CountryCode) AS T3 ON T1.CountryCode  =  T3.CountryCode AND T1.Percentage  =  T3.Max_Percentage WHERE T1.LANGUAGE  =  'Spanish'
SELECT COUNT(*) FROM conductor
SELECT Name FROM conductor ORDER BY Age
SELECT T1.Name FROM conductor AS T1 WHERE T1.Nationality  !=  "USA"
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT AVG(Attendance) FROM SHOW
SELECT MAX(SHARE), MIN(SHARE) FROM performance WHERE TYPE != "Live final"
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name, Orchestra FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING count(*) > 1)
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID ORDER BY COUNT(T2.Conductor_ID) DESC LIMIT 1
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T1.Name  IS NOT NULL AND T2.Conductor_ID  IS NOT NULL AND T1.Name  LIKE  "%" AND T1.Name  LIKE  "%" AND T1.Name  LIKE  "%" AND T1.Name  LIKE  "%"
SELECT T1.Record_Company, COUNT(T1.Record_Company) FROM orchestra AS T1 GROUP BY T1.Record_Company
SELECT Major_Record_Format, COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
SELECT T1.Record_Company FROM orchestra AS T1 GROUP BY T1.Record_Company ORDER BY COUNT(T1.Record_Company) DESC LIMIT 1
SELECT DISTINCT T1.Orchestra FROM orchestra AS T1 LEFT JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID WHERE T2.Orchestra_ID  IS NULL
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
SELECT year FROM performance WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM orchestra WHERE year IN (SELECT year FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1))
SELECT COUNT(*) FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = "Kyle"
SELECT name FROM Highschooler WHERE grade = "10"
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(*) FROM Highschooler WHERE grade  IN  ('9','10')
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1
SELECT DISTINCT T1.grade FROM Highschooler AS T1 JOIN Highschooler AS T2 ON T1.grade = T2.grade JOIN Highschooler AS T3 ON T1.grade = T3.grade JOIN Highschooler AS T4 ON T1.grade = T4.grade WHERE T1.grade = T2.grade AND T1.grade = T3.grade AND T1.grade = T4.grade
SELECT student_id, count(student_id) FROM Friend GROUP BY student_id
SELECT name, COUNT(student_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.id = Friend.student_id GROUP BY name
SELECT name FROM Highschooler WHERE id IN (SELECT student_id FROM Friend GROUP BY student_id HAVING count(*) = (SELECT count(*) FROM Friend GROUP BY student_id ORDER BY count(*) DESC LIMIT 1))
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name HAVING COUNT(T2.student_id) >= 3
SELECT name FROM Highschooler WHERE id IN (SELECT friend_id FROM Friend WHERE student_id = "Kyle");
SELECT COUNT(Friend.student_id) FROM Friend, Highschooler WHERE Friend.student_id = Highschooler.id AND Highschooler.name = 'Kyle'
SELECT student_id FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)
SELECT name FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)
SELECT student_id FROM Likes WHERE student_id IN (SELECT student_id FROM Friend) INTERSECT SELECT liked_id FROM Likes
SELECT name FROM Highschooler WHERE id IN (SELECT student_id FROM Friend) AND id IN (SELECT liked_id FROM Likes)
SELECT COUNT(student_id) FROM Likes GROUP BY student_id
SELECT name, count(likes.student_id) FROM likes JOIN highschooler ON likes.student_id = highschooler.id GROUP BY name
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id  =  T2.student_id WHERE T1.id  =  (SELECT T3.student_id FROM Likes AS T3 GROUP BY T3.student_id ORDER BY count(*) DESC LIMIT 1)
SELECT name FROM Highschooler WHERE id IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(*) >= 2)
SELECT name FROM Highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2)
SELECT COUNT(DISTINCT student_id) FROM Likes WHERE student_id IN (SELECT id FROM Highschooler WHERE name = 'Kyle')
SELECT AVG(T1.grade) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)
SELECT Owners.state FROM Owners JOIN Professionals ON Owners.state = Professionals.state;
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'IN' OR (SELECT COUNT(*) FROM Treatments WHERE professional_id = Professionals.professional_id) > 2
SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)
SELECT DISTINCT first_name FROM Owners WHERE first_name NOT IN (SELECT DISTINCT first_name FROM Dogs) AND first_name IN (SELECT DISTINCT first_name FROM Professionals)
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.professional_id  IS NULL;
SELECT owner_id ,  first_name ,  last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(owner_id) DESC LIMIT 1)
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(professional_id) >= 2)
SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
SELECT treatment_type_description FROM Treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM Treatments ORDER BY SUM(treatment_cost) LIMIT 1)
SELECT owner_id, zip_code FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments GROUP BY dog_id ORDER BY sum(cost_of_treatment) DESC LIMIT 1))
SELECT professional_id ,  cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2)
SELECT first_name, last_name FROM Professionals WHERE Id IN (SELECT Id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))
SELECT DISTINCT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id;
SELECT cost_of_treatment, treatment_type_description FROM Treatments, treatment_types WHERE Treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT t1.first_name, t1.last_name, t2.size_code FROM Owners AS t1 JOIN Dogs AS t2 ON t1.owner_id  =  t2.owner_id
SELECT first_name, name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id
SELECT T1.name, T1.date_of_treatment FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id WHERE T2.breed_code = (SELECT T3.breed_code FROM Dogs AS T3 GROUP BY T3.breed_code HAVING count(T3.breed_code) = (SELECT count(T4.breed
SELECT Dogs.name ,  Owners.first_name FROM Dogs INNER JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia'
SELECT date_arrived ,  date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  (SELECT MIN(T3.age) FROM Dogs AS T3)
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1
SELECT count(*) FROM Treatments
SELECT COUNT(*) FROM Treatments
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT MAX(T1.cost_of_treatment) FROM Treatments AS T1
SELECT COUNT(*) FROM Dogs AS t1 LEFT JOIN Treatments AS t2 ON t1.dog_id  =  t2.dog_id WHERE t2.dog_id  IS NULL
SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT T1.name ,  T1.age ,  T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = 1
SELECT AVG(age) FROM Dogs
SELECT MAX(age) FROM Dogs
SELECT charge_type, charge_amount FROM Charges
SELECT MAX(charge_amount) FROM Charges
SELECT T1.email_address ,  T1.cell_number ,  T1.home_phone FROM professionals AS T1
SELECT breed_code ,  size_code FROM dogs
SELECT t1.first_name ,  t2.treatment_type_description FROM professionals AS t1 JOIN Treatments AS t2 ON t1.professional_id  =  t2.professional_id JOIN Treatment_types AS t3 ON t2.treatment_type_code  =  t3.treatment_type_code
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Birth_Year, Citizenship FROM singer
SELECT Name FROM singer WHERE Citizenship != "France"
SELECT Name FROM singer WHERE Birth_Year = '1948' OR Birth_Year = '1949'
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT T2.Citizenship ,  count(*) FROM singer AS T1 JOIN singer AS T2 ON T1.Citizenship  =  T2.Citizenship GROUP BY T1.Citizenship
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC
SELECT citizenship ,  count(*) FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT Title, Name FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000)
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1)
SELECT Name, SUM(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Name
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955
SELECT count(*) FROM Other_Available_Features
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = 'AirCon'
SELECT property_type_description FROM  Ref_Property_Types WHERE property_type_code  =  'property_type_code'
SELECT T1.property_name FROM Properties AS T1 WHERE T1.property_type_code  =  'House' OR T1.property_type_code  =  'Apartment' AND T1.room_count  >  '1'
