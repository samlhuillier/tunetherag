SELECT count(*) FROM singer
SELECT name ,  country ,  age FROM singer ORDER BY age
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
SELECT singer.song_name, singer.song_release_year FROM singer INNER JOIN song ON singer.song_name = song.song_name WHERE singer.age = (SELECT MIN(age) FROM singer)
SELECT DISTINCT country FROM singer WHERE age > 20
SELECT country ,  count(*) FROM singer GROUP BY country
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)
SELECT LOCATION, name FROM stadium WHERE capacity  >  5000 AND capacity  <  10000
SELECT max(capacity) ,  avg(capacity) FROM stadium
SELECT avg(capacity) ,  max(capacity) FROM stadium
SELECT t1.name, t1.capacity FROM stadium AS t1 WHERE t1.average = (SELECT MAX(t2.average) FROM stadium AS t2)
SELECT count(*) FROM concert WHERE YEAR = '2014' OR YEAR = '2015'
SELECT name ,  COUNT(*) FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY name
SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year >= '2014') ORDER BY capacity DESC
SELECT t1.name, t1.capacity FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id  =  t2.stadium_id WHERE t2.year > 2013 GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1
SELECT YEAR FROM concert ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
SELECT country FROM singer WHERE age  <  30 INTERSECT SELECT country FROM singer WHERE age  >  40
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = '2014')
SELECT T2.concert_name ,  T2.theme ,  COUNT(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_id
SELECT singer.name , concert.theme , COUNT(singer_in_concert.concert_id) FROM singer , concert , singer_in_concert WHERE singer.singer_id = singer_in_concert.singer_id AND concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name , concert.theme
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_id
SELECT T1.name FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id WHERE T2.year  =  '2014'
SELECT T1.name ,  T1.country FROM singer AS T1 JOIN song AS T2 ON T1.name  =  T2.artist_name WHERE T2.song_name LIKE "%Hey%"
SELECT t1.name ,  t1.location FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id  =  t2.stadium_id WHERE t2.Year  IN  ('2014','2015')
SELECT COUNT(*) FROM concert WHERE stadium_id IN (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)
SELECT COUNT(*) FROM pets WHERE weight > 10
SELECT weight FROM pets WHERE pet_age = (SELECT min(pet_age) FROM pets)
SELECT max(weight) ,  petType FROM pets GROUP BY petType
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
SELECT count(DISTINCT pettype) FROM pets
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  "Cat" OR T3.pettype  =  "Dog"
SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = "Cat" INTERSECT SELECT petid FROM pets WHERE pettype = "Dog"))
SELECT DISTINCT Fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat') AND petid IN (SELECT petid FROM pets WHERE pettype = 'dog'))
SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet AS T1 JOIN pets AS T2 ON T1.petid  =  T2.petid WHERE T2.pettype  =  "cat")
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog') AND petid NOT IN (SELECT petid FROM pets WHERE pettype = 'cat'))
SELECT pettype ,  weight FROM pets WHERE pet_age = (SELECT min(pet_age) FROM pets)
SELECT petid, weight FROM pets WHERE pet_age > 1
SELECT pettype ,  avg(pet_age) ,  max(pet_age) FROM pets GROUP BY pettype
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)
SELECT T1.petid FROM has_pet AS T1 JOIN student AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Lname  =  'Smith'
SELECT stuid, count(*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid GROUP BY stuid
SELECT stuid FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)
SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)
SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = "Cat" AND pet_age = "3"))
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT count(*) FROM CONTINENTS
SELECT ContId, Continent, count(*) FROM COUNTRIES JOIN CONTINENTS ON COUNTRIES.Continent = CONTINENTS.Continent GROUP BY ContId, Continent
SELECT count(*) FROM COUNTRIES
SELECT FullName, Id, count(*) FROM MODEL_LIST GROUP BY FullName, Id ORDER BY count(*) DESC;
SELECT Model FROM CAR_NAMES WHERE Id = (SELECT MakeId FROM CARS_DATA ORDER BY horsepower ASC LIMIT 1);
SELECT model FROM CARS_DATA WHERE Weight < (SELECT avg(Weight) FROM CARS_DATA)
SELECT t1.maker FROM CAR_MAKERS AS t1 JOIN CARS_DATA AS t2 ON t1.id = t2.id WHERE t2.year = '1970'
SELECT T1.Make ,  T1.Year FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.Id = T2.Id GROUP BY T1.Make ,  T1.Year ORDER BY T1.Year ASC LIMIT 1
SELECT DISTINCT model FROM CARS_DATA WHERE year > 1980;
SELECT T1.Continent ,  count(*) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.ContId  =  T2.ContId JOIN car_makers AS T3 ON T1.CountryId  =  T3.Country GROUP BY T1.Continent
SELECT CountryName FROM COUNTRIES WHERE CountryId IN (SELECT Country FROM CAR_MAKERS GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1)
SELECT count(*) ,  t1.fullname FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id  =  t2.maker GROUP BY t1.fullname
SELECT COUNT(DISTINCT(Model)) ,  Maker ,  Id ,  FullName FROM MODEL_LIST ,  CAR_MAKERS WHERE CAR_MAKERS.id = MODEL_LIST.Maker GROUP BY Maker
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.Id WHERE T2.Make = "AMC" AND T2.MakeId = "sw"
SELECT count(DISTINCT Country) FROM CAR_MAKERS WHERE Country IN (SELECT CountryId FROM COUNTRIES WHERE CountryName = 'France');
SELECT count(*) FROM singer
SELECT name ,  country ,  age FROM singer ORDER BY age
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
SELECT singer.song_name, singer.song_release_year FROM singer INNER JOIN song ON singer.song_name = song.song_name WHERE singer.age = (SELECT MIN(age) FROM singer)
SELECT DISTINCT country FROM singer WHERE age > 20
SELECT country ,  count(*) FROM singer GROUP BY country
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)
SELECT LOCATION, name FROM stadium WHERE capacity  >  5000 AND capacity  <  10000
SELECT max(capacity) ,  avg(capacity) FROM stadium
SELECT avg(capacity) ,  max(capacity) FROM stadium
SELECT t1.name, t1.capacity FROM stadium AS t1 WHERE t1.average = (SELECT MAX(t2.average) FROM stadium AS t2)
SELECT count(*) FROM concert WHERE YEAR = '2014' OR YEAR = '2015'
SELECT name ,  COUNT(*) FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY name
SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year >= '2014') ORDER BY capacity DESC
SELECT t1.name, t1.capacity FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id  =  t2.stadium_id WHERE t2.year > 2013 GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1
SELECT YEAR FROM concert ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
SELECT country FROM singer WHERE age  <  30 INTERSECT SELECT country FROM singer WHERE age  >  40
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = '2014')
SELECT T2.concert_name ,  T2.theme ,  COUNT(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_id
SELECT singer.name , concert.theme , COUNT(singer_in_concert.concert_id) FROM singer , concert , singer_in_concert WHERE singer.singer_id = singer_in_concert.singer_id AND concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name , concert.theme
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_id
SELECT T1.name FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id WHERE T2.year  =  '2014'
SELECT T1.name ,  T1.country FROM singer AS T1 JOIN song AS T2 ON T1.name  =  T2.artist_name WHERE T2.song_name LIKE "%Hey%"
SELECT t1.name ,  t1.location FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id  =  t2.stadium_id WHERE t2.Year  IN  ('2014','2015')
SELECT COUNT(*) FROM concert WHERE stadium_id IN (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)
SELECT COUNT(*) FROM pets WHERE weight > 10
SELECT weight FROM pets WHERE pet_age = (SELECT min(pet_age) FROM pets)
SELECT max(weight) ,  petType FROM pets GROUP BY petType
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
SELECT count(DISTINCT pettype) FROM pets
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  "Cat" OR T3.pettype  =  "Dog"
SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = "Cat" INTERSECT SELECT petid FROM pets WHERE pettype = "Dog"))
SELECT DISTINCT Fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat') AND petid IN (SELECT petid FROM pets WHERE pettype = 'dog'))
SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet AS T1 JOIN pets AS T2 ON T1.petid  =  T2.petid WHERE T2.pettype  =  "cat")
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog') AND petid NOT IN (SELECT petid FROM pets WHERE pettype = 'cat'))
SELECT pettype ,  weight FROM pets WHERE pet_age = (SELECT min(pet_age) FROM pets)
SELECT petid, weight FROM pets WHERE pet_age > 1
SELECT pettype ,  avg(pet_age) ,  max(pet_age) FROM pets GROUP BY pettype
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)
SELECT T1.petid FROM has_pet AS T1 JOIN student AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Lname  =  'Smith'
SELECT stuid, count(*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid GROUP BY stuid
SELECT stuid FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)
SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)
SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = "Cat" AND pet_age = "3"))
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT count(*) FROM CONTINENTS
SELECT ContId, Continent, count(*) FROM COUNTRIES JOIN CONTINENTS ON COUNTRIES.Continent = CONTINENTS.Continent GROUP BY ContId, Continent
SELECT count(*) FROM COUNTRIES
SELECT FullName, Id, count(*) FROM MODEL_LIST GROUP BY FullName, Id ORDER BY count(*) DESC;
SELECT Model FROM CAR_NAMES WHERE Id = (SELECT MakeId FROM CARS_DATA ORDER BY horsepower ASC LIMIT 1);
SELECT model FROM CARS_DATA WHERE Weight < (SELECT avg(Weight) FROM CARS_DATA)
SELECT t1.maker FROM CAR_MAKERS AS t1 JOIN CARS_DATA AS t2 ON t1.id = t2.id WHERE t2.year = '1970'
SELECT T1.Make ,  T1.Year FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.Id = T2.Id GROUP BY T1.Make ,  T1.Year ORDER BY T1.Year ASC LIMIT 1
SELECT DISTINCT model FROM CARS_DATA WHERE year > 1980;
SELECT T1.Continent ,  count(*) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.ContId  =  T2.ContId JOIN car_makers AS T3 ON T1.CountryId  =  T3.Country GROUP BY T1.Continent
SELECT CountryName FROM COUNTRIES WHERE CountryId IN (SELECT Country FROM CAR_MAKERS GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1)
SELECT count(*) ,  t1.fullname FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id  =  t2.maker GROUP BY t1.fullname
SELECT COUNT(DISTINCT(Model)) ,  Maker ,  Id ,  FullName FROM MODEL_LIST ,  CAR_MAKERS WHERE CAR_MAKERS.id = MODEL_LIST.Maker GROUP BY Maker
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.Id WHERE T2.Make = "AMC" AND T2.MakeId = "sw"
SELECT count(DISTINCT Country) FROM CAR_MAKERS WHERE Country IN (SELECT CountryId FROM COUNTRIES WHERE CountryName = 'France');
SELECT count(*) FROM singer
SELECT name ,  country ,  age FROM singer ORDER BY age
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
SELECT singer.song_name, singer.song_release_year FROM singer INNER JOIN song ON singer.song_name = song.song_name WHERE singer.age = (SELECT MIN(age) FROM singer)
SELECT DISTINCT country FROM singer WHERE age > 20
SELECT country ,  count(*) FROM singer GROUP BY country
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)
SELECT LOCATION, name FROM stadium WHERE capacity  >  5000 AND capacity  <  10000
SELECT max(capacity) ,  avg(capacity) FROM stadium
SELECT avg(capacity) ,  max(capacity) FROM stadium
SELECT t1.name, t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t1.name, t1.capacity ORDER BY avg(t2.average) DESC LIMIT 1
SELECT count(*) FROM concert WHERE YEAR IN ('2014', '2015')
SELECT name ,  COUNT(*) FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY name
SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year >= '2014') ORDER BY capacity DESC
SELECT t1.name, t1.capacity FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id  =  t2.stadium_id WHERE t2.year > 2013 GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
SELECT country FROM singer WHERE age  <  30 INTERSECT SELECT country FROM singer WHERE age  >  40
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = '2014')
SELECT T2.concert_name ,  T2.theme ,  COUNT(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_id
SELECT singer.name , theme , COUNT(singer_in_concert.concert_id) FROM singer , singer_in_concert , concert WHERE singer.singer_id = singer_in_concert.singer_id AND singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name , theme
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_id
SELECT T1.name FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id WHERE T2.year  =  '2014'
SELECT T1.name ,  T1.country FROM singer AS T1 JOIN song AS T2 ON T1.name  =  T2.artist_name WHERE T2.song_name LIKE "%Hey%"
SELECT t1.name ,  t1.location FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id  =  t2.stadium_id WHERE t2.Year  IN  ('2014','2015')
SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)
SELECT COUNT(*) FROM pets WHERE weight > 10
SELECT weight FROM pets WHERE pet_age = 'youngest'
SELECT max(weight) ,  petType FROM pets GROUP BY petType
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
SELECT count(DISTINCT pettype) FROM pets
SELECT T1.Fname FROM Student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  "Cat" OR T3.pettype  =  "Dog"
SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = "Cat") AND petid IN (SELECT petid FROM pets WHERE pettype = "Dog"))
SELECT DISTINCT Fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat') AND petid IN (SELECT petid FROM pets WHERE pettype = 'dog'))
SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet AS T1 JOIN pets AS T2 ON T1.petid  =  T2.petid WHERE T2.pettype  =  "cat")
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog') AND petid NOT IN (SELECT petid FROM pets WHERE pettype = 'cat'))
SELECT pettype ,  weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)
SELECT petid, weight FROM pets WHERE pet_age > 1
SELECT pettype ,  avg(pet_age) ,  max(pet_age) FROM pets GROUP BY pettype
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)
SELECT T1.petid FROM has_pet AS T1 JOIN student AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Lname  =  'Smith'
SELECT stuid, count(*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid GROUP BY stuid
SELECT stuid FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)
SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)
SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = "Cat" AND pet_age = "3"))
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT count(*) FROM CONTINENTS
SELECT ContId, Continent, count(*) FROM COUNTRIES JOIN CONTINENTS ON COUNTRIES.Continent = CONTINENTS.Continent GROUP BY ContId, Continent
SELECT count(*) FROM COUNTRIES
SELECT FullName, Id, count(*) FROM MODEL_LIST GROUP BY FullName, Id ORDER BY count(*) DESC;
SELECT Model FROM CAR_NAMES WHERE Id = (SELECT MakeId FROM CARS_DATA ORDER BY horsepower ASC LIMIT 1);
SELECT model FROM CARS_DATA WHERE Weight < (SELECT avg(Weight) FROM CARS_DATA)
SELECT t1.maker FROM CAR_MAKERS AS t1 JOIN CARS_DATA AS t2 ON t1.id = t2.id WHERE t2.year = '1970'
SELECT T1.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT MIN(T3.Year) FROM CARS_DATA AS T3)
SELECT model FROM CARS_DATA WHERE year > 1980 GROUP BY model HAVING count(*) > 1;
SELECT T1.Continent ,  count(*) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.ContId  =  T2.ContId JOIN car_makers AS T3 ON T1.CountryId  =  T3.Country GROUP BY T1.Continent
SELECT CountryName FROM COUNTRIES WHERE CountryId IN (SELECT Country FROM CAR_MAKERS GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1)
SELECT count(*) ,  t1.fullname FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id  =  t2.maker GROUP BY t1.fullname
SELECT COUNT(DISTINCT(MODEL_LIST.Maker)) ,  MODEL_LIST.Maker ,  CAR_MAKERS.FullName ,  CAR_MAKERS.id FROM MODEL_LIST ,  CAR_MAKERS WHERE MODEL_LIST.Maker = CAR_MAKERS.id
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.Id WHERE T2.Make = "AMC" AND T2.MakeId = "sw"
SELECT count(*) FROM CAR_MAKERS WHERE Country = 'France';
SELECT COUNT(*) FROM MODEL_LIST WHERE Maker IN (SELECT Maker FROM CAR_MAKERS WHERE Country IN (SELECT Country FROM COUNTRIES WHERE CountryName = 'USA'));
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders = '4'
SELECT weight FROM cars_data WHERE cylinders = '8' AND year = '1974' ORDER BY weight ASC LIMIT 1
SELECT DISTINCT Maker, Model FROM MODEL_LIST
SELECT CountryName, CountryId FROM COUNTRIES WHERE CountryId IN (SELECT Country FROM CAR_MAKERS)
SELECT count(*) FROM CARS_DATA WHERE horsepower > 150;
SELECT AVG(Weight) FROM CARS_DATA WHERE YEAR = '2019';
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryName JOIN CONTINENTS AS T3 ON T2.Continent = T3.ContId WHERE T3.Continent = 'Europe' GROUP BY T2.CountryName HAVING count(*) >= 3
SELECT max(T2.horsepower) ,  T1.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.cylinders LIKE "3:%"
SELECT Model FROM CAR_NAMES WHERE Id = (SELECT Id FROM CARS_DATA ORDER BY mpg DESC LIMIT 1);
SELECT model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid ORDER BY mpg DESC LIMIT 1
SELECT AVG(horsepower) FROM CARS_DATA WHERE YEAR < 1980
SELECT avg(horsepower) FROM cars_data WHERE year < 1980
SELECT avg(edispl) FROM CARS_DATA WHERE Id IN (SELECT Id FROM CAR_NAMES WHERE MakeId = 'volvo')
SELECT Cylinders, MAX(Accelerate) FROM CARS_DATA GROUP BY Cylinders
SELECT t2.Model FROM CAR_NAMES AS t1 JOIN CAR_NAMES AS t2 ON t1.Model  =  t2.Model GROUP BY t1.Model ORDER BY count(*) DESC LIMIT 1
SELECT COUNT(Cylinders) FROM CARS_DATA WHERE Cylinders > 4
SELECT count(*) FROM CARS_DATA WHERE YEAR = '1980';
SELECT count(*) FROM MODEL_LIST WHERE Maker = 'American Motor Company';
SELECT FullName, Id FROM CAR_MAKERS WHERE FullName IN (SELECT Maker FROM MODEL_LIST GROUP BY Maker HAVING count(*) > 3);
SELECT DISTINCT Model FROM MODEL_LIST WHERE Maker IN (SELECT Id FROM CAR_MAKERS WHERE FullName = 'General Motors') OR weight > 3500;
SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000
SELECT horsepower FROM CARS_DATA ORDER BY accelerate DESC LIMIT 1
SELECT COUNT(cylinders) FROM CARS_DATA WHERE CAR_NAMES.Model = 'volvo' AND CARS_DATA.accelerate = (SELECT MIN(accelerate) FROM CARS_DATA WHERE CAR_NAMES.Model = 'volvo');
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > (SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1)
SELECT COUNT(*) FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 2)
SELECT count(*) FROM CARS_DATA WHERE Cylinders > 6;
SELECT Model FROM CARS_DATA WHERE Cylinders = '4' ORDER BY horsepower DESC LIMIT 1
SELECT MakeId ,  Make FROM CAR_NAMES WHERE MakeId NOT IN (SELECT MakeId FROM CARS_DATA WHERE Horsepower > (SELECT MIN(Horsepower) FROM CARS_DATA) AND Cylinders > 3);
SELECT T1.makeid ,  T1.make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid  =  T2.id WHERE T2.horsepower  <  1000 AND T2.cylinders  <  4
SELECT max(mpg) FROM cars_data WHERE cylinders = '8' OR year < '1980';
SELECT model FROM MODEL_LIST WHERE weight < 3500 AND MakeId NOT IN (SELECT Id FROM CAR_MAKERS WHERE FullName = 'Ford Motor Company')
SELECT CountryName FROM countries WHERE CountryName NOT IN (SELECT Country FROM CAR_MAKERS)
SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING count(*) >= 2) AND id IN (SELECT maker FROM car_makers GROUP BY maker HAVING count(*) >= 3);
SELECT T1.id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS t2 ON T1.id  =  T2.maker_id GROUP BY T1.id HAVING count(*)  >  1 AND count(*)  >  2
SELECT T1.CountryId, T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Maker = T3.Maker WHERE T3.Model = 'fiat' OR count(*) > 3 GROUP BY T1.CountryId, T1.CountryName
SELECT T1.countryid, T1.countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country WHERE T1.countryid  IN  (SELECT T3.country FROM model_list AS T3 JOIN car_makers AS T4 ON T3.maker  =  T4.id GROUP BY T3.country HAVING count(*)  >=  3)
SELECT Country FROM AIRLINES WHERE Airline = "JetBlue Airways"
SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'
SELECT Airline, Abbreviation FROM AIRLINES WHERE Country = "USA"
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city = 'Anthony'
SELECT count(*) FROM airlines
SELECT count(*) FROM AIRLINES
SELECT count(*) FROM AIRPORTS
SELECT count(*) FROM Flight
SELECT count(*) FROM FLIGHTS
SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'
SELECT COUNT(*) FROM AIRLINES WHERE Country = 'USA'
SELECT City, Country FROM AIRPORTS WHERE AirportName = 'Alton'
SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'
SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'
SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'APG'
SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'ATO'
SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'ABERDEEN'
SELECT count(*) FROM FLIGHTS WHERE DestAirport IN (SELECT AirportCode FROM AIRPORTS WHERE City = 'Aberdeen')
SELECT COUNT(*) FROM FLIGHTS WHERE DestAirport = 'Ashley' AND SourceAirport = 'Aberdeen'
SELECT count(*) FROM FLIGHTS WHERE Airline = 'JetBlue Airways'
SELECT COUNT(*) FROM FLIGHTS WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT count(*) FROM FLIGHTS WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'Aberdeen' AND Airline = 'United Airlines'
SELECT City FROM AIRPORTS WHERE AirportCode IN (SELECT DestAirport FROM FLIGHTS) GROUP BY City ORDER BY count(*) DESC LIMIT 1
SELECT City FROM AIRPORTS WHERE AirportCode IN (SELECT SourceAirport FROM FLIGHTS) GROUP BY City ORDER BY count(*) DESC LIMIT 1
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T2.DestAirport ORDER BY count(*) DESC LIMIT 1
SELECT DestAirport FROM FLIGHTS GROUP BY DestAirport ORDER BY count(*) LIMIT 1
SELECT Airline FROM FLIGHTS GROUP BY Airline ORDER BY count(*) DESC LIMIT 1
SELECT Abbreviation, Country FROM AIRLINES WHERE Airline = (SELECT Airline FROM FLIGHTS GROUP BY Airline ORDER BY count(*) LIMIT 1)
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.Airline = T2.Airline WHERE T2.DestAirport = 'AHD'
SELECT Airline FROM AIRLINES WHERE Airline IN (SELECT Airline FROM FLIGHTS WHERE SourceAirport = 'APG') AND Airline IN (SELECT Airline FROM FLIGHTS WHERE SourceAirport = 'CVO')
SELECT Airline FROM AIRLINES WHERE Airline IN (SELECT Airline FROM FLIGHTS WHERE SourceAirport = 'CVO') AND Airline NOT IN (SELECT Airline FROM FLIGHTS WHERE SourceAirport = 'APG')
SELECT T1.Airline FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.Airline GROUP BY T1.Airline HAVING count(*) >= 10
SELECT Airline FROM AIRLINES WHERE uid NOT IN (SELECT Airline FROM FLIGHTS GROUP BY Airline HAVING COUNT(*) < 200)
SELECT FlightNo FROM FLIGHTS WHERE Airline = "United Airlines"
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = "APG"
SELECT FlightNo FROM FLIGHTS WHERE DestAirport = "APG"
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport IN (SELECT AirportCode FROM AIRPORTS WHERE City = 'Aberdeen')
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
SELECT count(DISTINCT DestAirport) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene'
SELECT T1.AirportName FROM Flights AS T1 WHERE T1.AirportName NOT IN (SELECT T2.AirportName FROM Flights AS T2 WHERE T2.SourceAirport  =  T1.AirportName OR T2.DestAirport  =  T1.AirportName)
SELECT count(*) FROM Employee
SELECT count(*) FROM Employee
SELECT name FROM employee ORDER BY age ASC
SELECT city, COUNT(*) FROM employee GROUP BY city
SELECT city FROM employee WHERE age > 30 GROUP BY city HAVING COUNT(*) > 1
SELECT t1.LOCATION ,  count(*) FROM shop AS t1 GROUP BY t1.LOCATION
SELECT t1.manager_name ,  t1.district FROM shop AS t1 GROUP BY t1.district ORDER BY sum(t1.number_products) LIMIT 1
SELECT min(Number_products) , max(Number_products) FROM shop
SELECT name, LOCATION, district FROM shop ORDER BY number_products DESC
SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY count(*) DESC LIMIT 1
SELECT name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation WHERE bonus = (SELECT MAX(bonus) FROM evaluation))
SELECT t1.name FROM employee AS t1 LEFT JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID WHERE t2.name IS NULL
SELECT name FROM shop WHERE shop_id IN (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY count(shop_id) DESC LIMIT 1);
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
SELECT T1.name ,  COUNT(*) FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.name
SELECT sum(bonus) FROM evaluation
SELECT * FROM hiring
SELECT district FROM shop WHERE Number_products < 3000 AND Number_products > 10000
SELECT count(DISTINCT LOCATION) FROM shop
SELECT count(*) FROM Documents
SELECT document_id ,  document_name ,  document_description FROM Documents
SELECT Documents.document_name, Documents.template_id FROM Documents WHERE Documents.document_description LIKE '%w%';
SELECT T1.document_id, T1.template_id, T1.Document_Description FROM Documents AS T1 WHERE T1.document_name  =  "Robbin CV"
SELECT count(DISTINCT template_id) FROM Documents
SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')
SELECT template_id, count(*) FROM Documents GROUP BY template_id
SELECT template_id, Template_Type_Code FROM Documents INNER JOIN Templates ON Documents.template_id = Templates.template_id GROUP BY template_id, Template_Type_Code ORDER BY count(*) DESC LIMIT 1
SELECT template_id FROM Documents GROUP BY template_id HAVING COUNT(*) > 1
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
SELECT count(*) FROM Templates
SELECT template_id ,  version_number ,  template_type_code FROM Templates
SELECT DISTINCT template_type_code FROM Templates
SELECT template_id FROM Templates WHERE template_type_code IN ("PP", "PPT")
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
SELECT version_number, template_type_code FROM Templates WHERE version_number > 5;
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
SELECT MIN(Version_Number), template_type_code FROM Templates;
SELECT template_type_code FROM Templates WHERE template_id IN (SELECT template_id FROM Documents WHERE document_name = "Data base")
SELECT document_name FROM Documents WHERE template_id IN (SELECT template_id FROM Templates WHERE template_type_code = "BK")
SELECT template_type_code ,  count(*) FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id GROUP BY template_type_code
SELECT template_type_code FROM Templates INNER JOIN Documents ON Templates.template_id = Documents.template_id GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
SELECT template_type_code FROM Templates WHERE template_type_code NOT IN (SELECT template_id FROM Documents)
SELECT template_type_code ,  template_type_description FROM Ref_template_types
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
SELECT DISTINCT template_type_description FROM Ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM Templates WHERE template_ID IN (SELECT template_ID FROM Documents));
SELECT template_id FROM Templates WHERE template_type_code IN (SELECT template_type_code FROM Ref_template_types WHERE template_type_description = "Presentation");
SELECT count(*) FROM Paragraphs
SELECT count(*) FROM Paragraphs WHERE document_ID IN (SELECT document_ID FROM Documents WHERE document_name = 'Summer Show')
SELECT other_details, paragraph_text FROM paragraphs WHERE paragraph_text LIKE '%Korea %'
SELECT paragraph_id ,  paragraph_text FROM Paragraphs WHERE document_id = (SELECT document_id FROM Documents WHERE Document_Name = 'Welcome to NY')
SELECT paragraph_text FROM Paragraphs WHERE document_id = 'Customer reviews'
SELECT document_id ,  COUNT(document_id) FROM Paragraphs GROUP BY document_id ORDER BY document_id
SELECT document_id ,  document_name ,  COUNT(document_id) FROM Documents LEFT JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY document_id
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
SELECT t1.document_id, t1.document_name FROM Documents AS t1 JOIN Paragraphs AS t2 ON t1.document_id = t2.document_id GROUP BY t1.document_id ORDER BY count(*) DESC LIMIT 1
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
SELECT Paragraphs.document_id FROM Paragraphs WHERE Paragraphs.document_id IN (SELECT Documents.document_id FROM Documents WHERE Documents.document_id = 1 AND (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.document_id = Documents.document_id) <= 2);
SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' OR paragraph_text = 'Ireland'
SELECT count(*) FROM teacher
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Age ,  Hometown FROM teacher
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
SELECT Name FROM  teacher WHERE Age  =  32 OR Age  =  33
SELECT Hometown FROM teacher WHERE Age = (SELECT min(Age) FROM teacher)
SELECT Hometown ,  count(*) FROM teacher GROUP BY Hometown
SELECT T1.Hometown FROM teacher AS T1 GROUP BY T1.Hometown ORDER BY COUNT(T1.Hometown) DESC LIMIT 1
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2
SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID  =  T3.Course_ID
SELECT teacher.Name, course.Course FROM course_arrange INNER JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name
SELECT T1.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  'Math'
SELECT T1.Name , COUNT(T2.Teacher_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Name
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING count(*)  >  1
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
SELECT COUNT(*) FROM visitor WHERE age  <  30
SELECT T1.name FROM visitor AS T1 WHERE T1.Level_of_membership  >  4 ORDER BY T1.Level_of_membership  DESC
SELECT AVG(age) FROM visitor WHERE Level_of_membership <= '4'
SELECT name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age
SELECT T1.museum_id ,  T1.name FROM museum AS T1 JOIN staff AS T2 ON T1.museum_id  =  T2.museum_id GROUP BY T1.museum_id ORDER BY count(*) DESC LIMIT 1
SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
SELECT T1.Open_Year ,  T1.Num_of_Staff FROM museum AS T1 WHERE T1.name = 'Plaza Museum'
SELECT T1.name FROM museum AS T1 WHERE T1.num_of_staff > (SELECT MIN(T2.num_of_staff) FROM museum AS T2 WHERE T2.open_year > 2010)
SELECT T1.id ,  T1.name ,  T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id GROUP BY T2.visitor_id HAVING count(*)  >  1
SELECT T1.id ,  T1.name ,  T1.Level_of_membership FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_id  =  T2.id ORDER BY T1.Total_spent DESC LIMIT 1;
SELECT T1.Museum_ID ,  T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID GROUP BY T2.Museum_ID HAVING count(*)  >=  1 ORDER BY count(*) DESC LIMIT 1
SELECT name FROM museum WHERE Museum_ID NOT IN ( SELECT Museum_ID FROM visit )
SELECT name ,  age FROM visitor WHERE id = (SELECT visitor_id FROM visit GROUP BY visitor_id HAVING COUNT(visitor_id) = (SELECT MAX(COUNT(visitor_id)) FROM visit))
SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
SELECT SUM(Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_id  =  T2.id WHERE T2.Level_of_membership  =  '1'
SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.open_year < 2009 AND T3.open_year > 2011
SELECT count(*) FROM visitor WHERE id NOT IN ( SELECT visitor_id FROM visit WHERE Museum_ID IN ( SELECT Museum_ID FROM museum WHERE open_year > 2010 ) )
SELECT count(*) FROM museum WHERE open_year  >=  2013 OR open_year  <=  2008
SELECT count(*) FROM players
SELECT count(*) FROM player
SELECT count(*) FROM matches
SELECT first_name ,  birth_date FROM players AS T1 WHERE T1.country_code  =  'USA'
SELECT avg(loser_age), avg(winner_age) FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT max(loser_rank) FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT count(DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches WHERE (SELECT count(*) FROM matches WHERE tourney_name = matches.tourney_name) > 10
SELECT T1.winner_name FROM matches AS T1 JOIN matches AS T2 WHERE T1.YEAR  =  2013 AND T2.YEAR  =  2016 AND T1.winner_name  =  T2.winner_name
SELECT COUNT(*) FROM matches WHERE YEAR IN ('2013', '2016')
SELECT country_code ,  first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')
SELECT first_name, country_code FROM players ORDER BY birth_date DESC LIMIT 1
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date
SELECT T1.first_name ,  T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name ,  T1.country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT max(count(*)) ,  YEAR FROM matches GROUP BY YEAR
SELECT T1.winner_name ,  T1.winner_rank_points FROM matches AS T1 GROUP BY T1.winner_name ORDER BY count(T1.winner_name) DESC LIMIT 1
SELECT t1.winner_name FROM matches AS t1 WHERE t1.tourney_name  =  'Australian Open' AND t1.winner_rank_points  =  (SELECT max(t2.winner_rank_points) FROM matches AS t2)
SELECT t1.name AS winner, t2.name AS loser FROM matches AS t1 JOIN matches AS t2 ON t1.minutes > t2.minutes
SELECT T1.first_name, AVG(T2.ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
SELECT first_name, sum(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
SELECT COUNT(*) FROM players AS T1 JOIN country AS T2 ON T1.country_code = T2.Country_id
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50
SELECT count(*) ,  ranking_date FROM rankings GROUP BY ranking_date
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
SELECT T1.winner_name ,  T1.winner_rank ,  T1.winner_age FROM matches AS T1 ORDER BY T1.winner_age ASC LIMIT 3;
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'left'
SELECT t1.first_name ,  t1.country_code ,  t1.birth_date FROM players AS t1 JOIN matches AS t2 ON t1.player_id  =  t2.winner_id WHERE t2.winner_rank_points  =  (SELECT max(t3.winner_rank_points) FROM matches AS t3)
SELECT hand, count(DISTINCT player_id) FROM players GROUP BY hand
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage FROM ship ORDER BY name DESC
SELECT T1.name ,  T1.date ,  T2.result FROM battle AS T1 JOIN battle_result AS T2 ON T1.name  =  T2.name
SELECT max(killed) ,  min(killed) FROM death
SELECT avg(injured) FROM death
SELECT killed, injured FROM death WHERE caused_by_ship_id = 't'
SELECT name, RESULT FROM battle WHERE bulgarian_commander != 'Boril'
SELECT DISTINCT id, name FROM battle WHERE EXISTS (SELECT * FROM ship WHERE ship_type = 'Brig' AND lost_in_battle = battle.id)
SELECT T1.id ,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id JOIN ship AS T3 ON T2.killed  >  10 AND T2.caused_by_ship_id  =  T3.lost_in_battle GROUP BY T1.id HAVING count(*)  >  1
SELECT ship.Id, ship.Name FROM ship INNER JOIN death ON death.caused_by_ship_id = ship.Id GROUP BY ship.Id, ship.Name ORDER BY COUNT(death.caused_by_ship_id) DESC LIMIT 1
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
SELECT count(DISTINCT RESULT) FROM battle
SELECT count(*) FROM ship WHERE lost_in_battle = 'false' AND tonnage = '225'
SELECT name, date FROM ship, battle WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta' AND ship.lost_in_battle = battle.id
SELECT name, result, bulgarian_commander FROM battle WHERE location = "English Channel" AND lost_in_battle = "0"
SELECT note FROM death WHERE note LIKE '%East%'
SELECT T1.line_1, T1.line_2 FROM addresses AS T1
SELECT count(*) FROM COURSES
SELECT count(*) FROM Courses
SELECT T1.course_description FROM Courses AS T1 WHERE T1.course_name = 'math'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT T1.department_name ,  T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_name ,  T1.department_id ORDER BY count(*) DESC
SELECT T2.department_name ,  T1.department_id FROM degree_programs AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
SELECT count(DISTINCT department_id) FROM Degree_Programs
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT count(DISTINCT department_id) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Engineering')
SELECT t1.section_name, t1.section_description FROM Sections AS t1
SELECT T1.course_name, T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name, T1.course_id HAVING COUNT(*)  <=  2
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT semester_name, semester_id FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name LIKE "%the computer%"
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  =  2
SELECT DISTINCT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor'))
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.degree_program_id ,  T2.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'North Carolina' EXCEPT SELECT T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) >= 2)
SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name  =  "Timmothy" AND T1.last_name  =  "Ward"
SELECT T1.cell_mobile_number FROM students AS T1 WHERE T1.first_name = 'Timmothy' AND T1.last_name = 'Ward'
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students)
SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students)
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(T1.address_id) DESC
SELECT AVG(transcript_date) FROM Transcripts
SELECT transcript_date, other_details FROM Transcripts WHERE transcript_date = '2019-01-01'
SELECT count(*) FROM Transcripts
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT count(student_course_id), student_course_id FROM Transcript_Contents GROUP BY student_course_id HAVING count(student_course_id) <= 1
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING count(transcript_id) = (SELECT min(count(transcript_id)) FROM Transcript_Contents GROUP BY transcript_id))
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_program_id = 'Master' OR degree_program_id = 'Bachelor') GROUP BY semester_id HAVING count(*) > 1
SELECT COUNT(DISTINCT current_address_id) FROM Students
SELECT * FROM Students ORDER BY other_student_details DESC
SELECT * FROM Sections WHERE section_name = 'h'
SELECT T1.first_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE (T2.country  =  'Haiti' OR T1.cell_mobile_number  =  '09700166582')
SELECT title FROM Cartoon ORDER BY title
SELECT T1.Title FROM Cartoon AS T1 WHERE T1.Directed_by  =  "Ben Jones"
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country ORDER BY COUNT(Country) DESC LIMIT 1
SELECT COUNT(DISTINCT series_name) ,  COUNT(*) FROM TV_Channel
SELECT t1.Content FROM TV_Channel AS t1 WHERE t1.series_name  =  'Sky Radio'
SELECT t1.Package_Option FROM TV_Channel AS t1 WHERE t1.series_name  =  'Sky Radio'
SELECT count(*) FROM TV_Channel AS T1 WHERE T1.LANGUAGE = "English"
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(LANGUAGE) ASC LIMIT 1;
SELECT LANGUAGE, COUNT(DISTINCT LANGUAGE) FROM TV_Channel GROUP BY LANGUAGE
SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!')
SELECT t1.Title FROM Cartoon AS t1 JOIN TV_Channel AS t2 ON t1.Channel = t2.id WHERE t2.series_name = 'Sky Radio'
SELECT Episode FROM TV_series ORDER BY rating
SELECT T1.Episode ,  T1.Rating FROM TV_series AS T1 ORDER BY T1.Rating DESC LIMIT 3
SELECT min(SHARE) ,  max(SHARE) FROM TV_series
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT T1.Weekly_Rank FROM TV_series AS T1 WHERE T1.Episode = "A Love of a Lifetime"
SELECT Channel FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT t1.Episode FROM TV_series AS t1 JOIN TV_Channel AS t2 ON t1.Channel = t2.id WHERE t2.series_name = 'Sky Radio'
SELECT directed_by ,  count(*) FROM cartoon GROUP BY directed_by
SELECT t1.production_code, t1.channel FROM cartoon AS t1 JOIN (SELECT t2.production_code, t2.channel, max(t2.original_air_date) AS max_date FROM cartoon AS t2 GROUP BY t2.production_code, t2.channel) AS t3 ON t1.production_code = t3.production_code AND t1.channel = t3.channel AND t1.
SELECT t1.package_option, t1.series_name FROM TV_Channel AS t1 WHERE t1.hight_definition_TV = 'yes'
SELECT t1.country FROM TV_Channel AS t1 JOIN cartoon AS t2 ON t1.id  =  t2.Channel WHERE t2.written_by  =  'Todd Casey'
SELECT country FROM TV_Channel EXCEPT SELECT country FROM TV_Channel WHERE id IN (SELECT Channel FROM cartoon WHERE written_by = 'Todd Casey')
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.directed_by  =  'Ben Jones' AND T2.directed_by  =  'Michael Chang'
SELECT Pixel_aspect_ratio_PAR, country FROM tv_channel WHERE LANGUAGE != 'English'
SELECT id FROM tv_channel WHERE country IN (SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*)  >  2)
SELECT id FROM TV_Channel WHERE directed_by != 'Ben Jones'
SELECT package_option FROM cartoon WHERE directed_by != 'Ben Jones'
SELECT count(*) FROM poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT Final_Table_Made ,  max(Best_Finish) FROM poker_player GROUP BY Final_Table_Made
SELECT avg(Earnings) FROM poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Earnings > 300000)
SELECT Name FROM people, poker_player WHERE people.People_ID = poker_player.People_ID ORDER BY Final_Table_Made ASC
SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings ASC LIMIT 1
SELECT Money_Rank FROM poker_player WHERE People_ID = (SELECT People_ID FROM people ORDER BY Height DESC LIMIT 1)
SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings
SELECT Nationality ,  count(*) FROM people GROUP BY Nationality
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
SELECT Name, Birth_Date FROM people ORDER BY Name
SELECT Name FROM people WHERE Nationality != "Russia"
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT count(DISTINCT Nationality) FROM people
SELECT count(*) FROM area_code_state
SELECT T1.contestant_number ,  T1.contestant_name FROM contestants AS T1 ORDER BY T1.contestant_name DESC
SELECT vote_id, phone_number, state FROM votes
SELECT max(area_code) ,  min(area_code) FROM area_code_state
SELECT MAX(created) FROM votes WHERE state = 'CA'
SELECT T1.contestant_name FROM contestants AS T1 WHERE T1.contestant_name != "Jessie Alloway"
SELECT DISTINCT state ,  created FROM votes
SELECT T1.contestant_number, T2.contestant_name FROM votes AS T1 JOIN contestants AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING COUNT(*) >= 2
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes) ORDER BY contestant_number ASC LIMIT 1
SELECT count(*) FROM votes WHERE state  =  "NY" OR state  =  "CA"
SELECT count(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
SELECT area_code FROM area_code_state WHERE state IN (SELECT state FROM votes GROUP BY state ORDER BY count(*) DESC LIMIT 1)
SELECT T1.created ,  T1.state ,  T1.phone_number FROM votes AS T1 WHERE T1.contestant_number  =  'Tabatha Gehling'
SELECT T1.area_code FROM votes AS T1 JOIN contestants AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' AND T2.contestant_name = 'Kelly Clauss'
SELECT DISTINCT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
SELECT Name FROM country WHERE IndepYear > 1950
SELECT count(*) FROM country WHERE GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT continent FROM country WHERE name = 'Anguilla'
SELECT country.Code FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') GROUP BY Language ORDER BY count(*) DESC LIMIT 1
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT region, population FROM country WHERE name = 'Angola'
SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT T1.Name FROM country AS T1 JOIN (SELECT Continent, MIN(LifeExpectancy) AS LifeExpectancy FROM country GROUP BY Continent) AS T2 ON T1.Continent  =  T2.Continent AND T1.LifeExpectancy  =  T2.LifeExpectancy ORDER BY T1.LifeExpectancy LIMIT 1
SELECT sum(Population), max(GNP) FROM country WHERE Continent = 'Asia'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = "Africa" AND GovernmentForm = "Republic"
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT count(*) FROM city WHERE District = 'Gelderland'
SELECT avg(GNP), sum(population) FROM country WHERE GovernmentForm = 'US Territory'
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AW'
SELECT count(DISTINCT T1.Name) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Code  =  "AFG"
SELECT c.Name FROM countrylanguage cl INNER JOIN country c ON cl.CountryCode = c.Code GROUP BY c.Name ORDER BY count(*) DESC LIMIT 1
SELECT T1.Continent, COUNT(DISTINCT T1.Code) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(DISTINCT T1.Code) DESC
SELECT count(*) FROM countrylanguage WHERE countrylanguage.Language IN ('English', 'Dutch')
SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French')
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.Language  =  "French"
SELECT count(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Chinese'
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.Language  =  "English" OR T1.Language  =  "Dutch"
SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language  =  "English" OR T2.language  =  "Dutch"
SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY COUNT (*) DESC LIMIT 1
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.GovernmentForm  =  "Republic" GROUP BY T1.Language HAVING count(T1.CountryCode)  =  1
SELECT Name, Population FROM city WHERE Name IN (SELECT Name FROM countrylanguage WHERE Language = 'English') ORDER BY Population DESC LIMIT 1
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
SELECT avg(LifeExpectancy) ,  Name FROM country WHERE Name NOT IN (SELECT Name FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'Yes') GROUP BY Name
SELECT count(*) FROM country AS T1 LEFT JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IS NULL
SELECT T1.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "Yes"
SELECT count(DISTINCT T1.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Code  IN  (SELECT T3.Code FROM country AS T3 WHERE T3.Founded  <  1930)
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT Name FROM country WHERE Continent = 'Africa' AND population < (SELECT population FROM country WHERE Continent = 'Asia' LIMIT 1);
SELECT Name FROM country WHERE Continent = 'Africa' AND population < (SELECT population FROM country WHERE Continent = 'Asia' LIMIT 1);
SELECT Name FROM country WHERE Continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE Continent = 'Africa')
SELECT Name FROM country WHERE Continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE Continent = 'Africa')
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE NOT IN ("English")
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE NOT IN ("English")
SELECT Code FROM countrylanguage WHERE LANGUAGE != "English" AND GovernmentForm != "Republic"
SELECT city.Name FROM city, country, countrylanguage WHERE city.CountryCode = country.Code AND country.Code = countrylanguage.CountryCode AND countrylanguage.Language = "English" AND country.Continent = "Europe" AND countrylanguage.IsOfficial = "No"
SELECT T1.name FROM city AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code JOIN countrylanguage AS T3 ON T2.code  =  T3.countrycode WHERE T3.language  =  'Chinese' AND T2.continent  =  'Asia' GROUP BY T1.name HAVING count(*)  =  1
SELECT Name FROM city WHERE CountryCode IN (SELECT CountryCode FROM country WHERE Continent = 'Asia') AND Language = 'Chinese'
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1
SELECT population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
SELECT country.Name, count(*) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Code IN (SELECT country.Code FROM countrylanguage GROUP BY country.Code HAVING count(*) >= 3) GROUP BY country.Name
SELECT District, count(*) FROM city WHERE Population > (SELECT avg(Population) FROM city GROUP BY District)
SELECT GovernmentForm ,  Population FROM country WHERE LifeExpectancy  > 72
SELECT Continent, avg(LifeExpectancy), sum(Population) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent
SELECT Name ,  SurfaceArea FROM country WHERE SurfaceArea IN (SELECT SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5)
SELECT T1.Name FROM country AS T1 ORDER BY T1.Population DESC LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT count(*) FROM country WHERE continent = 'Asia'
SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'
SELECT sum(population), avg(surfacearea) FROM country WHERE surfacearea > 3000 AND continent = 'North America'
SELECT name FROM city WHERE Population  >  160000 AND Population  <  900000
SELECT name FROM city WHERE population  >  160000 AND population  <  900000
SELECT LANGUAGE, count(*) FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
SELECT LANGUAGE, PERCENTAGE FROM COUNTRYLANGUAGE GROUP BY LANGUAGE ORDER BY PERCENTAGE DESC
SELECT COUNT(*) FROM countrylanguage WHERE LANGUAGE = 'Spanish' AND PERCENTAGE = (SELECT MAX(PERCENTAGE) FROM countrylanguage WHERE LANGUAGE = 'Spanish')
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode ORDER BY Percentage DESC
SELECT count(*) FROM conductor
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor WHERE Nationality != "USA"
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT avg(Attendance) FROM SHOW
SELECT MAX(SHARE), MIN(SHARE) FROM performance WHERE TYPE != "Live final"
SELECT count(DISTINCT nationality) FROM conductor
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT t1.Name FROM conductor AS t1 ORDER BY t1.Year_of_Work DESC LIMIT 1
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
SELECT T2.Name ,  COUNT(*) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Name HAVING COUNT(*)  >  1
SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Name ORDER BY count(T1.Conductor_ID) DESC LIMIT 1
SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE YEAR  >  2008)
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
SELECT Major_Record_Format ,  COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
SELECT count(DISTINCT T1.Major_Record_Format) FROM orchestra AS T1 WHERE T1.Major_Record_Format  =  "CD" OR T1.Major_Record_Format  =  "DVD"
SELECT T1.Year FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T1.Year HAVING COUNT(T2.Performance_ID)  >  1
SELECT count(*) FROM Highschooler
SELECT T1.name ,  T1.grade FROM Highschooler AS T1
SELECT grade FROM Highschooler
SELECT DISTINCT grade FROM Highschooler WHERE name = 'Kyle'
SELECT DISTINCT T1.name FROM Highschooler AS T1 WHERE T1.grade  =  '10'
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT count(*) FROM Highschooler WHERE grade = '9' OR grade = '10'
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4
SELECT student_id, COUNT(student_id) FROM Friend GROUP BY student_id
SELECT T1.name, COUNT(T2.student_id) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name HAVING COUNT(T2.student_id) >= 3
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id = T2.student_id WHERE T2.friend_id = 'Kyle'
SELECT count(*) FROM Friend WHERE student_id = 'Kyle'
SELECT id FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)
SELECT T1.name FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.id  =  T2.student_id WHERE T1.name  IS  NULL
SELECT T1.student_id FROM Likes AS T1 JOIN Friend AS T2 ON T1.student_id = T2.student_id WHERE T1.liked_id IN (SELECT T3.liked_id FROM Likes AS T3)
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id = T2.student_id JOIN Friend AS T3 ON T1.id = T3.student_id
SELECT student_id, count(*) FROM Likes GROUP BY student_id
SELECT T1.name , COUNT(T2.student_id) FROM Highschooler AS T1 LEFT JOIN Likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name HAVING count(*)  >=  2
SELECT name FROM Highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM Friend GROUP BY student_id HAVING count(*) >= 2)
SELECT count(*) FROM Likes WHERE student_id = 'Kyle'
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)
SELECT T1.state FROM Owners AS T1 JOIN Professionals AS T2 ON T1.state = T2.state;
SELECT avg(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT professional_id, last_name, cell_number FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.state  =  'Indiana' OR count(*)  >  2 GROUP BY T1.professional_id, T2.last_name, T2.cell_number
SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)
SELECT T1.first_name FROM Owners AS T1 LEFT JOIN Dogs AS T2 ON T1.first_name = T2.first_name WHERE T2.first_name IS NULL UNION SELECT T1.first_name FROM Professionals AS T1 LEFT JOIN Dogs AS T2 ON T1.first_name = T2.first_name WHERE T2.first_name IS NULL
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.professional_id IS NULL
SELECT T2.first_name ,  T2.last_name ,  T2.owner_id FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T2.owner_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2
SELECT T2.breed_name FROM Dogs AS T1 JOIN Breeds AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_code ORDER BY count(*) DESC LIMIT 1
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(T3.dog_id) DESC LIMIT 1
SELECT treatment_type_description FROM Treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM Treatments WHERE cost = (SELECT MIN(cost) FROM Treatments))
SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1
SELECT professional_id ,  cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  1
SELECT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.Id  =  T2.Id WHERE T2.cost_of_treatment < (SELECT AVG(T3.cost_of_treatment) FROM Treatments AS T3)
SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id
SELECT cost_of_treatment ,  treatment_type_description FROM Treatments INNER JOIN treatment_types ON Treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT first_name ,  last_name ,  size_code FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT first_name ,  name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id;
SELECT name, date_of_treatment FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)
SELECT Owners.first_name, Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'VA'
SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT min(age) FROM Dogs))
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
SELECT date_arrived, date_departed FROM Dogs
SELECT count(*) FROM Treatments WHERE dog_id  =  "dogs"
SELECT count(*) FROM Treatments WHERE professional_id IN (SELECT id FROM professionals WHERE profession = 'dog')
SELECT T1.role_code , T1.street , T1.city , T1.state FROM professionals AS T1 JOIN Addresses AS T2 ON T1.city LIKE '%West%' AND T1.city = T2.city;
SELECT T1.first_name ,  T1.last_name ,  T1.email_address FROM Owners AS T1 JOIN State AS T2 ON T2.state_id  =  T1.state_id WHERE T2.state  LIKE  '%North%'
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)
SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT count(*) FROM dogs WHERE dog_id NOT IN ( SELECT T1.dog_id FROM treatments AS T1 )
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)
SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SELECT avg(age) FROM Dogs
SELECT age FROM Dogs WHERE age = (SELECT max(age) FROM Dogs)
SELECT charge_type, sum(charge_amount) FROM Charges GROUP BY charge_type
SELECT MAX(charge_amount) FROM Charges
SELECT email_address, cell_number, home_phone FROM professionals
SELECT DISTINCT breed_code, size_code FROM dogs;
SELECT T1.first_name, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Birth_Year, Citizenship FROM singer
SELECT Name FROM singer WHERE Citizenship != 'France'
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
SELECT T1.Name FROM singer AS T1 JOIN singer AS T2 ON T1.Net_Worth_Millions  >  T2.Net_Worth_Millions ORDER BY T1.Net_Worth_Millions DESC LIMIT 1
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1
SELECT Citizenship , MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT T1.Title ,  T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING count(*) > 1
SELECT T1.Name ,  SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Singer_ID
SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
SELECT count(*) FROM Other_Available_Features
SELECT t1.feature_type_name FROM Other_Available_Features AS t1 JOIN Ref_Feature_Types AS t2 ON t1.feature_type_code  =  t2.feature_type_code WHERE t1.feature_name  =  'AirCon'
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties)
SELECT T1.property_name FROM Properties AS T1 WHERE T1.property_type_code  =  'house' OR (T1.property_type_code  =  'apartment' AND T1.room_count  >  1)
