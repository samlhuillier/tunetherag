SELECT count(*) FROM singer
SELECT name, country, age FROM singer ORDER BY age
SELECT avg(age), min(age), max(age) FROM singer WHERE country = 'France'
SELECT song_name, song_release_year FROM singer ORDER BY age ASC LIMIT 1
SELECT DISTINCT country FROM singer WHERE age  >  20
SELECT country ,  count(*) FROM singer GROUP BY country
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)
SELECT LOCATION, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
SELECT max(capacity), avg(capacity) FROM stadium
SELECT avg(capacity), max(capacity) FROM stadium
SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)
SELECT count(*) FROM concert WHERE YEAR  >=  2014
SELECT name ,  COUNT(stadium_id) FROM stadium JOIN concert ON stadium_id  =  stadium_id GROUP BY name
SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year >= '2014') ORDER BY capacity DESC
SELECT t1.name, t1.capacity FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id  =  t2.stadium_id WHERE t2.year > 2013 GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1
SELECT YEAR FROM concert ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
SELECT country FROM singer WHERE age > 40 AND age < 30
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = '2014')
SELECT T1.concert_name ,  T1.theme ,  COUNT(T2.concert_id) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_name ,  T1.theme
SELECT concert_name, theme, count(*) FROM singer_in_concert INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY concert_name, theme
SELECT T1.name ,  COUNT(T1.singer_id) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.name
SELECT T1.name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T2.concert_id  =  T3.concert_id WHERE T3.year = "2014"
SELECT T1.name ,  T1.country FROM singer AS T1 JOIN song AS T2 ON T1.name  =  T2.artist_name WHERE T2.song_name LIKE "%Hey%"
SELECT t1.name, t1.location FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id = t2.stadium_id WHERE t2.Year IN ('2014', '2015') GROUP BY t1.stadium_id
SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)
SELECT COUNT(*) FROM pets WHERE weight > 10
SELECT weight FROM pets WHERE pet_age = 'youngest'
SELECT max(weight) ,  petType FROM pets GROUP BY petType
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
SELECT count(DISTINCT pettype) FROM pets
SELECT Fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = "Cat" OR pettype = "Dog"))
SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = "Cat") AND petid IN (SELECT petid FROM pets WHERE pettype = "Dog"))
SELECT DISTINCT Fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat') AND petid IN (SELECT petid FROM pets WHERE pettype = 'dog'))
SELECT major ,  age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype  =  "Cat") EXCEPT SELECT stuid FROM has_pet)
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid  =  "Dog" EXCEPT SELECT stuid FROM has_pet WHERE petid  =  "Cat")
SELECT pettype ,  weight FROM pets WHERE pet_age = 'youngest'
SELECT petid, weight FROM pets WHERE pet_age  >  1
SELECT pettype, avg(pet_age), max(pet_age) FROM pets GROUP BY pettype
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)
SELECT petid FROM has_pet WHERE stuid = (SELECT stuid FROM student WHERE Lname = ‘Smith’)
SELECT stuid, count(*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid GROUP BY stuid
SELECT T1.stuid FROM has_pet AS T1 JOIN student AS T2 ON T1.stuid  =  T2.stuid
SELECT fname ,  sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)
SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = "Cat" AND pet_age = "3"))
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT count(*) FROM CONTINENTS
SELECT c.ContId, c.Continent, count(c.ContId) FROM COUNTRIES c, CONTINENTS ct WHERE c.Continent = ct.Continent GROUP BY c.ContId, c.Continent
SELECT count(*) FROM COUNTRIES
SELECT t1.FullName, t1.Id, count(*) FROM CAR_MAKERS AS t1 JOIN MODEL_LIST AS t2 ON t1.Id = t2.Maker GROUP BY t1.Id
SELECT Model FROM CAR_NAMES WHERE Id = (SELECT MakeId FROM CARS_DATA ORDER BY horsepower ASC LIMIT 1);
SELECT model FROM CARS_DATA WHERE Weight < (SELECT avg(Weight) FROM CARS_DATA)
SELECT Maker FROM CAR_MAKERS WHERE Id IN (SELECT MakeId FROM CARS_DATA WHERE year = 1970)
SELECT Make, Year FROM CAR_NAMES, CARS_DATA WHERE CARS_DATA.Id = CAR_NAMES.MakeId AND CARS_DATA.Year = (SELECT MIN(Year) FROM CARS_DATA)
SELECT DISTINCT model FROM CARS_DATA WHERE year > 1980;
SELECT c.Continent, COUNT(*) FROM COUNTRIES c, CONTINENTS ct WHERE c.Continent = ct.Continent AND c.CountryId IN (SELECT Country FROM car_makers) GROUP BY c.Continent
SELECT CountryName FROM COUNTRIES WHERE CountryId IN (SELECT Country FROM CAR_MAKERS GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1)
SELECT count(*) ,  T2.fullname FROM model_list AS T1 JOIN car_makers AS T2 ON T1.maker  =  T2.id GROUP BY T2.fullname
SELECT COUNT(DISTINCT(Model)), Maker, Id, FullName FROM CAR_MAKERS INNER JOIN MODEL_LIST ON CAR_MAKERS.id = MODEL_LIST.Maker GROUP BY Maker, Id, FullName;
SELECT avg(Accelerate) FROM CARS_DATA WHERE MakeId = (SELECT MakeId FROM CAR_NAMES WHERE Make = 'amc hornet sportabout (sw)')
SELECT count(DISTINCT Country) FROM CAR_MAKERS WHERE Country IN (SELECT CountryId FROM COUNTRIES WHERE CountryName = 'France');
SELECT COUNT(*) FROM MODEL_LIST WHERE Maker IN (SELECT Maker FROM CAR_MAKERS WHERE Country = 'USA');
SELECT AVG(mpg) FROM CARS_DATA WHERE Cylinders = '4'
SELECT weight FROM cars_data WHERE cylinders = '8' AND year = '1974' ORDER BY weight ASC LIMIT 1
SELECT Maker, Model FROM MODEL_LIST;
SELECT CountryName, CountryId FROM COUNTRIES WHERE CountryId IN (SELECT Country FROM CAR_MAKERS)
SELECT count(*) FROM CARS_DATA WHERE horsepower > 150;
SELECT AVG(Weight) FROM CARS_DATA WHERE YEAR = '2019';
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryName JOIN CONTINENTS AS T3 ON T2.Continent = T3.ContId WHERE T3.Continent = 'Europe' GROUP BY T2.CountryName HAVING count(*) >= 3
SELECT MAX(CAST(horsepower AS INT)), Make FROM CARS_DATA INNER JOIN CAR_NAMES ON CARS_DATA.Id = CAR_NAMES.MakeId WHERE CARS_DATA.cylinders = '3' GROUP BY Make;
SELECT Model FROM CAR_NAMES WHERE Id IN (SELECT Id FROM CARS_DATA WHERE mpg = (SELECT max(mpg) FROM CARS_DATA))
SELECT model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid ORDER BY mpg LIMIT 1
SELECT AVG(T1.horsepower) FROM CARS_DATA AS T1 WHERE T1.YEAR < 1980
SELECT avg(horsepower) FROM cars_data WHERE year < 1980
SELECT AVG(edispl) FROM CARS_DATA WHERE Id IN (SELECT Id FROM CAR_NAMES WHERE MakeId = 'volvo')
SELECT Cylinders, MAX(Accelerate) FROM CARS_DATA GROUP BY Cylinders
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY COUNT(Model) DESC LIMIT 1;
SELECT count(*) FROM CARS_DATA WHERE Cylinders > 4;
SELECT count(*) FROM CARS_DATA WHERE YEAR = '1980';
SELECT count(*) FROM MODEL_LIST WHERE Maker = 'American Motor Company';
SELECT FullName, Id FROM CAR_MAKERS WHERE Id IN (SELECT Maker FROM MODEL_LIST GROUP BY Maker HAVING COUNT(Maker) > 3);
SELECT DISTINCT Model FROM MODEL_LIST WHERE Maker IN (SELECT Id FROM CAR_MAKERS WHERE FullName = 'General Motors') OR weight > 3500;
SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000;
SELECT max(T1.horsepower) FROM CARS_DATA AS T1 JOIN CARS_DATA AS T2 ON T1.accelerate = T2.accelerate WHERE T1.accelerate = (SELECT max(T3.accelerate) FROM CARS_DATA AS T3)
SELECT CARS_DATA.cylinders FROM CARS_DATA INNER JOIN CAR_NAMES ON CARS_DATA.Id = CAR_NAMES.Id WHERE CAR_NAMES.Model = 'volvo' ORDER BY CARS_DATA.accelerate LIMIT 1;
SELECT COUNT(*) FROM CARS_DATA AS T1 WHERE T1.Accelerate > (SELECT MAX(T2.Horsepower) FROM CARS_DATA AS T2)
SELECT country FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 2);
SELECT count(*) FROM CARS_DATA WHERE Cylinders > 6;
SELECT Model FROM CARS_DATA WHERE Cylinders = '4' ORDER BY horsepower DESC LIMIT 1;
SELECT MakeId, Make FROM CAR_NAMES WHERE MakeId IN (SELECT MakeId FROM CARS_DATA WHERE Horsepower > (SELECT min(Horsepower) FROM CARS_DATA) AND Cylinders NOT IN (SELECT Cylinders FROM CARS_DATA WHERE Horsepower > (SELECT min(Horsepower) FROM CARS_DATA) AND Cylinders NOT IN ('4', '6', '8
SELECT makeid, make FROM car_names WHERE id IN (SELECT id FROM cars_data WHERE horsepower < 4);
SELECT max(mpg) FROM cars_data WHERE cylinders = '8' OR year < '1980';
SELECT T1.model FROM MODEL_LIST AS T1 JOIN CARS_DATA AS T2 ON T1.model = T2.model WHERE T2.weight < 3500 AND T1.maker != 'Ford Motor Company'
SELECT T1.CountryName FROM countries AS T1 LEFT JOIN CAR_MAKERS AS T2 ON T1.CountryName = T2.Country WHERE T2.Country IS NULL
SELECT id ,  maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(model) >= 2) AND id IN (SELECT maker FROM car_makers GROUP BY maker HAVING COUNT(id) <= 3)
SELECT CAR_MAKERS.Id, CAR_MAKERS.Maker FROM CAR_MAKERS INNER JOIN MODEL_LIST ON CAR_MAKERS.Id = MODEL_LIST.Maker WHERE (SELECT count(*) FROM MODEL_LIST WHERE MODEL_LIST.Maker = CAR_MAKERS.Id) >= 2 AND (SELECT count(*) FROM CAR_NAMES WHERE CAR_
SELECT countryId, CountryName FROM Countries WHERE CountryId IN (SELECT Country FROM CAR_MAKERS WHERE Country IN (SELECT Country FROM MODEL_LIST WHERE Model = 'fiat') GROUP BY Country HAVING COUNT(*) > 3)
SELECT countryid ,  countryname FROM countries WHERE (SELECT COUNT(*) FROM car_makers WHERE country = countries.countryid) >  3 OR model_list.model = 'fiat'
SELECT Country FROM AIRLINES WHERE Airline = "JetBlue Airways"
SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'
SELECT Airline, Abbreviation FROM AIRLINES WHERE Country = "USA"
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city = 'Anthony'
SELECT count(*) FROM airlines
SELECT count(*) FROM AIRLINES
SELECT count(*) FROM AIRPORTS
SELECT count(*) FROM Flight
SELECT count(*) FROM FLIGHTS
SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'
SELECT COUNT(*) FROM AIRLINES WHERE Country = 'USA'
SELECT City, Country FROM AIRPORTS WHERE AirportName = 'Alton'
SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'APG'
SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'ATO'
SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'ABERDEEN'
SELECT count(*) FROM FLIGHTS INNER JOIN AIRPORTS ON FLIGHTS.DestAirport = AIRPORTS.AirportCode WHERE AIRPORTS.City = 'Aberdeen'
SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'Ashley' AND SourceAirport = 'Aberdeen'
SELECT count(*) FROM FLIGHTS WHERE Airline = 'JetBlue Airways'
SELECT count(*) FROM FLIGHTS WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT count(*) FROM FLIGHTS WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'Aberdeen' AND Airline = 'United Airlines'
SELECT City FROM AIRPORTS WHERE AirportCode IN (SELECT DestAirport FROM FLIGHTS) GROUP BY City ORDER BY count(*) DESC LIMIT 1
SELECT City FROM AIRPORTS WHERE AirportCode IN (SELECT SourceAirport FROM FLIGHTS GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1)
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T2.DestAirport ORDER BY count(*) DESC LIMIT 1
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T2.DestAirport ORDER BY count(*) ASC LIMIT 1
SELECT Airline FROM FLIGHTS GROUP BY Airline ORDER BY count(*) DESC LIMIT 1
SELECT Abbreviation, Country FROM AIRLINES WHERE Airline = (SELECT Airline FROM FLIGHTS GROUP BY Airline ORDER BY count(*) ASC LIMIT 1)
SELECT Airline FROM AIRLINES WHERE Airline IN (SELECT Airline FROM FLIGHTS WHERE SourceAirport = 'AHD')
SELECT Airline FROM AIRLINES WHERE Airline IN (SELECT Airline FROM FLIGHTS WHERE DestAirport = 'AHD')
SELECT Airline FROM AIRLINES WHERE Airline IN (SELECT Airline FROM FLIGHTS WHERE SourceAirport = 'APG') AND Airline IN (SELECT Airline FROM FLIGHTS WHERE SourceAirport = 'CVO')
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' AND T2.SourceAirport != 'APG'
SELECT T1.Airline FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.Airline GROUP BY T1.Airline HAVING count(*) >= 10
SELECT Airline FROM FLIGHTS, AIRLINES WHERE AIRLINES.uid = FLIGHTS.Airline GROUP BY Airline HAVING count(*) < 200
SELECT FlightNo FROM FLIGHTS WHERE Airline = "United Airlines"
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'
SELECT FLIGHTS.FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'
SELECT FLIGHTS.FlightNo FROM FLIGHTS JOIN AIRPORTS ON FLIGHTS.SourceAirport = AIRPORTS.AirportCode WHERE AIRPORTS.City = "Aberdeen"
SELECT FlightNo FROM FLIGHTS WHERE DestAirport IN (SELECT AirportCode FROM AIRPORTS WHERE City = "Aberdeen")
SELECT count(*) FROM Flights WHERE DestAirport IN (SELECT AirportCode FROM Airports WHERE city IN ('Aberdeen', 'Abilene'))
SELECT AirportName FROM Airports WHERE AirportName NOT IN (SELECT AirportName FROM Flights)
SELECT count(*) FROM Employee
SELECT count(*) FROM Employee
SELECT T1.name FROM employee AS T1 ORDER BY T1.age
SELECT city, COUNT(*) FROM employee GROUP BY city
SELECT city FROM employee WHERE age > 30 GROUP BY city HAVING COUNT(*) > 1
SELECT t1.LOCATION ,  count(*) FROM shop AS t1 GROUP BY t1.LOCATION
SELECT t1.manager_name, t2.district FROM shop AS t1 JOIN district AS t2 ON t1.district  =  t2.district WHERE number_products  =  (SELECT number_products FROM shop ORDER BY number_products DESC LIMIT 1)
SELECT min(t1.Number_products) ,  max(t1.Number_products) FROM shop AS t1
SELECT name, LOCATION, district FROM shop ORDER BY number_products DESC
SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID ORDER BY COUNT(T2.Employee_ID) DESC LIMIT 1
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT name FROM shop WHERE shop_id IN (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY count(shop_id) DESC LIMIT 1);
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
SELECT T1.name ,  COUNT(*) FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.name
SELECT sum(bonus) FROM evaluation
SELECT * FROM hiring
SELECT district FROM shop WHERE Number_products  <  3000  AND  Number_products  >  10000
SELECT count(DISTINCT LOCATION) FROM shop
SELECT count(*) FROM Documents
SELECT document_id ,  document_name ,  document_description FROM Documents
SELECT Documents.document_name, Documents.template_id FROM Documents WHERE Documents.document_description LIKE '%w%';
SELECT document_id, template_id, Document_Description FROM documents WHERE document_name = "Robbin CV"
SELECT count(DISTINCT template_id) FROM Documents
SELECT count(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')
SELECT template_id ,  COUNT(template_id) FROM Documents GROUP BY template_id
SELECT template_id, Template_Type_Code FROM Documents INNER JOIN Templates ON Documents.template_id = Templates.template_id GROUP BY template_id, Template_Type_Code ORDER BY count(*) DESC LIMIT 1
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >=  2
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
SELECT count(*) FROM Templates
SELECT template_id ,  version_number ,  template_type_code FROM Templates
SELECT DISTINCT template_type_code FROM Templates
SELECT template_id FROM Templates WHERE template_type_code IN ('PP', 'PPT')
SELECT count(*) FROM Templates WHERE template_type_code = 'CV'
SELECT version_number, template_type_code FROM Templates WHERE version_number > 5;
SELECT template_type_code ,  COUNT(template_type_code) FROM Templates GROUP BY template_type_code
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
SELECT MIN(Version_Number), template_type_code FROM Templates GROUP BY template_type_code ORDER BY Version_Number ASC LIMIT 1
SELECT template_type_code FROM Templates WHERE template_id IN (SELECT template_id FROM Documents WHERE document_name = "Data base")
SELECT document_name FROM Documents WHERE template_id IN (SELECT template_id FROM Templates WHERE template_type_code = "BK")
SELECT template_type_code ,  count(*) FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id GROUP BY template_type_code
SELECT template_type_code FROM Templates INNER JOIN Documents ON Templates.template_id = Documents.template_id GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
SELECT template_type_code FROM Templates WHERE template_type_code NOT IN (SELECT template_id FROM Documents)
SELECT template_type_code ,  template_type_description FROM Ref_template_types
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
SELECT DISTINCT template_type_description FROM Ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM Templates WHERE template_ID IN (SELECT template_ID FROM Documents));
SELECT template_id FROM Templates WHERE template_type_code IN (SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Presentation')
SELECT count(*) FROM Paragraphs
SELECT count(*) FROM Paragraphs WHERE document_ID IN (SELECT document_ID FROM Documents WHERE document_name = 'Summer Show')
SELECT other_details, paragraph_text FROM paragraphs WHERE paragraph_text LIKE '%Korea %'
SELECT paragraph_id ,  paragraph_text FROM Paragraphs WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Welcome to NY')
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'
SELECT document_id ,  COUNT(document_id) FROM Paragraphs GROUP BY document_id ORDER BY document_id
SELECT document_id ,  document_name ,  COUNT(document_id) AS paragraph_count FROM Documents LEFT JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY document_id
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING COUNT(*) >= 2
SELECT t1.document_id, t1.document_name FROM Documents AS t1 JOIN Paragraphs AS t2 ON t1.document_id = t2.document_id GROUP BY t1.document_id ORDER BY count(*) DESC LIMIT 1
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
SELECT Paragraphs.document_id FROM Paragraphs WHERE Paragraphs.paragraph_count BETWEEN 1 AND 2;
SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' OR paragraph_text = 'Ireland'
SELECT count(*) FROM teacher
SELECT Name FROM teacher ORDER BY Age
SELECT Age, Hometown FROM teacher
SELECT DISTINCT name FROM teacher WHERE hometown NOT LIKE '% Little Lever Urban District %'
SELECT Name FROM  teacher WHERE Age  =  32 OR Age  =  33
SELECT Hometown FROM teacher WHERE Age = (SELECT min(Age) FROM teacher)
SELECT Hometown ,  count(*) FROM teacher GROUP BY Hometown
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY count(*) DESC
SELECT DISTINCT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2
SELECT DISTINCT teacher.Name, course.Course FROM course_arrange, teacher, course WHERE course_arrange.Course_ID = course.Course_ID AND teacher.Teacher_ID = course_arrange.Teacher_ID
SELECT t.Name, c.Course FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name
SELECT T1.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID WHERE T2.Course  =  'Math'
SELECT T1.Name, count(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING count(*)  >  1
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
SELECT COUNT(*) FROM visitor WHERE age  <  30
SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
SELECT avg(age) FROM visitor WHERE Level_of_membership <= '4'
SELECT name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age
SELECT T1.museum_id, T1.name FROM museum AS T1 JOIN (SELECT museum_id, MAX(num_of_staff) AS max_num_of_staff FROM museum GROUP BY museum_id) AS T2 ON T1.museum_id  =  T2.museum_id WHERE T1.num_of_staff  =  T2.max_num_of_staff
SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
SELECT T1.Open_Year ,  T1.Num_of_Staff FROM museum AS T1 WHERE T1.name = 'Plaza Museum'
SELECT T1.name FROM museum AS T1 WHERE T1.num_of_staff > (SELECT MIN(T2.num_of_staff) FROM museum AS T2 WHERE T2.open_year > 2010)
SELECT T1.id ,  T1.name ,  T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id GROUP BY T2.visitor_id HAVING count(*)  >=  2
SELECT T1.id, T1.name, T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id ORDER BY T2.Total_spent DESC LIMIT 1
SELECT T1.Museum_ID, T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID GROUP BY T1.Museum_ID, T1.name ORDER BY COUNT(T2.Museum_ID) DESC LIMIT 1
SELECT T1.name FROM visit AS T1 JOIN museum AS T2 ON T1.museum_id  =  T2.museum_id WHERE T1.name  IS NULL
SELECT name ,  age FROM visitor WHERE id = (SELECT visitor_id FROM visit GROUP BY visitor_id ORDER BY num_of_ticket DESC LIMIT 1)
SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
SELECT SUM(Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_id  =  T2.id WHERE T2.Level_of_membership  =  '1'
SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id JOIN museum AS T3 ON T2.Museum_ID  =  T3.Museum_ID WHERE T3.open_year  <  2009 AND T3.open_year  >  2011
SELECT count(*) FROM visitor WHERE id NOT IN ( SELECT visitor_id FROM visit WHERE Museum_ID IN ( SELECT Museum_ID FROM museum WHERE open_year > 2010 ) )
SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008
SELECT COUNT(*) FROM players
SELECT count(*) FROM player
SELECT count(*) FROM matches
SELECT first_name ,  birth_date FROM players AS T1 WHERE T1.country_code  =  'USA'
SELECT AVG(loser_age), AVG(winner_age) FROM matches
SELECT avg(T1.winner_rank) FROM matches AS T1
SELECT max(loser_rank) FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches WHERE (SELECT count(*) FROM matches WHERE tourney_name = matches.tourney_name) > 10
SELECT T1.winner_name FROM matches AS T1 JOIN matches AS T2 ON T1.winner_name  =  T2.winner_name WHERE T1.YEAR  =  '2013' AND T2.YEAR  =  '2016';
SELECT COUNT(*) FROM matches WHERE YEAR IN ('2013', '2016')
SELECT country_code, first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')
SELECT first_name, country_code FROM players ORDER BY birth_date DESC LIMIT 1
SELECT DISTINCT T1.first_name ,  T1.last_name FROM players AS T1 ORDER BY birth_date ASC
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date
SELECT T1.first_name ,  T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name ,  T1.country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT max(count(*)) ,  YEAR FROM matches GROUP BY YEAR
SELECT T1.winner_name ,  T1.winner_rank_points FROM matches AS T1 GROUP BY T1.winner_name ORDER BY count(T1.winner_name) DESC LIMIT 1
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT first_name, avg(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
SELECT first_name, sum(ranking_points) FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY first_name
SELECT COUNT(*) FROM players AS T1 JOIN country AS T2 ON T1.country_code = T2.Country_id
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50
SELECT ranking_date ,  SUM(tours) FROM rankings GROUP BY ranking_date
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3
SELECT T1.winner_name FROM matches AS T1 JOIN matches AS T2 ON T1.winner_name  =  T2.winner_name WHERE T1.tourney_name  =  'WTA Championships' AND T1.winner_hand  =  'left' AND T2.tourney_name  =  'WTA Championships'
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id GROUP BY T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
SELECT hand ,  COUNT(*) FROM players GROUP BY hand
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage FROM ship ORDER BY name DESC
SELECT T1.name ,  T1.date ,  T2.result FROM battle AS T1 JOIN battle_result AS T2 ON T1.name  =  T2.name
SELECT max(killed), min(killed) FROM death
SELECT avg(injured) FROM death
SELECT killed, injured FROM death WHERE caused_by_ship_id = 't'
SELECT T1.name, T1.RESULT FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril'
SELECT id ,  name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig')
SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE lost_in_battle IN (SELECT caused_by_ship_id FROM death WHERE killed > 10))
SELECT ship_id, name FROM ship WHERE ship_id IN (SELECT ship_id FROM death GROUP BY ship_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = "Kaloyan" AND latin_commander = "Baldwin I"
SELECT count(*) ,  RESULT FROM battle GROUP BY RESULT
SELECT count(*) FROM ship WHERE lost_in_battle = 'false' AND tonnage = '225'
SELECT t1.name, t2.date FROM ship AS t1 JOIN battle AS t2 ON t1.lost_in_battle  =  t2.id WHERE t1.name  =  'Lettice' OR t1.name  =  'HMS Atalanta'
SELECT T1.name ,  T1.result ,  T2.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T1.location  =  'English Channel'
SELECT note FROM death WHERE note LIKE '%East%'
SELECT T1.line_1, T1.line_2 FROM addresses AS T1
SELECT count(*) FROM COURSES
SELECT count(*) FROM Courses
SELECT course_description FROM Courses WHERE course_name = 'math'
SELECT T1.zip_postcode FROM Addresses AS T1 WHERE T1.city  =  "Port Chelsea"
SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
SELECT T2.department_name ,  T1.department_id FROM degree_programs AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
SELECT count(DISTINCT department_id) FROM Degree_Programs
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT count(DISTINCT department_id) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Engineering')
SELECT t1.section_name, t1.section_description FROM Sections AS t1
SELECT course_name, course_id FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING count(*) <= 2)
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_name , T1.semester_id ORDER BY COUNT(*) DESC
SELECT department_description FROM Departments WHERE department_name LIKE "%the computer%"
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  =  2
SELECT first_name , middle_name , last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id = 1);
SELECT T1.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  COUNT(*) AS enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY enrollments DESC LIMIT 1
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'North Carolina' EXCEPT SELECT T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id
SELECT T1.transcript_date, T2.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id WHERE (SELECT COUNT(*) FROM Transcript_Contents AS T3 WHERE T3.transcript_id = T2.transcript_id) >= 2
SELECT cell_mobile_number FROM Students WHERE first_name  =  "Timmothy" AND last_name  =  "Ward"
SELECT cell_mobile_number FROM students WHERE first_name = "Timmothy" AND last_name = "Ward"
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students)
SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students)
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
SELECT AVG(T1.transcript_date) FROM Transcripts AS T1
SELECT transcript_date, other_details FROM Transcripts WHERE transcript_date = '2019-01-01'
SELECT count(*) FROM Transcripts WHERE Id = "released";
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT T1.student_course_id ,  COUNT(*) FROM Transcript_Contents AS T1 GROUP BY T1.student_course_id
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Transcript_Contents GROUP BY transcript_id))
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_program_id IN ('Master', 'Bachelor')) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2
SELECT COUNT(DISTINCT current_address_id) FROM Students
SELECT * FROM Students ORDER BY other_student_details DESC
SELECT t1.section_description FROM Sections AS t1 WHERE t1.section_name = 'h'
SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'
SELECT title FROM Cartoon ORDER BY title
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti"
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel
SELECT Content FROM TV_Channel WHERE series_name  =  'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'English'
SELECT LANGUAGE, COUNT(LANGUAGE) FROM TV_Channel GROUP BY LANGUAGE ORDER BY COUNT(LANGUAGE) ASC
SELECT LANGUAGE, COUNT(LANGUAGE) FROM TV_Channel GROUP BY LANGUAGE
SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!')
SELECT t1.Title FROM Cartoon AS t1 JOIN TV_Channel AS t2 ON t1.Channel  =  t2.id WHERE t2.series_name  =  'Sky Radio'
SELECT Episode FROM TV_series ORDER BY rating DESC
SELECT T1.Episode ,  T1.Rating FROM TV_series AS T1 ORDER BY T1.Rating DESC LIMIT 3
SELECT min(SHARE) ,  max(SHARE) FROM TV_series
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT t1.series_name FROM TV_series AS t1 JOIN TV_Channel AS t2 ON t1.Channel  =  t2.id WHERE t1.Episode  =  'A Love of a Lifetime'
SELECT t1.Episode FROM TV_series AS t1 JOIN TV_Channel AS t2 ON t1.Channel = t2.id WHERE t2.series_name = 'Sky Radio'
SELECT directed_by ,  count(*) FROM cartoon GROUP BY directed_by
SELECT t1.production_code, t1.channel FROM cartoon AS t1 JOIN (SELECT t2.production_code, t2.channel, max(t2.original_air_date) AS max_date FROM cartoon AS t2 GROUP BY t2.production_code, t2.channel) AS t3 ON t1.production_code = t3.production_code AND t1.channel = t3.channel AND t1.
SELECT package_option, series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by  =  "Todd Casey"
SELECT country FROM TV_Channel WHERE country NOT IN (SELECT country FROM TV_Channel WHERE id IN (SELECT Channel FROM cartoon WHERE written_by = 'Todd Casey'))
SELECT series_name, country FROM TV_Channel WHERE id IN (SELECT Channel FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Michael Chang')
SELECT Pixel_aspect_ratio_PAR, country FROM tv_channel WHERE LANGUAGE != 'English'
SELECT id FROM tv_channel WHERE country IN (SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*) > 2)
SELECT id FROM TV_Channel WHERE directed_by != 'Ben Jones'
SELECT package_option FROM cartoon WHERE directed_by != 'Ben Jones'
SELECT count(*) FROM poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT Final_Table_Made ,  max(Best_Finish) FROM poker_player GROUP BY Final_Table_Made
SELECT avg(T1.Earnings) FROM poker_player AS T1
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
SELECT Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Earnings > 300000);
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Final_Table_Made IN (SELECT Final_Table_Made FROM poker_player ORDER BY Final_Table_Made ASC)) ORDER BY Final_Table_Made ASC
SELECT T1.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings = (SELECT MIN(T3.Earnings) FROM poker_player AS T3 JOIN people AS T4 ON T3.People_ID = T4.People_ID);
SELECT Money_Rank FROM poker_player WHERE People_ID = (SELECT People_ID FROM people WHERE Height = (SELECT max(Height) FROM people))
SELECT avg(Earnings) FROM poker_player WHERE Height > 200
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player ORDER BY Earnings DESC);
SELECT nationality, count(*) FROM people GROUP BY nationality
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
SELECT Name, Birth_Date FROM people ORDER BY Name
SELECT Name FROM people WHERE Nationality  !=  "Russia"
SELECT DISTINCT T1.Name FROM people AS T1 LEFT JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.People_ID IS NULL
SELECT count(DISTINCT nationality) FROM people
SELECT COUNT(*) FROM area_code_state
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC
SELECT vote_id ,  phone_number ,  state FROM votes
SELECT max(area_code) ,  min(area_code) FROM area_code_state
SELECT created FROM votes WHERE state = 'CA' ORDER BY created DESC LIMIT 1
SELECT T1.contestant_name FROM contestants AS T1 WHERE T1.contestant_name != 'Jessie Alloway'
SELECT DISTINCT state ,  created FROM votes
SELECT T2.contestant_number, T2.contestant_name FROM votes AS T1 JOIN contestants AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE votes  >=  2
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes) ORDER BY contestant_number ASC LIMIT 1
SELECT count(*) FROM votes WHERE state IN ('NY', 'CA')
SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
SELECT area_code FROM area_code_state WHERE area_code IN (SELECT state FROM votes GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1)
SELECT created, state, phone_number FROM votes WHERE contestant_number = 'Tabatha Gehling'
SELECT area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.area_code  =  T2.state WHERE T2.contestant_number  =  "Tabatha Gehling" AND T2.contestant_number  =  "Kelly Clauss"
SELECT DISTINCT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
SELECT Name FROM country WHERE IndepYear > 1950
SELECT count(*) FROM country WHERE GovernmentForm = 'republic'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT Continent FROM country WHERE Name = "Anguilla"
SELECT T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.Name  =  'Kabul'
SELECT Language FROM countrylanguage WHERE CountryCode = 'AW' GROUP BY Language ORDER BY count(*) DESC LIMIT 1
SELECT Population, LifeExpectancy FROM country WHERE Name = "Brazil"
SELECT Region, Population FROM country WHERE Name = "Angola"
SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1
SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT Population FROM city WHERE District = 'Gelderland'
SELECT avg(GNP), sum(population) FROM country WHERE GovernmentForm = 'US Territory'
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT count(*) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Name = "Aruba")
SELECT count(DISTINCT T1.Name) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Code  =  "AFG"
SELECT country.Name FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.Name HAVING count(*) = (SELECT max(count(*)) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.Name)
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(T2.CountryCode) DESC LIMIT 1
SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.Language  =  "Dutch"
SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = "English") AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = "French")
SELECT country.Name FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = "English" AND countrylanguage.Language = "French"
SELECT count(distinct continent) FROM country WHERE countrylanguage.Language = 'Chinese'
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.Language  =  "English" OR T1.Language  =  "Dutch"
SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language  =  "English" OR T2.language  =  "Dutch"
SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY count(*) DESC LIMIT 1
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm = "Republic") GROUP BY Language HAVING COUNT(*) = 1
SELECT Name FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') ORDER BY Population DESC LIMIT 1
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'Yes')
SELECT count(*) FROM country AS T1 LEFT JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IS NULL
SELECT T1.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix"
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Year < 1930)
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT Name FROM country WHERE Continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE Continent = 'Asia')
SELECT Name FROM country WHERE Continent = 'Africa' AND population < (SELECT population FROM country WHERE Continent = 'Asia')
SELECT Name FROM country WHERE Continent = 'Asia' AND population > (SELECT population FROM country WHERE Continent = 'Africa' ORDER BY population DESC LIMIT 1)
SELECT Name FROM country WHERE Continent = 'Asia' AND population > (SELECT population FROM country WHERE Continent = 'Africa')
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
SELECT Code FROM countrylanguage WHERE LANGUAGE != "English" AND GovernmentForm != "Republic"
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = "Europe" AND countrylanguage.Language != "English"
SELECT DISTINCT T1.name FROM city AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code JOIN countrylanguage AS T3 ON T2.code  =  T3.countrycode WHERE T3.language  =  'Chinese' AND T2.continent  =  'Asia' GROUP BY T1.name HAVING count(*)  =  1
SELECT DISTINCT city.Name FROM city, country, countrylanguage WHERE city.CountryCode = country.Code AND country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'Chinese' AND country.Continent = 'Asia'
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1
SELECT population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
SELECT country.Name, COUNT(*) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.Name HAVING COUNT(*) >= 3
SELECT District, count(*) FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District
SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm
SELECT avg(LifeExpectancy) ,  sum(Population) ,  Continent FROM country WHERE avg(LifeExpectancy) < 72 GROUP BY Continent
SELECT T1.Name, T1.SurfaceArea FROM country AS T1 ORDER BY T1.SurfaceArea DESC LIMIT 5
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT count(*) FROM country WHERE continent = 'Asia'
SELECT Name FROM country WHERE continent = 'Europe' AND Population = 80000
SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000
SELECT name FROM city WHERE Population  >  160000 AND Population  <  900000
SELECT name FROM city WHERE population  >  160000 AND population  <  900000
SELECT LANGUAGE, count(*) FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
SELECT LANGUAGE, MAX(PERCENTAGE) FROM COUNTRYLANGUAGE GROUP BY LANGUAGE
SELECT COUNT(*) FROM countrylanguage WHERE LANGUAGE = 'Spanish' AND PERCENTAGE = (SELECT MAX(PERCENTAGE) FROM countrylanguage)
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'Spanish' ORDER BY Percentage DESC LIMIT 1
SELECT count(*) FROM conductor
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor WHERE Nationality != "USA"
SELECT T1.Record_Company FROM orchestra AS T1 ORDER BY T1.Year_of_Founded DESC
SELECT avg(Attendance) FROM SHOW
SELECT max(SHARE), min(SHARE) FROM performance WHERE TYPE != "Live final"
SELECT count(DISTINCT nationality) FROM conductor
SELECT T1.Name FROM conductor AS T1 ORDER BY T1.Year_of_Work
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT T2.Name ,  T3.Orchestra FROM conductor_orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID JOIN orchestra AS T3 ON T1.Orchestra_ID  =  T3.Orchestra_ID
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(T2.Conductor_ID) > 1
SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID ORDER BY COUNT(T1.Conductor_ID) DESC LIMIT 1
SELECT T1.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T2.Name  >  '2008'
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
SELECT T1.Major_Record_Format , COUNT(T1.Major_Record_Format) FROM orchestra AS T1 GROUP BY T1.Major_Record_Format ORDER BY COUNT(T1.Major_Record_Format) ASC
SELECT T1.Record_Company ,  count(*) FROM orchestra AS T1 JOIN orchestra AS T2 ON T1.Record_Company  =  T2.Record_Company GROUP BY T2.Record_Company ORDER BY count(*) DESC LIMIT 1
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 AND Year_of_Founded > 2003
SELECT count(DISTINCT T1.Major_Record_Format) FROM orchestra AS T1 WHERE T1.Major_Record_Format  =  "CD" OR T1.Major_Record_Format  =  "DVD"
SELECT T1.Year FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T1.Year HAVING COUNT(T2.Performance_ID)  >  1
SELECT count(*) FROM Highschooler
SELECT name ,  grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT DISTINCT grade FROM Highschooler WHERE name = 'Kyle'
SELECT name FROM Highschooler WHERE grade = '10'
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT count(*) FROM Highschooler WHERE grade = '9' OR grade = '10'
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*)  >=  4
SELECT T1.student_id, count(*) FROM Friend AS T1 JOIN Friend AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id
SELECT name, COUNT(student_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.id = Friend.student_id GROUP BY name
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id WHERE T2.student_id IN (SELECT T1.id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id HAVING COUNT(T2.student_id)  =  (SELECT MAX(COUNT(T
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name HAVING COUNT(T2.student_id) >= 3
SELECT name FROM Highschooler WHERE id IN (SELECT friend_id FROM Friend WHERE student_id = 'Kyle')
SELECT count(T2.student_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id WHERE T1.name  =  'Kyle'
SELECT id FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)
SELECT T1.name FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.id  =  T2.student_id WHERE T1.id  NOT IN (SELECT T3.student_id FROM Friend AS T3)
SELECT student_id FROM Likes WHERE student_id IN (SELECT student_id FROM Friend) AND student_id IN (SELECT liked_id FROM Likes)
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id  =  T2.student_id JOIN Friend AS T3 ON T1.id  =  T3.student_id WHERE T1.name  =  T2.liked_id AND T1.name  =  T3.liked_id
SELECT student_id, count(*) FROM Likes GROUP BY student_id
SELECT name, COUNT(student_id) FROM Highschooler LEFT JOIN Likes ON Highschooler.id = Likes.student_id GROUP BY name
SELECT name FROM Highschooler WHERE id IN (SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT name FROM Highschooler WHERE id IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(student_id) >= 2)
SELECT name FROM Highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2)
SELECT count(T2.student_id) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id  =  T2.student_id WHERE T1.name  =  'Kyle'
SELECT avg(T1.grade) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id
SELECT MIN(grade) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.id  =  T2.student_id WHERE T2.student_id  IS  NULL
SELECT T1.state FROM Owners AS T1 JOIN Professionals AS T2 ON T1.state = T2.state;
SELECT avg(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT professional_id, last_name, cell_number FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.state  =  'Indiana' OR count(*)  >  2 GROUP BY T1.professional_id, T2.last_name, T2.cell_number
SELECT name FROM dogs WHERE cost_of_treatment  >  1000 EXCEPT SELECT T3.name FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id JOIN dogs AS T3 ON T3.dog_id  =  T2.dog_id WHERE T1.name  =  "Jimmy"
SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT first_name FROM Dogs) INTERSECT SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT first_name FROM Dogs)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT T2.owner_id , T2.first_name , T2.last_name ,  count(T1.owner_id) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(T1.owner_id) DESC LIMIT 1;
SELECT professional_id, role, first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY professional_id HAVING COUNT(professional_id) >= 2
SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)
SELECT owner_id, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments GROUP BY dog_id ORDER BY COUNT(*) DESC LIMIT 1))
SELECT treatment_type_description FROM Treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM Treatments WHERE cost = (SELECT MIN(cost) FROM Treatments))
SELECT T1.owner_id ,  T2.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1
SELECT professional_id ,  cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  1
SELECT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.Id  =  T2.Id WHERE T2.cost_of_treatment < (SELECT AVG(T3.cost_of_treatment) FROM Treatments AS T3)
SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id
SELECT cost_of_treatment, treatment_type_description FROM Treatments, treatment_types WHERE Treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT first_name ,  last_name ,  size_code FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT Owners.first_name, Dogs.name FROM Dogs, Owners WHERE Dogs.owner_id = Owners.owner_id
SELECT name, date_of_treatment FROM Dogs, Treatments WHERE Dogs.dog_id = Treatments.dog_id AND Dogs.breed_code = (SELECT breed_code FROM Dogs ORDER BY COUNT(breed_code) ASC LIMIT 1)
SELECT t1.first_name ,  t2.name FROM Dogs AS t1 JOIN Owners AS t2 ON t1.owner_id  =  t2.owner_id WHERE t2.state  =  'Virginia'
SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs ORDER BY age DESC LIMIT 1);
SELECT T1.email_address FROM Professionals AS T1 WHERE T1.state  =  "Hawaii" OR T1.state  =  "Wisconsin"
SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1
SELECT count(*) FROM Treatments WHERE dog_id  =  "dogs"
SELECT count(DISTINCT professional_id) FROM Treatments WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE treatment_type = 'dog')
SELECT T1.role_code , T1.street , T1.city , T1.state FROM professionals AS T1 WHERE T1.city LIKE '%West%'
SELECT t1.first_name ,  t1.last_name ,  t1.email_address FROM Owners AS t1 WHERE t1.state  LIKE  '%North%'
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)
SELECT COUNT(*) FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.professional_id IS NULL
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
SELECT avg(age) FROM Dogs
SELECT age FROM Dogs WHERE age = (SELECT max(age) FROM Dogs)
SELECT charge_type, charge_amount FROM Charges
SELECT MAX(charge_amount) FROM Charges
SELECT T1.email_address ,  T1.cell_number ,  T1.home_phone FROM professionals AS T1
SELECT DISTINCT breed_code, size_code FROM dogs
SELECT T1.first_name, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Birth_Year, Citizenship FROM singer
SELECT Name FROM singer WHERE Citizenship  !=  "France"
SELECT Name FROM singer WHERE Birth_Year = '1948' OR Birth_Year = '1949'
SELECT T1.Name FROM singer AS T1 JOIN singer AS T2 ON T1.Net_Worth_Millions  >  T2.Net_Worth_Millions ORDER BY T1.Net_Worth_Millions DESC LIMIT 1
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
SELECT Citizenship , COUNT(Citizenship) FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC
SELECT citizenship, COUNT(citizenship) FROM singer GROUP BY citizenship ORDER BY COUNT(citizenship) DESC LIMIT 1
SELECT Citizenship , MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT T1.Title ,  T2.Name FROM SONG AS T1 JOIN SINGER AS T2 ON T1.Singer_ID  =  T2.Singer_ID
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING count(*) > 1
SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID
SELECT Citizenship FROM singer WHERE Birth_Year > 1945 AND Birth_Year < 1955
SELECT count(*) FROM Other_Available_Features
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon')
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties)
SELECT property_name FROM Properties WHERE property_type_code IN ('H', 'A') AND room_count > 1
