SELECT COUNT(*) FROM singer
SELECT name, country, age FROM singer ORDER BY age
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'
SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)
SELECT DISTINCT country FROM singer WHERE age > 20
SELECT country, COUNT(*) FROM singer GROUP BY country
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)
SELECT LOCATION, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
SELECT MAX(capacity), AVG(average) FROM stadium
SELECT AVG(capacity), MAX(capacity) FROM stadium
SELECT name, capacity, average FROM stadium ORDER BY average DESC LIMIT 1
SELECT COUNT(*) FROM concert WHERE YEAR IN ('2014', '2015')
SELECT name, COUNT(stadium_id) FROM stadium GROUP BY name;
SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year >= '2014');
SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT YEAR FROM concert ORDER BY YEAR DESC LIMIT 1
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
SELECT country FROM singer WHERE age > 40 AND age < 30
SELECT name FROM stadium WHERE name NOT IN (SELECT name FROM stadium WHERE name IN (SELECT name FROM stadium WHERE name IN (SELECT name FROM stadium WHERE name IN (SELECT name FROM stadium WHERE name IN (SELECT name FROM stadium WHERE name IN (SELECT name FROM stadium WHERE name IN (SELECT name FROM stadium WHERE name IN (SELECT name FROM stadium WHERE name IN (SELECT name FROM stadium WHERE name IN (SELECT name FROM stadium WHERE name IN (
SELECT concert_name, theme, COUNT(concert_id) FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY concert_name, theme
SELECT concert_name, theme, COUNT(singer_in_concert.concert_id) FROM singer_in_concert INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY concert_name, theme
SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM singer_in_concert GROUP BY singer_id HAVING COUNT(*) > 1)
SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM singer_in_concert WHERE concert_id IN (SELECT concert_id FROM concert WHERE year = '2014'));
SELECT name, country FROM singer WHERE song_name LIKE '%Hey%'
SELECT name, location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE Year IN ('2014', '2015'));
SELECT stadium_id FROM concert WHERE capacity = (SELECT MAX(capacity) FROM stadium)
SELECT * FROM pets WHERE weight > 10
SELECT MIN(weight) FROM pets WHERE pet_age = 'young'
SELECT MAX(weight), petType FROM pets GROUP BY petType
SELECT stuid FROM student WHERE age > 20
SELECT COUNT(DISTINCT stuid) FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.sex = 'F' AND pets.petid = has_pet.petid AND pets.pettype = 'dog';
SELECT DISTINCT pettype FROM pets
SELECT Fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype IN ('cat', 'dog')));
SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat') AND petid IN (SELECT petid FROM pets WHERE pettype = 'dog'));
SELECT Fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype IN ('cat', 'dog')));
SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'));
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'));
SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog') AND petid NOT IN (SELECT petid FROM pets WHERE pettype = 'cat'));
SELECT pettype, weight FROM pets WHERE pet_age = 'youngest'
SELECT petid, weight FROM pets WHERE pet_age > 1
SELECT pettype, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY pettype
SELECT pettype, AVG(weight) FROM pets GROUP BY pettype
SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet);
SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE Lname = 'Smith');
SELECT stuid, COUNT(stuid) FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY stuid;
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1);
SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat' AND pet_age = '3'));
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT COUNT(*) FROM CONTINENTS
SELECT ContId, Continent, COUNT(Continent) FROM COUNTRIES, CONTINENTS WHERE COUNTRIES.Continent = CONTINENTS.Continent GROUP BY ContId, Continent
SELECT COUNT(*) FROM COUNTRIES
SELECT FullName, Id, COUNT(Maker) FROM MODEL_LIST, CAR_MAKERS WHERE CAR_MAKERS.FullName = MODEL_LIST.Maker GROUP BY FullName, Id
SELECT MIN(CAST(horsepower AS INT)) FROM CARS_DATA
SELECT model FROM CARS_DATA WHERE Weight < (SELECT AVG(Weight) FROM CARS_DATA);
SELECT Maker FROM MODEL_LIST WHERE model IN (SELECT model FROM CAR_NAMES WHERE MakeId IN (SELECT Id FROM CAR_MAKERS WHERE Maker = 'Ford'));
SELECT Make, Year FROM CARS_DATA INNER JOIN CAR_NAMES ON CARS_DATA.Id = CAR_NAMES.MakeId WHERE Year = (SELECT MIN(Year) FROM CARS_DATA)
SELECT DISTINCT model FROM CARS_DATA WHERE year > 1980
SELECT COUNT(DISTINCT CountryId), Continent FROM COUNTRIES, CONTINENTS WHERE COUNTRIES.Continent = CONTINENTS.Continent GROUP BY Continent;
SELECT CountryName FROM COUNTRIES WHERE CountryId IN (SELECT Country FROM CAR_MAKERS GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1)
SELECT COUNT(model_list.maker), car_makers.fullname FROM model_list, car_makers WHERE model_list.maker = car_makers.id GROUP BY car_makers.fullname
SELECT Maker, COUNT(Model) AS NumberOfModels, Id, FullName FROM CAR_MAKERS JOIN MODEL_LIST ON CAR_MAKERS.id = MODEL_LIST.Maker GROUP BY Maker, Id, FullName
SELECT Accelerate FROM CARS_DATA WHERE MakeId = 'sw'
SELECT COUNT(DISTINCT Country) FROM CAR_MAKERS WHERE Country = 'France';
SELECT COUNT(*) FROM MODEL_LIST WHERE Maker IN (SELECT Maker FROM CAR_MAKERS WHERE Country = 'USA');
SELECT AVG(mpg) FROM CARS_DATA WHERE Cylinders = '4'
SELECT MIN(weight) FROM cars_data WHERE cylinders = '8' AND year = '1974'
SELECT Maker, Model FROM MODEL_LIST
SELECT CountryName, CountryId FROM COUNTRIES WHERE CountryId IN (SELECT Country FROM CAR_MAKERS)
SELECT * FROM CARS_DATA WHERE horsepower > 150
SELECT YEAR, AVG(Weight) FROM CARS_DATA GROUP BY YEAR
SELECT CountryName FROM COUNTRIES WHERE CountryId IN (SELECT Country FROM CAR_MAKERS GROUP BY Country HAVING COUNT(*) >= 3);
SELECT MAX(horsepower), Make FROM CARS_DATA WHERE cylinders = '3' GROUP BY Make
SELECT Model FROM CAR_NAMES WHERE MakeId = 'Honda' ORDER BY mpg DESC LIMIT 1
SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)
SELECT AVG(horsepower) FROM CARS_DATA WHERE YEAR < 1980
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980
SELECT AVG(edispl) FROM CARS_DATA WHERE MakeId = 'volvo'
SELECT Cylinders, MAX(Accelerate) FROM CARS_DATA GROUP BY Cylinders
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1
SELECT * FROM CARS_DATA WHERE Cylinders > 4
SELECT COUNT(*) FROM CARS_DATA WHERE YEAR = '1980'
SELECT COUNT(*) FROM MODEL_LIST WHERE Maker = 'American Motor Company';
SELECT FullName, Id FROM CAR_MAKERS WHERE FullName IN (SELECT Maker FROM MODEL_LIST GROUP BY Maker HAVING COUNT(Maker) > 3)
SELECT DISTINCT Model FROM MODEL_LIST WHERE Maker = 'General Motors' OR weight > 3500
SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000
SELECT MAX(horsepower) FROM CARS_DATA WHERE accelerate = 'fast'
SELECT MIN(cylinders) FROM CARS_DATA WHERE accelerate = 'fast'
SELECT * FROM CARS_DATA WHERE Accelerate > (SELECT MAX(Horsepower) FROM CARS_DATA)
SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 2
SELECT * FROM CARS_DATA WHERE Cylinders > 6
SELECT Model FROM CAR_NAMES WHERE MakeId = 'Ford' AND Model = 'Mustang'
SELECT CAR_NAMES.MakeId, CAR_NAMES.Make FROM CAR_NAMES WHERE CAR_NAMES.MakeId IN (SELECT CARS_DATA.Id FROM CARS_DATA WHERE CARS_DATA.Horsepower > (SELECT MIN(CARS_DATA.Horsepower) FROM CARS_DATA) AND CARS_DATA.Cylinders NOT IN ('4', '6',
SELECT makeid, make FROM car_names WHERE makeid IN (SELECT makeid FROM cars_data WHERE horsepower < 4)
SELECT MAX(mpg) FROM cars_data WHERE cylinders = '8' OR year < '1980'
SELECT Model FROM MODEL_LIST WHERE weight < 3500 AND MakeId NOT IN (SELECT Id FROM CAR_MAKERS WHERE FullName = 'Ford Motor Company');
SELECT CountryName FROM countries WHERE CountryName NOT IN (SELECT Country FROM CAR_MAKERS)
SELECT id, maker FROM car_makers WHERE id IN (SELECT DISTINCT maker FROM model_list GROUP BY maker HAVING COUNT(model) >= 2 AND COUNT(model) <= 3)
SELECT Maker FROM CAR_MAKERS WHERE Id IN (SELECT Maker FROM MODEL_LIST GROUP BY Maker HAVING COUNT(model) >= 2) AND Maker IN (SELECT Maker FROM CAR_NAMES GROUP BY Maker HAVING COUNT(model) >= 3)
SELECT CountryName FROM Countries WHERE CountryId IN (SELECT Country FROM CAR_MAKERS WHERE Country IN (SELECT Country FROM Countries WHERE CountryId IN (SELECT Country FROM CAR_MAKERS WHERE Country IN (SELECT Country FROM Countries WHERE CountryId IN (SELECT Country FROM CAR_MAKERS WHERE Country IN (SELECT Country FROM Countries WHERE CountryId IN (SELECT Country FROM CAR_MAKERS WHERE Country IN (SELECT Country FROM Countries WHERE Country
SELECT countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers WHERE country IN (SELECT country FROM countries WHERE countryname LIKE '%fiat%') OR (SELECT COUNT(*) FROM car_makers WHERE country = countries.countryid) > 3)
SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'
SELECT Airline, Abbreviation FROM AIRLINES WHERE Country = 'USA'
SELECT AirportCode, AirportName FROM AIRPORTS WHERE city = 'Anthony'
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM AIRLINES
SELECT COUNT(*) FROM AIRPORTS
SELECT COUNT(*) FROM Flight
SELECT COUNT(*) FROM FLIGHTS
SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'
SELECT COUNT(*) FROM AIRLINES WHERE Country = 'USA'
SELECT City, Country FROM AIRPORTS WHERE AirportName = 'Alton'
SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'
SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'
SELECT COUNT(*) FROM FLIGHTS WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM FLIGHTS WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM FLIGHTS WHERE SourceAirport = 'ABERDEEN';
SELECT COUNT(*) FROM FLIGHTS WHERE DestAirport = 'ABERDEEN';
SELECT COUNT(*) FROM FLIGHTS WHERE DestAirport = 'Ashley' AND SourceAirport = 'Aberdeen';
SELECT COUNT(*) FROM FLIGHTS WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM FLIGHTS WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM FLIGHTS WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM FLIGHTS WHERE DestAirport = 'Aberdeen'
SELECT City FROM AIRPORTS WHERE AirportCode IN (SELECT DestAirport FROM FLIGHTS GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1)
SELECT City FROM AIRPORTS WHERE AirportCode IN (SELECT SourceAirport FROM FLIGHTS GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1);
SELECT DestAirport FROM FLIGHTS GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1
SELECT DestAirport FROM FLIGHTS GROUP BY DestAirport ORDER BY COUNT(*) LIMIT 1;
SELECT Airline FROM FLIGHTS GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1
SELECT Abbreviation, Country FROM AIRLINES WHERE Airline = (SELECT Airline FROM FLIGHTS GROUP BY Airline ORDER BY COUNT(*) LIMIT 1)
SELECT Airline FROM AIRLINES WHERE Airline IN (SELECT Airline FROM FLIGHTS WHERE SourceAirport = 'AHD');
SELECT Airline FROM AIRLINES WHERE Airline IN (SELECT Airline FROM FLIGHTS WHERE DestAirport = 'AHD');
SELECT Airline FROM AIRLINES WHERE Airline IN (SELECT Airline FROM FLIGHTS WHERE SourceAirport = 'APG') AND Airline IN (SELECT Airline FROM FLIGHTS WHERE SourceAirport = 'CVO');
SELECT Airline FROM AIRLINES WHERE Airline IN (SELECT Airline FROM FLIGHTS WHERE SourceAirport = 'CVO') AND Airline NOT IN (SELECT Airline FROM FLIGHTS WHERE SourceAirport = 'APG')
SELECT Airline FROM FLIGHTS WHERE Airline IN (SELECT Airline FROM AIRLINES WHERE uid IN (SELECT uid FROM AIRLINES GROUP BY uid HAVING COUNT(*) >= 10))
SELECT Airline FROM FLIGHTS WHERE Airline NOT IN (SELECT Airline FROM AIRLINES WHERE uid IN (SELECT uid FROM AIRLINES GROUP BY uid HAVING COUNT(*) > 200));
SELECT FLIGHTNO FROM FLIGHTS WHERE AIRLINE = 'United Airlines';
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'
SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'Aberdeen'
SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'Aberdeen'
SELECT COUNT(*) FROM Flights WHERE DestAirport IN ('ABE', 'ABI');
SELECT AirportName FROM Airports WHERE AirportName NOT IN (SELECT AirportName FROM Flights)
SELECT COUNT(*) FROM Employee
SELECT COUNT(*) FROM employee
SELECT name FROM employee ORDER BY age ASC
SELECT city, COUNT(*) FROM employee GROUP BY city
SELECT city FROM employee WHERE age > 30 GROUP BY city HAVING COUNT(*) > 1
SELECT LOCATION, COUNT(*) FROM shop GROUP BY LOCATION
SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)
SELECT MIN(Number_products), MAX(Number_products) FROM shop
```
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)
SELECT name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID ORDER BY COUNT(*) DESC LIMIT 1)
SELECT name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation WHERE bonus = (SELECT MAX(bonus) FROM evaluation));
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT name FROM shop WHERE shop_id IN (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT name FROM shop WHERE name NOT IN (SELECT DISTINCT name FROM hiring);
SELECT shop.name, COUNT(hiring.shop_id) FROM shop, hiring WHERE shop.shop_id = hiring.shop_id GROUP BY shop.name;
SELECT SUM(bonus) FROM evaluation
SELECT * FROM hiring
SELECT district FROM shop WHERE Number_products < 3000 AND Number_products > 10000
SELECT COUNT(DISTINCT LOCATION) FROM shop
SELECT COUNT(*) FROM Documents
The SQL query that answers the question.
SELECT document_name, template_id FROM Documents WHERE Document_Description LIKE '%w%'
SELECT document_id, template_id, document_description, document_name FROM Documents WHERE document_name = 'Robbin CV'
SELECT COUNT(DISTINCT template_id) FROM Documents
SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT');
```
SELECT template_id, Template_Type_Code FROM Templates WHERE template_id IN (SELECT template_id FROM Documents GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT template_id FROM Documents GROUP BY template_id HAVING COUNT(*) > 1
SELECT template_id FROM Templates WHERE template_id NOT IN (SELECT template_id FROM Documents)
1
SELECT template_id, version_number, template_type_code FROM Templates
SELECT DISTINCT template_type_code FROM Templates
SELECT template_id FROM Templates WHERE template_type_code IN ('PP', 'PPT')
SELECT COUNT(*) FROM Templates WHERE template_type_code = 'CV'
SELECT version_number, template_type_code FROM Templates WHERE version_number > 5
```
template_type_code
SELECT template_type_code FROM Templates WHERE template_type_code NOT IN (SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING COUNT(*) > 3)
```
SELECT template_type_code FROM Templates WHERE template_id = (SELECT template_id FROM Documents WHERE document_name = "Data base");
SELECT document_name FROM Documents WHERE template_id IN (SELECT template_id FROM Templates WHERE template_type_code = 'BK');
```
template_type_code
SELECT template_type_code FROM Templates WHERE template_type_code NOT IN (SELECT template_id FROM Documents);
```
SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'
SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'
SELECT DISTINCT template_type_description FROM Ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM Templates WHERE template_ID IN (SELECT template_ID FROM Documents));
SELECT template_id FROM Templates WHERE template_type_code IN (SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Presentation')
SELECT Id FROM Paragraphs
1
SELECT * FROM paragraphs WHERE paragraph_text = 'Korea '
SELECT paragraph_id, paragraph_text FROM Paragraphs WHERE document_id = 'Welcome to NY';
SELECT paragraph_text FROM Paragraphs WHERE document_id = 'Customer reviews';
```
SELECT document_id, document_name, COUNT(paragraph_id) FROM Documents JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY document_id, document_name;
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING COUNT(*) >= 2
SELECT document_name, COUNT(paragraph_id) FROM Paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) DESC LIMIT 1
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1
SELECT document_id FROM Paragraphs
SELECT document_id FROM Paragraphs WHERE paragraph_text LIKE '%Brazil%' AND paragraph_text LIKE '%Ireland%';
SELECT COUNT(*) FROM teacher
SELECT Name FROM teacher ORDER BY Age
SELECT Age, Hometown FROM teacher
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Age = 32 OR Age = 33
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2
SELECT teacher.Name, course.Course FROM course_arrange, teacher, course WHERE course_arrange.Course_ID = course.Course_ID AND teacher.Teacher_ID = course_arrange.Teacher_ID
SELECT t.Name, c.Course FROM teacher t, course c, course_arrange ca WHERE t.Teacher_ID = ca.Teacher_ID AND c.Course_ID = ca.Course_ID ORDER BY t.Name;
SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Course_ID IN (SELECT Course_ID FROM course WHERE Course = 'Math'));
SELECT Name, COUNT(Teacher_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY Name;
SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(*) >= 2)
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange);
SELECT COUNT(*) FROM visitor WHERE age < 30
SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
SELECT AVG(age) FROM visitor WHERE Level_of_membership <= '4'
SELECT name, Level_of_membership, age FROM visitor WHERE Level_of_membership > 4 ORDER BY age
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1
SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009
SELECT Num_of_Staff, Open_Year FROM museum WHERE name = 'Plaza Museum'
SELECT name FROM museum WHERE num_of_staff > (SELECT AVG(num_of_staff) FROM museum WHERE open_year > 2010)
SELECT visitor.id, visitor.name, visitor.age FROM visitor, visit WHERE visitor.id = visit.visitor_id GROUP BY visitor.id HAVING COUNT(visitor.id) > 1
SELECT visitor.name, visitor.Level_of_membership, SUM(visit.Total_spent) FROM visitor, visit WHERE visitor.id = visit.visitor_id GROUP BY visitor.name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC
SELECT name, Museum_ID FROM museum WHERE Museum_ID IN (SELECT Museum_ID FROM visit GROUP BY Museum_ID ORDER BY COUNT(*) DESC LIMIT 1);
SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);
SELECT name, age FROM visitor WHERE id = (SELECT visitor_id FROM visit WHERE num_of_ticket = (SELECT MAX(num_of_ticket) FROM visit));
SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit
SELECT SUM(Total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE Level_of_membership = '1');
SELECT name FROM visitor WHERE visitor_id IN (SELECT visitor_id FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE open_year < 2009) AND Museum_ID IN (SELECT Museum_ID FROM museum WHERE open_year > 2011));
SELECT visitor.id FROM visitor LEFT JOIN visit ON visitor.id = visit.visitor_id LEFT JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.open_year < 2010 AND visit.visitor_id IS NULL;
SELECT * FROM museum WHERE open_year > '2013' OR open_year < '2008'
SELECT COUNT(*) FROM players
SELECT COUNT(*) FROM player
SELECT COUNT(*) FROM matches
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT AVG(loser_age), AVG(winner_age) FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT MAX(loser_rank) FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT DISTINCT loser_name FROM matches
SELECT tourney_name FROM matches WHERE tourney_name IN (SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10)
SELECT winner_name FROM matches WHERE YEAR = '2013' AND YEAR = '2016'
SELECT * FROM matches WHERE YEAR IN ('2013', '2016')
SELECT p.first_name, p.country_code FROM players p, matches m WHERE p.player_id = m.winner_id AND m.tourney_name IN ('WTA Championships', 'Australian Open');
SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date
SELECT first_name, country_code FROM players WHERE player_id IN (SELECT player_id FROM rankings GROUP BY player_id ORDER BY tours DESC LIMIT 1);
SELECT YEAR FROM matches ORDER BY YEAR DESC LIMIT 1
SELECT winner_name, winner_rank_points FROM matches ORDER BY winner_rank_points DESC LIMIT 1
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
SELECT winner_name, loser_name, MAX(minutes) FROM matches GROUP BY winner_name, loser_name
SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;
SELECT first_name, SUM(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
SELECT country_code, COUNT(*) FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50
SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date
SELECT YEAR, COUNT(*) FROM matches GROUP BY YEAR
SELECT winner_name, winner_rank, winner_age FROM matches ORDER BY winner_age LIMIT 3
SELECT winner_name FROM matches WHERE winner_name IN (SELECT winner_name FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'left')
SELECT first_name, country_code, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches));
SELECT hand, COUNT(*) FROM players GROUP BY hand
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
```
SELECT name, date FROM battle
SELECT MAX(killed), MIN(killed) FROM death
SELECT AVG(injured) FROM death
SELECT killed, injured FROM death WHERE caused_by_ship_id = 't'
SELECT name, RESULT FROM battle WHERE bulgarian_commander != 'Boril'
SELECT name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig');
SELECT name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE id IN (SELECT caused_by_ship_id FROM death WHERE killed > 10));
SELECT ship.Id, ship.Name FROM ship INNER JOIN death ON ship.Id = death.caused_by_ship_id GROUP BY ship.Id, ship.Name ORDER BY COUNT(death.caused_by_ship_id) DESC LIMIT 1
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
There are 2 different results for the battles.
SELECT COUNT(*) FROM ship WHERE tonnage = '225' AND id NOT IN (SELECT lost_in_battle FROM battle WHERE tonnage = '225');
SELECT name, date FROM ship WHERE name IN ('Lettice', 'HMS Atalanta')
SELECT name, result, bulgarian_commander FROM battle WHERE name = 'English Channel' AND result = 'No ships lost'
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1, line_2 FROM addresses
SELECT COUNT(*) FROM COURSES
SELECT COUNT(*) FROM Courses
SELECT course_description FROM Courses WHERE course_name = 'math'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT department_name, department_id FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT department_name, department_id FROM departments WHERE department_id IN (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT COUNT(*) FROM Degree_Programs
SELECT * FROM Sections
SELECT course_name, course_id FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(course_id) <= 2)
```
SELECT semester_name, semester_id FROM Semesters WHERE semester_id IN (SELECT DISTINCT semester_id FROM Student_Enrolment) ORDER BY semester_id DESC LIMIT 1
SELECT * FROM Departments WHERE department_name LIKE '%the computer%'
SELECT first_name, middle_name, last_name, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE
SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id = 'Bachelor');
SELECT degree_program_id, COUNT(degree_program_id) FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(degree_program_id) DESC
SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id HAVING COUNT(*) > 1);
SELECT student_id, first_name, middle_name, last_name, COUNT(student_id) AS enrollments FROM Students LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id ORDER BY enrollments DESC LIMIT 1;
SELECT semester_name FROM Semesters WHERE semester_name NOT IN (SELECT semester_name FROM Student_Enrolment);
SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses);
SELECT course_name FROM Courses WHERE course_name = (SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY COUNT(course_id) DESC LIMIT 1));
SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment);
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents WHERE
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC LIMIT 1
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students GROUP BY current_address_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Students GROUP BY current_address_id));
SELECT AVG(transcript_date) FROM Transcripts
SELECT transcript_date FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT COUNT(*) FROM Transcripts
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT student_course_id, COUNT(student_course_id) FROM Transcript_Contents GROUP BY student_course_id HAVING COUNT(student_course_id) > 1
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents) ORDER BY transcript_date LIMIT 1;
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_program_id LIKE 'B%') AND degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_program_id LIKE 'M%')
SELECT COUNT(DISTINCT current_address_id) FROM Students
SELECT * FROM Students ORDER BY other_student_details DESC
SELECT * FROM Sections WHERE section_description = 'h'
SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';
SELECT Title FROM Cartoon ORDER BY Title
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT title, directed_by, original_air_date FROM cartoon ORDER BY original_air_date
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT Country, COUNT(Country) FROM TV_Channel GROUP BY Country ORDER BY COUNT(Country) DESC

SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT COUNT(*) FROM TV_Channel WHERE LANGUAGE = 'English'
SELECT LANGUAGE FROM TV_Channel GROUP BY LANGUAGE ORDER BY COUNT(*) DESC LIMIT 1
SELECT LANGUAGE, COUNT(LANGUAGE) FROM TV_Channel GROUP BY LANGUAGE
SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!';
SELECT Title FROM Cartoon WHERE Channel = 'Sky Radio';
SELECT * FROM TV_series ORDER BY rating
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3
SELECT MIN(SHARE), MAX(SHARE) FROM TV_series
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'
NBC
SELECT Episode FROM TV_series WHERE Channel = 'Sky Radio';
SELECT Directed_by, COUNT(*) FROM cartoon GROUP BY Directed_by
SELECT production_code, channel, original_air_date FROM cartoon ORDER BY original_air_date DESC LIMIT 1
SELECT package_option, series_name FROM TV_Channel WHERE hight_definition_TV = 'YES'
SELECT country FROM TV_Channel WHERE country IN (SELECT country FROM TV_Channel WHERE id IN (SELECT Channel FROM cartoon WHERE written_by = 'Todd Casey'));
SELECT country FROM TV_Channel WHERE country NOT IN (SELECT country FROM TV_Channel WHERE country IN (SELECT country FROM cartoon WHERE written_by = 'Todd Casey'));
SELECT series_name, country FROM TV_Channel WHERE series_name IN (SELECT series_name FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Michael Chang')
SELECT Pixel_aspect_ratio_PAR, country FROM tv_channel WHERE LANGUAGE != 'English'
SELECT id FROM tv_channel WHERE country IN (SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*) > 2)
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
SELECT * FROM cartoon WHERE cartoon.directed_by != 'Ben Jones'
SELECT COUNT(*) FROM poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT Final_Table_Made, Best_Finish FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
SELECT Name FROM people
SELECT People_ID FROM poker_player WHERE Earnings > 300000
SELECT Name FROM people, poker_player WHERE people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC
SELECT People_ID FROM poker_player WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player);
SELECT Money_Rank FROM poker_player WHERE People_ID = (SELECT People_ID FROM people ORDER BY Height DESC LIMIT 1);
SELECT AVG(Earnings) FROM poker_player WHERE People_ID IN (SELECT People_ID FROM people WHERE Height > 200)
SELECT People.Name FROM poker_player, people WHERE poker_player.People_ID = people.People_ID ORDER BY Earnings DESC
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
SELECT Name, Birth_Date FROM people ORDER BY Name
SELECT Name FROM people WHERE Nationality != 'Russia'
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(*) FROM area_code_state
```
SELECT * FROM votes
SELECT MIN(area_code), MAX(area_code) FROM area_code_state
SELECT MAX(created) FROM votes WHERE state = 'CA'
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
SELECT DISTINCT state, created FROM votes
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number = (SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY COUNT(*) LIMIT 1)
SELECT COUNT(*) FROM votes WHERE state IN ('NY', 'CA')
SELECT contestant_number FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
SELECT area_code FROM area_code_state WHERE area_code IN (SELECT state FROM votes GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1);
SELECT created, state, phone_number FROM votes WHERE contestant_number = 'Tabatha Gehling';
SELECT area_code FROM area_code_state WHERE area_code IN (SELECT area_code FROM votes WHERE contestant_number = '10000000000000000000000000000000000000000000000000000000000000000000000
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
SELECT Name FROM country WHERE IndepYear > 1950
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'republic'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT Continent FROM country WHERE Name = 'Anguilla'
SELECT Name FROM city WHERE CountryCode = 'AFG'
SELECT Language FROM countrylanguage WHERE CountryCode = 'AW' GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT Population, Region, Name FROM country WHERE Name = 'Angola'
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1
SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT COUNT(*) FROM city WHERE District = 'Gelderland'
SELECT AVG(GNP), SUM(population) FROM country WHERE GovernmentForm = 'US Territory'
SELECT COUNT(DISTINCT LANGUAGE) FROM countrylanguage
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Name = 'Aruba');
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Name = 'Afghanistan');
SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(*) DESC LIMIT 1)
SELECT Continent FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM countrylanguage GROUP BY CountryCode))
SELECT COUNT(*) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch')
SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French')
SELECT country.Name FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'Yes' AND countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'Yes'
SELECT COUNT(DISTINCT country.Code) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'Chinese';
SELECT country.Region FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch'
SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch'));
SELECT country.Code FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm = 'Republic');
SELECT Name FROM city WHERE Population = (SELECT MAX(Population) FROM city WHERE Language = 'English' AND CountryCode = (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'));
SELECT Name, Population, LifeExpectancy, SurfaceArea FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
SELECT country.Name, country.LifeExpectancy FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language != 'English'
SELECT COUNT(*) FROM country WHERE Name NOT IN (SELECT Name FROM countrylanguage WHERE Language = 'English');
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix') AND IsOfficial = 'T';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Year < 1930)
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT Name FROM country WHERE Continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE Continent = 'Asia')
SELECT Name FROM country WHERE population < (SELECT MIN(population) FROM country WHERE Continent = 'Asia') AND Continent = 'Africa'
SELECT Name FROM country WHERE population > (SELECT MAX(population) FROM country WHERE Continent = 'Africa') AND Continent = 'Asia'
SELECT Name FROM country WHERE Continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE Continent = 'Africa')
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE NOT IN ('English')
SELECT Code FROM countrylanguage WHERE LANGUAGE != 'English' AND GovernmentForm != 'Republic';
SELECT city.Name FROM city, country, countrylanguage WHERE city.CountryCode = country.Code AND country.Code = countrylanguage.CountryCode AND countrylanguage.IsOfficial = 'N' AND country.Continent = 'Europe'
SELECT DISTINCT city.name FROM city, countrylanguage, country WHERE city.countrycode = country.code AND country.continent = 'Asia' AND countrylanguage.countrycode = country.code AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'Y'
SELECT DISTINCT city.Name FROM city, country WHERE city.CountryCode = country.Code AND country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.CountryCode = country.Code AND countrylanguage.IsOfficial = 'Yes'
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1
SELECT Name, SurfaceArea, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
SELECT country.Name, COUNT(countrylanguage.Language) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) >= 3
SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District
SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm
SELECT Continent, AVG(LifeExpectancy), SUM(Population) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT Name FROM country ORDER BY Population LIMIT 3
SELECT COUNT(*) FROM country WHERE continent = 'Asia'
SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'
SELECT SUM(country.population), AVG(country.surfacearea) FROM country WHERE country.surfacearea > 3000 AND country.continent = 'North America'
SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY COUNT(*) DESC LIMIT 1
SELECT LANGUAGE, MAX(PERCENTAGE) FROM COUNTRYLANGUAGE GROUP BY LANGUAGE
SELECT COUNT(*) FROM countrylanguage WHERE Percentage = (SELECT MAX(Percentage) FROM countrylanguage)
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'Spanish' ORDER BY Percentage DESC
SELECT COUNT(*) FROM conductor
SELECT Name FROM conductor ORDER BY Age
SELECT Name FROM conductor WHERE Nationality != "USA"
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT AVG(Attendance) FROM SHOW
SELECT MAX(SHARE), MIN(SHARE) FROM performance WHERE TYPE != 'Live final'
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
SELECT conductor.Name, orchestra.Orchestra FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(*) > 1)
SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1)
SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Conductor_ID > '2008');
SELECT Record_Company, COUNT(Record_Company) FROM orchestra GROUP BY Record_Company
SELECT Major_Record_Format FROM orchestra ORDER BY Major_Record_Format
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT DISTINCT YEAR(Performance_Date) FROM performance WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM orchestra GROUP BY Orchestra_ID HAVING COUNT(*) > 1)
SELECT COUNT(*) FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT * FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT name FROM Highschooler WHERE grade = '10'
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(*) FROM Highschooler WHERE grade IN ('9', '10')
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT student_id, COUNT(student_id) FROM Friend GROUP BY student_id
SELECT name, COUNT(student_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.id = Friend.student_id GROUP BY name
SELECT name FROM Highschooler WHERE id = (SELECT student_id FROM Friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT name FROM Highschooler WHERE id IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 3)
SELECT name FROM Highschooler WHERE id IN (SELECT friend_id FROM Friend WHERE student_id = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = 'Kyle';
SELECT id FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend);
SELECT name FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend);
SELECT student_id FROM Likes WHERE liked_id IN (SELECT student_id FROM Friend)
SELECT name FROM Highschooler WHERE id IN (SELECT student_id FROM Friend WHERE liked_id IN (SELECT liked_id FROM Likes));
SELECT student_id, COUNT(student_id) FROM Likes GROUP BY student_id
SELECT name, COUNT(student_id) FROM Highschooler LEFT JOIN Likes ON Highschooler.id = Likes.student_id GROUP BY name
SELECT name FROM Highschooler WHERE id = (SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT name FROM Highschooler WHERE id IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(*) >= 2)
SELECT name FROM Highschooler WHERE id IN (SELECT student_id FROM Friend WHERE student_id IN (SELECT id FROM Highschooler WHERE grade > 5) GROUP BY student_id HAVING COUNT(*) >= 2)
SELECT COUNT(*) FROM Likes WHERE student_id = 'Kyle';
SELECT AVG(grade) FROM Highschooler WHERE id IN (SELECT student_id FROM Friend);
SELECT grade FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)
SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'IN' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)
SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)
SELECT DISTINCT Owners.first_name FROM Owners LEFT JOIN Dogs ON Owners.first_name = Dogs.first_name WHERE Dogs.first_name IS NULL
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2);
SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)
SELECT owner_id, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments));
SELECT treatment_type_description FROM Treatment_types WHERE treatment_type_code = (SELECT MIN(treatment_type_code) FROM Treatments);
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC;
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(professional_id) >= 2);
SELECT first_name, last_name FROM Professionals WHERE Id IN (SELECT Id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments));
SELECT date_of_treatment, first_name FROM Treatments, Professionals WHERE Treatments.professional_id = Professionals.professional_id;
SELECT cost_of_treatment, treatment_type_description FROM Treatments, treatment_types WHERE Treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT first_name, last_name, size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT name FROM Dogs WHERE owner_id IN (SELECT owner_id FROM Owners WHERE first_name = 'Joe');
SELECT name, date_of_treatment FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);
SELECT Owners.first_name, Dogs.name FROM Dogs, Owners WHERE Dogs.owner_id = Owners.owner_id AND Owners.state = 'VA';
SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs ORDER BY age LIMIT 1);
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT date_arrived, date_departed FROM Dogs
SELECT COUNT(*) FROM Treatments
SELECT COUNT(DISTINCT professional_id) FROM Treatments
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT * FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT MAX(cost_of_treatment) FROM Treatments
SELECT dog_id FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
SELECT COUNT(*) FROM Dogs WHERE NOT EXISTS (SELECT * FROM Owners WHERE Owners.owner_id = Dogs.owner_id)
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SELECT AVG(age) FROM Dogs
SELECT MAX(age) FROM Dogs
SELECT charge_type, charge_amount FROM Charges
SELECT MAX(charge_amount) FROM Charges
SELECT email_address, cell_number, home_phone FROM professionals
SELECT breed_code, size_code FROM dogs
SELECT first_name, treatment_type_description FROM professionals JOIN Treatments ON professionals.professional_id = Treatments.professional_id JOIN Treatment_types ON Treatments.treatment_type_code = Treatment_types.treatment_type_code
SELECT Name FROM singer ORDER BY Net_Worth_Millions
SELECT Birth_Year, Citizenship FROM singer
SELECT Name FROM singer WHERE Citizenship != "France"
SELECT Name FROM singer WHERE Birth_Year = '1948' OR Birth_Year = '1949'
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT Title, Name FROM song, singer WHERE song.Singer_ID = singer.Singer_ID
SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000)
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1)
SELECT Name, SUM(Sales) FROM singer, song WHERE singer.Singer_ID = song.Singer_ID GROUP BY Name;
SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Name IS NULL
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955
SELECT * FROM Other_Available_Features
Other_Available_Features
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = 'A';
SELECT property_name FROM Properties WHERE property_type_code = 'HOUSE' OR property_type_code = 'APARTMENT' AND room_count > 1
