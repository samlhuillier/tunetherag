SELECT count(*) FROM singer
SELECT name ,  country ,  age FROM singer ORDER BY age ASC
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
SELECT song_name, song_release_year FROM singer ORDER BY age ASC LIMIT 1
SELECT DISTINCT country FROM singer WHERE age  >  20
SELECT country ,  count(*) FROM singer GROUP BY country
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)
SELECT LOCATION, name FROM stadium WHERE capacity  >  5000 AND capacity  <  10000
SELECT max(capacity) ,  avg(capacity) FROM stadium
SELECT avg(capacity) ,  max(capacity) FROM stadium
SELECT name, capacity FROM stadium WHERE average  =  (SELECT MAX(average) FROM stadium)
SELECT count(*) FROM concert WHERE YEAR  >=  2014
SELECT name ,  COUNT(*) FROM stadium JOIN concert ON stadium_id  =  stadium_id GROUP BY name
SELECT t1.name, t1.capacity FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id = t2.stadium_id WHERE t2.year >= '2014' GROUP BY t1.stadium_id ORDER BY count(*) DESC LIMIT 1
SELECT t1.name, t1.capacity FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id  =  t2.stadium_id WHERE t2.year  >  2013 GROUP BY t1.stadium_id ORDER BY count(*) DESC LIMIT 1
SELECT YEAR FROM concert ORDER BY COUNT(YEAR) DESC LIMIT 1
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
SELECT name FROM stadium EXCEPT SELECT T1.name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  2014
SELECT T2.concert_name ,  T2.theme ,  COUNT(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_id
SELECT T2.concert_name ,  T2.theme ,  COUNT(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_id
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_id
SELECT T1.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
SELECT T1.name ,  T1.country FROM singer AS T1 JOIN song AS T2 ON T1.name  =  T2.name WHERE T2.song_name LIKE "%Hey%"
SELECT T1.name ,  T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.Year  =  '2014' OR T2.Year  =  '2015'
SELECT count(*) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id ORDER BY capacity DESC LIMIT 1
SELECT COUNT(weight) FROM pets WHERE weight  >  10
SELECT weight FROM pets ORDER BY pet_age ASC LIMIT 1
SELECT max(weight) ,  petType FROM pets GROUP BY petType
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.sex  =  'F'
SELECT count(DISTINCT pettype) FROM pets
SELECT Fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype  =  "Cat" OR pettype  =  "Dog"))
SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  "Cat" AND T3.pettype  =  "Dog"
SELECT DISTINCT Fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat') AND petid IN (SELECT petid FROM pets WHERE pettype = 'dog'))
SELECT major, age FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM has_pet AS T1 JOIN pets AS T2 ON T1.petid  =  T2.petid WHERE T2.pettype  =  "cat")
SELECT stuid FROM student EXCEPT SELECT stuid FROM has_pet WHERE pettype = 'cat'
SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid  =  "Dog" INTERSECT SELECT stuid FROM has_pet WHERE petid  =  "Cat")
SELECT pettype, weight FROM pets ORDER BY pet_age ASC LIMIT 1
SELECT petid, weight FROM pets WHERE pet_age  >  1
SELECT pettype ,  avg(pet_age) ,  max(pet_age) FROM pets GROUP BY pettype
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
SELECT fname ,  age FROM student WHERE stuid  IN  (SELECT stuid FROM has_pet)
SELECT T1.petid FROM has_pet AS T1 JOIN student AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Lname  =  'Smith'
SELECT count(*) ,  stuid FROM has_pet GROUP BY stuid
SELECT stuid FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)
SELECT fname ,  sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(stuid) > 1)
SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = "Cat" AND pet_age = "3"))
SELECT avg(age) FROM student WHERE stuid NOT IN ( SELECT stuid FROM has_pet)
SELECT count(*) FROM CONTINENTS
SELECT ContId ,  Continent ,  COUNT(*) FROM COUNTRIES INNER JOIN CONTINENTS ON COUNTRIES.Continent = CONTINENTS.Continent GROUP BY ContId ,  Continent
SELECT count(*) FROM COUNTRIES
SELECT count(*) ,  T2.FullName ,  T2.Id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.FullName ,  T2.Id
SELECT Model FROM CAR_NAMES WHERE Id = (SELECT Id FROM CARS_DATA ORDER BY horsepower ASC LIMIT 1);
SELECT model FROM CARS_DATA WHERE Weight < (SELECT avg(Weight) FROM CARS_DATA)
SELECT DISTINCT MakeId FROM CARS_DATA WHERE year = 1970
SELECT Make ,  Year FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id JOIN CARS_DATA AS T3 ON T2.Year = T3.Year GROUP BY Make ,  Year HAVING Year  =  (SELECT MIN(Year) FROM CARS_DATA)
SELECT DISTINCT model FROM CARS_DATA WHERE year  >  1980;
SELECT T1.Continent ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.ContId  =  T2.ContId JOIN car_makers AS T3 ON T1.CountryId  =  T3.Country GROUP BY T1.Continent
SELECT CountryName FROM COUNTRIES WHERE CountryId IN (SELECT Country FROM CAR_MAKERS GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1)
SELECT count(*) ,  T2.fullname FROM model_list AS T1 JOIN car_makers AS T2 ON T1.maker  =  T2.id GROUP BY T2.fullname
SELECT count(*) ,  t1.id ,  t1.FullName FROM CAR_MAKERS AS t1 JOIN MODEL_LIST AS t2 ON t1.id  =  t2.Maker GROUP BY t1.id
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.Id WHERE T2.Make = "amc hornet sportabout" AND T2.MakeId = "sw"
SELECT count(*) FROM CAR_MAKERS WHERE Country = 'France'
SELECT count(*) FROM MODEL_LIST WHERE Maker IN (SELECT Maker FROM CAR_MAKERS WHERE Country = 'USA');
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders = '4'
SELECT min(weight) FROM cars_data WHERE year = 1974 AND cylinders = 8
SELECT DISTINCT Maker, Model FROM MODEL_LIST
SELECT CountryName ,  CountryId FROM COUNTRIES WHERE CountryName IN (SELECT Country FROM CAR_MAKERS)
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150
SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryName JOIN CONTINENTS AS T3 ON T2.Continent  =  T3.ContId WHERE T3.Continent  =  'Europe' GROUP BY T2.CountryName HAVING count(*)  >=  3
SELECT max(T2.horsepower) ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders LIKE "3:%"
SELECT t1.Model FROM CARS_DATA AS t1 JOIN CAR_NAMES AS t2 ON t1.Id = t2.MakeId ORDER BY t1.mpg DESC LIMIT 1
SELECT model FROM car_names WHERE makeid = (SELECT id FROM cars_data ORDER BY mpg DESC LIMIT 1)
SELECT AVG(horsepower) FROM CARS_DATA WHERE YEAR < 1980;
SELECT avg(T1.horsepower) FROM cars_data AS T1 WHERE T1.year < 1980
SELECT avg(edispl) FROM CARS_DATA WHERE Id IN (SELECT Id FROM CAR_NAMES WHERE MakeId = 'volvo' AND Model = 'volvo')
SELECT max(Accelerate) FROM CARS_DATA GROUP BY Cylinders
SELECT t1.Model FROM CAR_NAMES AS t1 JOIN CAR_NAMES AS t2 ON t1.Model = t2.Model GROUP BY t1.Model ORDER BY count(*) DESC LIMIT 1
SELECT count(*) FROM CARS_DATA WHERE Cylinders > 4;
SELECT count(*) FROM CARS_DATA WHERE YEAR = '1980';
SELECT count(*) FROM MODEL_LIST WHERE Maker = 'American Motor Company';
SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.FullName HAVING count(*)  >=  3
SELECT DISTINCT Model FROM MODEL_LIST WHERE MakeId IN (SELECT Id FROM CAR_MAKERS WHERE FullName = 'General Motors') OR weight > '3500';
SELECT year FROM cars_data WHERE weight  >=  3000 AND weight  <=  4000
SELECT horsepower FROM CARS_DATA ORDER BY accelerate DESC LIMIT 1
SELECT CARS_DATA.cylinders ,  CARS_DATA.accelerate FROM CARS_DATA INNER JOIN CAR_NAMES ON CARS_DATA.Id = CAR_NAMES.Model WHERE CAR_NAMES.MakeId = 'volvo' ORDER BY CARS_DATA.accelerate ASC LIMIT 1;
SELECT count(*) FROM CARS_DATA WHERE Accelerate > (SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1)
SELECT country FROM countries GROUP BY country HAVING COUNT(*)  >  2
SELECT count(*) FROM CARS_DATA WHERE Cylinders > 6
SELECT Model FROM CARS_DATA WHERE Cylinders = '4' ORDER BY horsepower DESC LIMIT 1
SELECT MakeId ,  Make FROM CAR_NAMES WHERE MakeId NOT IN (SELECT MakeId FROM CARS_DATA WHERE Horsepower > (SELECT MIN(Horsepower) FROM CARS_DATA) AND Cylinders > 3);
SELECT T1.makeid ,  T1.make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid  =  T2.id WHERE T2.horsepower  <  1000 AND T2.cylinders  <  4
SELECT max(T2.mpg) FROM cars_data AS T1 JOIN cars AS T2 ON T1.cylinders = T2.cylinders WHERE T1.year < 1980
SELECT Model FROM CARS_DATA WHERE weight < 3500 AND MakeId NOT IN (SELECT Id FROM CAR_MAKERS WHERE FullName = 'Ford Motor Company');
SELECT CountryName FROM countries WHERE CountryName NOT IN (SELECT Country FROM CAR_MAKERS)
SELECT T1.id ,  T1.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.maker  =  T2.maker GROUP BY T1.id HAVING count(*)  >=  2 UNION SELECT T3.id ,  T3.maker FROM car_makers AS T3 JOIN car_names AS T4 ON T3.id  =  T4.maker GROUP BY T3.id H
SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count(*)  >=  2 AND count(*)  >  3
SELECT T1.countryId, T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Maker = T3.Maker WHERE T3.Model = 'fiat' OR COUNT(*)  >  3 GROUP BY T1.countryId, T1.CountryName
SELECT T1.countryid, T1.countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country JOIN model_list AS T3 ON T2.id  =  T3.maker WHERE T3.model  =  'fiat' OR COUNT(*)  >  3
SELECT Country FROM AIRLINES WHERE Airline = "JetBlue Airways"
SELECT Abbreviation FROM AIRLINES WHERE Airline = "JetBlue Airways"
SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country = "USA"
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city = 'Anthony'
SELECT count(*) FROM airlines
SELECT count(*) FROM AIRLINES
SELECT count(*) FROM AIRPORTS
SELECT count(*) FROM Flight
SELECT count(*) FROM FLIGHTS
SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'
SELECT count(*) FROM airlines WHERE Country = 'USA'
SELECT City, Country FROM AIRPORTS WHERE AirportName = 'Alton'
SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'
SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'
SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'APG'
SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'ATO'
SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'ABERDEEN'
SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'ABERDEEN'
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen' AND T1.DestAirport  =  'Ashley'
SELECT count(*) FROM FLIGHTS WHERE Airline = 'JetBlue Airways'
SELECT count(*) FROM FLIGHTS WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T1.SourceAirport = 'AHD' AND T2.Airline = 'United Airlines'
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'United Airlines' AND T1.DestAirport = 'Aberdeen'
SELECT City FROM AIRPORTS WHERE AirportCode IN (SELECT DestAirport FROM FLIGHTS) GROUP BY City ORDER BY count(*) DESC LIMIT 1
SELECT City FROM AIRPORTS WHERE AirportCode IN (SELECT SourceAirport FROM FLIGHTS) GROUP BY City ORDER BY count(*) DESC LIMIT 1
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T2.DestAirport ORDER BY count(*) DESC LIMIT 1
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T2.DestAirport ORDER BY count(*) LIMIT 1
SELECT Airline FROM FLIGHTS GROUP BY Airline ORDER BY count(*) DESC LIMIT 1
SELECT Abbreviation, Country FROM AIRLINES WHERE Airline = (SELECT Airline FROM FLIGHTS GROUP BY Airline ORDER BY count(*) LIMIT 1)
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.Airline = T2.Airline WHERE T2.SourceAirport = 'AHD'
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.Airline  =  T2.Airline WHERE T2.DestAirport  =  'AHD'
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2
SELECT T1.Airline FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >= 10
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.Airline  <  200
SELECT FlightNo FROM FLIGHTS WHERE Airline = "United Airlines"
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'
SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'Aberdeen'
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
SELECT count(DISTINCT DestAirport) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene'
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
SELECT count(*) FROM Employee
SELECT count(*) FROM Employee
SELECT name FROM employee ORDER BY age ASC
SELECT count(*) ,  city FROM employee GROUP BY city
SELECT city FROM employee WHERE age > 30 GROUP BY city HAVING COUNT(*) > 1
SELECT t1.LOCATION ,  count(*) FROM shop AS t1 GROUP BY t1.LOCATION
SELECT t1.manager_name ,  t1.district FROM shop AS t1 WHERE number_products  =  (SELECT number_products FROM shop ORDER BY number_products DESC LIMIT 1)
SELECT min(Number_products) ,  max(Number_products) FROM shop
SELECT T1.name, T1.LOCATION, T1.district FROM shop AS T1 ORDER BY T1.number_products DESC
SELECT t1.name FROM shop AS t1 JOIN (SELECT shop_id, count(*) AS number_products FROM shop GROUP BY shop_id) AS t2 ON t1.shop_id  =  t2.shop_id WHERE t2.number_products  >  (SELECT avg(number_products) FROM (SELECT shop_id, count(*) AS number_products FROM shop GROUP BY shop_id))
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT name FROM shop WHERE shop_id IN (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1);
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
SELECT T2.name ,  COUNT(*) FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T2.name
SELECT sum(bonus) FROM evaluation
SELECT * FROM hiring
SELECT district FROM shop WHERE Number_products < 3000 AND Number_products > 10000
SELECT count(DISTINCT LOCATION) FROM shop
SELECT count(*) FROM Documents
SELECT document_id ,  document_name ,  document_description FROM Documents;
SELECT T1.document_name, T1.template_id FROM Documents AS T1 WHERE T1.Document_Description LIKE '%w%'
SELECT T1.document_id, T1.template_id, T1.Document_Description FROM Documents AS T1 WHERE T1.document_name  =  "Robbin CV"
SELECT count(DISTINCT template_id) FROM Documents
SELECT count(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')
SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
SELECT template_id, Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.template_id = Documents.template_id GROUP BY template_id, Template_Type_Code ORDER BY count(*) DESC LIMIT 1
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >=  2
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
SELECT count(*) FROM Templates
SELECT template_id ,  version_number ,  template_type_code FROM Templates
SELECT DISTINCT template_type_code FROM Templates
SELECT template_id FROM Templates WHERE template_type_code IN ("PP", "PPT")
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
SELECT version_number, template_type_code FROM Templates WHERE version_number > 5
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
SELECT MIN(Version_Number), template_type_code FROM Templates
SELECT template_type_code FROM Templates WHERE template_id IN (SELECT template_id FROM Documents WHERE document_name = "Data base");
SELECT document_name FROM Documents WHERE template_id IN (SELECT template_id FROM Templates WHERE template_type_code  =  "BK")
SELECT template_type_code ,  count(*) FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id GROUP BY template_type_code
SELECT template_type_code FROM Templates INNER JOIN Documents ON Templates.template_id = Documents.template_id GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
SELECT DISTINCT template_type_code FROM Templates WHERE template_type_code NOT IN (SELECT template_type_code FROM Documents)
SELECT template_type_code ,  template_type_description FROM Ref_template_types
SELECT template_type_description FROM Ref_template_types WHERE template_type_code = "AD";
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
SELECT DISTINCT T1.template_type_description FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Ref_template_types AS T3 ON T1.template_type_code  =  T3.template_type_code
SELECT template_id FROM Templates WHERE template_type_code IN (SELECT template_type_code FROM Ref_template_types WHERE template_type_description = "Presentation")
SELECT count(*) FROM Paragraphs
SELECT count(*) FROM Paragraphs WHERE document_ID IN (SELECT document_ID FROM Documents WHERE document_name = 'Summer Show')
SELECT other_details ,  paragraph_text FROM paragraphs WHERE paragraph_text = 'Korea '
SELECT paragraph_id ,  paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'
SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
SELECT document_id ,  document_name ,  count(*) FROM Documents JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY document_id
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
SELECT t1.document_id, t1.document_name FROM Documents AS t1 JOIN Paragraphs AS t2 ON t1.document_id = t2.document_id GROUP BY t1.document_id ORDER BY count(*) DESC LIMIT 1;
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
SELECT T1.document_id FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id HAVING count(*)  >  1 AND count(*)  <  3
SELECT T1.document_id FROM Paragraphs AS T1 WHERE T1.paragraph_text  =  'Brazil' AND T1.paragraph_text  =  'Ireland'
SELECT count(*) FROM teacher
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Age ,  Hometown FROM teacher
SELECT name FROM teacher WHERE hometown  !=  "Little Lever Urban District"
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
SELECT T1.Hometown ,  count(*) FROM teacher AS T1 GROUP BY T1.Hometown
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
SELECT T1.Name ,  T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID  =  T3.Course_ID
SELECT t.Name, c.Course FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name
SELECT T1.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  'Math'
SELECT T1.Name ,  COUNT(T2.Teacher_ID) FROM teacher AS T1 LEFT JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Name
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING count(*)  >=  2
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
SELECT count(*) FROM visitor WHERE age < 30
SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
SELECT avg(age) FROM visitor WHERE Level_of_membership <= '4'
SELECT name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age
SELECT T1.museum_id ,  T1.name FROM museum AS T1 JOIN staff_department_assignments AS T2 ON T1.museum_id  =  T2.department_id GROUP BY T1.museum_id ORDER BY count(*) DESC LIMIT 1
SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
SELECT T1.Open_Year ,  T1.Num_of_Staff FROM museum AS T1 WHERE T1.name  =  "Plaza Museum"
SELECT name FROM museum WHERE num_of_staff > ( SELECT min(num_of_staff) FROM museum WHERE open_year > 2010 )
SELECT T1.id ,  T1.name ,  T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id GROUP BY T2.visitor_id HAVING count(*)  >=  2
SELECT T1.id ,  T1.name ,  T1.Level_of_membership FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_id  =  T2.id GROUP BY T1.visitor_id ORDER BY T1.Total_spent DESC LIMIT 1
SELECT T1.Museum_ID ,  T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID GROUP BY T2.Museum_ID HAVING count(*)  =  (SELECT count(*) FROM visit)
SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
SELECT name, age FROM visitor WHERE id = (SELECT visitor_id FROM visit GROUP BY visitor_id HAVING COUNT(visitor_id) = (SELECT MAX(num_of_ticket) FROM visit))
SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
SELECT sum(Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_id  =  T2.id WHERE T2.Level_of_membership  =  '1'
SELECT name FROM visitor WHERE id IN (SELECT visitor_id FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE open_year  <  2009) INTERSECT SELECT visitor_id FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE open_year  >  2011))
SELECT count(*) FROM visitor WHERE id NOT IN (SELECT visitor_id FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE open_year > 2010))
SELECT count(*) FROM museum WHERE open_year  >=  2013 OR open_year  <  2008
SELECT count(*) FROM players
SELECT count(*) FROM player
SELECT count(*) FROM matches
SELECT first_name ,  birth_date FROM players AS T1 WHERE T1.country_code  =  'USA'
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
SELECT avg(winner_rank) FROM matches
SELECT max(loser_rank) FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT count(DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016
SELECT COUNT(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016
SELECT country_code ,  first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name  =  'WTA Championships') INTERSECT SELECT country_code ,  first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name  =  'Australian Open')
SELECT first_name ,  country_code FROM players ORDER BY birth_date DESC LIMIT 1
SELECT first_name ,  last_name FROM players ORDER BY birth_date
SELECT first_name ,  last_name FROM players WHERE hand = 'L' ORDER BY birth_date
SELECT T2.first_name , T2.country_code FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
SELECT t1.winner_name ,  t1.winner_rank_points FROM matches AS t1 JOIN matches AS t2 ON t1.winner_name  =  t2.winner_name WHERE RESULT  =  'Win' GROUP BY t2.winner_name HAVING count(*)  >  1
SELECT t1.winner_name FROM matches AS t1 WHERE t1.tourney_name  =  'Australian Open' AND t1.winner_rank_points  =  (SELECT MAX(t2.winner_rank_points) FROM matches AS t2 WHERE t2.tourney_name  =  'Australian Open')
SELECT t1.name FROM swimmer AS t1 JOIN matches AS t2 ON t1.name  =  t2.winner_name WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN matches AS t2 ON t1.name  =  t2.loser_name WHERE RESULT  =  'Loss'
SELECT first_name, avg(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
SELECT first_name, sum(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
SELECT country_code ,  COUNT(*) FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
SELECT ranking_date ,  sum(tours) FROM rankings GROUP BY ranking_date
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
SELECT T1.winner_name ,  T1.winner_rank FROM matches AS T1 WHERE T1.winner_age  <  30 ORDER BY T1.winner_rank ASC LIMIT 3
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'left'
SELECT t1.first_name ,  t1.country_code ,  t1.birth_date FROM players AS t1 JOIN matches AS t2 ON t1.player_id  =  t2.winner_id ORDER BY t2.winner_rank_points DESC LIMIT 1
SELECT hand, count(*) FROM players GROUP BY hand
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage FROM ship ORDER BY name DESC
SELECT T1.name ,  T1.date ,  T2.result FROM battle AS T1 JOIN battle_result AS T2 ON T1.name  =  T2.name
SELECT max(killed) ,  min(killed) FROM death
SELECT avg(injured) FROM death
SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS T2 ON T2.Id  =  T1.caused_by_ship_id WHERE T2.Id  =  't'
SELECT name, RESULT FROM battle WHERE bulgarian_commander != 'Boril'
SELECT DISTINCT ship.lost_in_battle, battle.name FROM ship INNER JOIN battle ON ship.lost_in_battle = battle.id WHERE ship.ship_type = 'Brig'
SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING count(*)  >  10
SELECT ship.Id, ship.Name FROM ship INNER JOIN death ON death.caused_by_ship_id = ship.Id GROUP BY ship.Id, ship.Name ORDER BY count(*) DESC LIMIT 1
SELECT name FROM battle WHERE bulgarian_commander = "Kaloyan" AND latin_commander = "Baldwin I"
SELECT count(DISTINCT RESULT) FROM battle
SELECT count(*) FROM ship WHERE tonnage = '225' AND id NOT IN (SELECT ship_id FROM battle WHERE tonnage = '225')
SELECT T1.name, T2.date FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle  =  T2.id WHERE T1.name  =  'Lettice' OR T1.name  =  'HMS Atalanta'
SELECT T1.name ,  T1.result ,  T2.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.id WHERE T1.location  =  "English Channel" AND T2.lost_in_battle  =  "No"
SELECT note FROM death WHERE note LIKE '%East%'
SELECT T1.line_1 ,  T1.line_2 FROM addresses AS T1
SELECT count(*) FROM COURSES
SELECT count(*) FROM Courses
SELECT T1.course_description FROM Courses AS T1 WHERE T1.course_name = 'math'
SELECT T1.zip_postcode FROM Addresses AS T1 WHERE T1.city  =  "Port Chelsea"
SELECT T1.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
SELECT T2.department_name ,  T1.department_id FROM degree_programs AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
SELECT count(DISTINCT department_id) FROM Degree_Programs
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT count(DISTINCT department_id) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Engineering')
SELECT section_name ,  section_description FROM Sections
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  <=  2
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_name, T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name LIKE '%the computer%'
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  =  2
SELECT first_name ,  middle_name ,  last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor'))
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)
SELECT T1.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(*)  >=  2
SELECT cell_mobile_number FROM Students WHERE first_name  =  "Timmothy" AND last_name  =  "Ward"
SELECT cell_mobile_number FROM students WHERE first_name  =  "Timmothy" AND last_name  =  "Ward"
SELECT DISTINCT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students)
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN (SELECT MIN(date_left) AS date_left FROM Students) AS T2 ON T1.date_left = T2.date_left
SELECT T1.first_name FROM Students AS T1 WHERE T1.current_address_id  !=  T1.permanent_address_id
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
SELECT AVG(transcript_date) FROM Transcripts;
SELECT transcript_date, other_details FROM Transcripts WHERE transcript_date = '2019-01-01'
SELECT count(*) FROM Transcripts
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT count(DISTINCT student_course_id) FROM Transcript_Contents
SELECT transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING count(transcript_id) = (SELECT min(count(transcript_id)) FROM Transcript_Contents GROUP BY transcript_id))
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_program_id = 'Master') AND degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_program_id = 'Bachelor')
SELECT count(DISTINCT current_address_id) FROM Students
SELECT * FROM Students ORDER BY other_student_details DESC
SELECT section_description FROM Sections WHERE section_name  =  "h"
SELECT T1.first_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' OR T1.cell_mobile_number  =  '09700166582'
SELECT Title FROM Cartoon ORDER BY Title
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"
SELECT title, Directed_by FROM Cartoon ORDER BY Original_air_date
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT Country ,  COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
SELECT series_name ,  COUNT(*) FROM TV_Channel GROUP BY series_name
SELECT t1.Content FROM TV_Channel AS t1 WHERE t1.series_name  =  'Sky Radio'
SELECT t1.Package_Option FROM TV_Channel AS t1 WHERE t1.series_name  =  'Sky Radio'
SELECT count(*) FROM TV_Channel AS T1 JOIN film AS T2 ON T1.LANGUAGE = T2.LANGUAGE WHERE T2.LANGUAGE = "English"
SELECT T2.name, COUNT(DISTINCT T1.LANGUAGE) FROM TV_Channel AS T1 JOIN LANGUAGE AS T2 ON T1.LANGUAGE  =  T2.language_id GROUP BY T2.name ORDER BY COUNT(DISTINCT T1.LANGUAGE) ASC
SELECT LANGUAGE, COUNT(LANGUAGE) FROM TV_Channel GROUP BY LANGUAGE
SELECT T1.series_name FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T1.Title  =  'The Rise of the Blue Beetle!'
SELECT t1.Title FROM Cartoon AS t1 JOIN TV_Channel AS t2 ON t1.Channel  =  t2.id WHERE t2.series_name  =  'Sky Radio'
SELECT Episode FROM TV_series ORDER BY rating
SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT min(SHARE) ,  max(SHARE) FROM TV_series
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT T1.Channel FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T1.Episode  =  'A Love of a Lifetime'
SELECT t1.Episode FROM TV_series AS t1 JOIN TV_Channel AS t2 ON t1.Channel  =  t2.id WHERE t2.series_name  =  'Sky Radio'
SELECT Directed_by ,  count(*) FROM cartoon GROUP BY Directed_by
SELECT t1.production_code, t1.channel FROM cartoon AS t1 JOIN (SELECT production_code, MAX(original_air_date) AS max_date FROM cartoon GROUP BY production_code) AS t2 ON t1.production_code = t2.production_code AND t1.original_air_date = t2.max_date
SELECT t1.package_option, t1.series_name FROM TV_Channel AS t1 WHERE t1.hight_definition_TV  =  'Yes'
SELECT country FROM TV_Channel WHERE id IN (SELECT Channel FROM cartoon WHERE written_by = 'Todd Casey')
SELECT country FROM TV_Channel EXCEPT SELECT country FROM TV_Channel WHERE id IN (SELECT Channel FROM cartoon WHERE written_by = 'Todd Casey')
SELECT series_name ,  country FROM TV_Channel WHERE id IN (SELECT Channel FROM cartoon WHERE directed_by  =  'Ben Jones' OR directed_by  =  'Michael Chang')
SELECT Pixel_aspect_ratio_PAR, country FROM tv_channel WHERE LANGUAGE != 'English'
SELECT id FROM tv_channel WHERE country IN (SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*)  >  2)
SELECT id FROM TV_Channel WHERE directed_by != 'Ben Jones'
SELECT T1.package_option FROM cartoon AS T1 JOIN TV_Channel AS T2 ON T1.id  =  T2.id WHERE T1.directed_by != 'Ben Jones'
SELECT count(*) FROM poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
SELECT avg(Earnings) FROM poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Earnings > 300000);
SELECT T1.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY Final_Table_Made ASC
SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings ASC LIMIT 1
SELECT Money_Rank FROM poker_player WHERE People_ID = (SELECT People_ID FROM people ORDER BY Height DESC LIMIT 1);
SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings DESC
SELECT nationality ,  count(*) FROM people GROUP BY nationality
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
SELECT Name ,  Birth_Date FROM people ORDER BY Name
SELECT Name FROM people WHERE Nationality != "Russia"
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT count(DISTINCT Nationality) FROM people
SELECT count(*) FROM area_code_state
SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
SELECT vote_id ,  phone_number ,  state FROM votes
SELECT max(area_code) ,  min(area_code) FROM area_code_state
SELECT MAX(created) FROM votes WHERE state = "CA";
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
SELECT DISTINCT state ,  created FROM votes
SELECT T1.contestant_number, T2.contestant_name FROM votes AS T1 JOIN contestants AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING COUNT(T1.contestant_number) >= 2
SELECT T1.contestant_number, T2.contestant_name FROM votes AS T1 JOIN contestants AS T2 ON T1.contestant_number = T2.contestant_number ORDER BY votes ASC LIMIT 1
SELECT count(*) FROM votes WHERE state = "NY" OR state = "CA";
SELECT count(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
SELECT area_code FROM area_code_state GROUP BY area_code ORDER BY count(*) DESC LIMIT 1
SELECT created ,  state ,  phone_number FROM votes WHERE contestant_number = 'Tabatha Gehling'
SELECT area_code FROM area_code_state WHERE state IN (SELECT state FROM votes WHERE contestant_number = "Tabatha Gehling" INTERSECT SELECT state FROM votes WHERE contestant_number = "Kelly Clauss")
SELECT DISTINCT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
SELECT Name FROM country WHERE IndepYear > 1950
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'republic'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT continent FROM country WHERE name = 'Anguilla'
SELECT T2.Region_name FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Code  =  'AFG' AND T2.Name  =  'Kabul'
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = "Aruba") GROUP BY Language ORDER BY count(*) DESC LIMIT 1
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT Region, Population FROM country WHERE Name = "Angola"
SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT T1.Name FROM country AS T1 WHERE T1.Continent  =  "Asia" ORDER BY T1.LifeExpectancy LIMIT 1
SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT count(*) FROM city WHERE district = 'Gelderland'
SELECT avg(GNP), sum(population) FROM country WHERE GovernmentForm = 'US Territory'
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
SELECT count(*) FROM country WHERE Continent = 'Africa'
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AW'
SELECT count(DISTINCT T1.Code) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan"
SELECT c.Name FROM countrylanguage cl INNER JOIN country c ON cl.CountryCode = c.Code GROUP BY c.Name ORDER BY count(*) DESC LIMIT 1
SELECT T1.Continent, count(DISTINCT T1.Code) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code GROUP BY T1.Continent ORDER BY count(DISTINCT T1.Code) DESC
SELECT count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" AND T2.Language = "Dutch"
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.Language  =  "French"
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "Yes" AND T2.Language  =  "French" AND T2.IsOfficial  =  "Yes"
SELECT count(DISTINCT c.Code) FROM country c, countrylanguage cl WHERE c.Code = cl.CountryCode AND cl.Language = 'Chinese'
SELECT T1.Region FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.Language  =  "English" OR T1.Language  =  "Dutch"
SELECT T1.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "English" OR T1.language  =  "Dutch"
SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.GovernmentForm  =  "Republic" GROUP BY T1.Language HAVING count(T1.Language)  =  1
SELECT Name FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') ORDER BY Population DESC LIMIT 1
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
SELECT avg(LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != "English"
SELECT count(*) FROM country AS T1 LEFT JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IS NULL
SELECT T1.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix"
SELECT count(DISTINCT T1.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  "T" AND T1.Code  <  "1930"
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT T1.Name FROM country AS T1 JOIN country AS T2 ON T1.population < T2.population WHERE T1.Continent = 'Africa' AND T2.Continent = 'Asia'
SELECT Name FROM country WHERE Continent = 'Africa' AND population < (SELECT population FROM country WHERE Continent = 'Asia' LIMIT 1)
SELECT T1.Name FROM country AS T1 JOIN country AS T2 ON T1.population  >  T2.population WHERE T1.Continent  =  'Asia' AND T2.Continent  =  'Africa' AND T1.Name  !=  T2.Name
SELECT Name FROM country WHERE Continent = 'Asia' AND population > (SELECT population FROM country WHERE Continent = 'Africa' ORDER BY population DESC LIMIT 1)
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
SELECT T1.Code FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.LANGUAGE  !=  "English" AND T2.GovernmentForm  !=  "Republic"
SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = "Europe" AND T3.Language != "English"
SELECT T1.name FROM city AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code JOIN countrylanguage AS T3 ON T2.code  =  T3.countrycode WHERE T3.language  =  'Chinese' AND T2.continent  =  'Asia' GROUP BY T1.name HAVING count(*)  =  1
SELECT Name FROM city WHERE CountryCode IN (SELECT CountryCode FROM country WHERE Continent = 'Asia') AND Language IN (SELECT Language FROM countrylanguage WHERE IsOfficial = 'Yes' AND CountryCode IN (SELECT CountryCode FROM country WHERE Continent = 'Asia'))
SELECT Name ,  IndepYear ,  SurfaceArea FROM country ORDER BY Population ASC LIMIT 1
SELECT population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
SELECT country.Name ,  COUNT(*) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN (SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(*) >= 3) GROUP BY country.Name
SELECT count(*) ,  District FROM city GROUP BY District HAVING Population  >  (SELECT avg(Population) FROM city)
SELECT GovernmentForm ,  Population FROM country WHERE LifeExpectancy  > 72
SELECT avg(LifeExpectancy) ,  Population FROM country WHERE avg(LifeExpectancy) < 72 GROUP BY Continent
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT count(*) FROM country AS T1 JOIN continent AS T2 ON T1.continent  =  T2.continent WHERE T2.continent  =  'Asia'
SELECT Name FROM country WHERE continent = 'Europe' AND Population = 80000
SELECT sum(population), avg(surfacearea) FROM country WHERE surfacearea > 3000 AND continent = 'North America'
SELECT name FROM city WHERE Population  >  160000 AND Population  <  900000
SELECT name FROM city WHERE population  >  160000 AND population  <  900000
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
SELECT LANGUAGE, MAX(Percentage) FROM countrylanguage GROUP BY LANGUAGE
SELECT country ,  count(*) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY country ORDER BY Percentage DESC LIMIT 1
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode ORDER BY Percentage DESC
SELECT count(*) FROM conductor
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor WHERE Nationality != "USA"
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT avg(Attendance) FROM SHOW
SELECT MAX(SHARE), MIN(SHARE) FROM performance WHERE TYPE != "Live final"
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Name HAVING COUNT(*)  >  1
SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T2.Name  =  'Mahler'
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
SELECT Major_Record_Format ,  COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
SELECT count(*) FROM orchestra AS T1 WHERE T1.Major_Record_Format IN ("CD", "DVD");
SELECT T1.Year FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T1.Year HAVING COUNT(*)  >  1
SELECT count(*) FROM highschooler
SELECT name ,  grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT DISTINCT grade FROM Highschooler WHERE name  =  'Kyle'
SELECT name FROM Highschooler WHERE grade  =  '10'
SELECT ID FROM Highschooler WHERE name  =  'Kyle'
SELECT count(*) FROM highschooler WHERE grade = '9' OR grade = '10'
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4
SELECT student_id, count(student_id) FROM Friend GROUP BY student_id
SELECT T1.name ,  count(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name
SELECT T1.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name HAVING count(*)  >=  3
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id = T2.student_id WHERE T2.friend_id = 'Kyle'
SELECT count(*) FROM Friend WHERE student_id = 'Kyle'
SELECT id FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)
SELECT name FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)
SELECT T1.student_id FROM Likes AS T1 JOIN Friend AS T2 ON T1.liked_id = T2.liked_id INTERSECT SELECT T1.student_id FROM Likes AS T1 JOIN Friend AS T2 ON T1.student_id = T2.student_id
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id = T2.student_id JOIN Friend AS T3 ON T1.id = T3.student_id
SELECT student_id, count(*) FROM Likes GROUP BY student_id
SELECT T1.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.name
SELECT T1.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name HAVING count(*)  >=  2
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id WHERE T1.grade  >  5 GROUP BY T1.id HAVING count(*)  >=  2
SELECT count(*) FROM Likes WHERE student_id = 'Kyle'
SELECT avg(grade) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.student_id
SELECT MIN(grade) FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)
SELECT state FROM Owners JOIN Professionals ON Owners.state = Professionals.state
SELECT avg(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.state  =  'Indiana' OR count(*)  >  2 GROUP BY T1.professional_id
SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)
SELECT T1.first_name FROM Owners AS T1 LEFT JOIN Dogs AS T2 ON T1.first_name = T2.first_name WHERE T2.first_name IS NULL UNION SELECT T1.first_name FROM Professionals AS T1 LEFT JOIN Dogs AS T2 ON T1.first_name = T2.first_name WHERE T2.first_name IS NULL
SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.professional_id IS NULL
SELECT T1.owner_id , T1.first_name , T1.last_name , count(*) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2
SELECT T2.breed_name FROM Dogs AS T1 JOIN Breeds AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_code ORDER BY count(*) DESC LIMIT 1
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(T3.dog_id) DESC LIMIT 1
SELECT treatment_type_description FROM Treatment_types WHERE treatment_type_code IN (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code ORDER BY SUM(cost) LIMIT 1)
SELECT T2.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T2.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1
SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
SELECT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.Id  =  T2.Id WHERE T2.cost_of_treatment  <  (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT T2.date_of_treatment ,  T1.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
SELECT cost_of_treatment ,  treatment_type_description FROM Treatments INNER JOIN treatment_types ON Treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT first_name ,  last_name ,  size_code FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT first_name ,  name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id;
SELECT name, date_of_treatment FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = (SELECT COUNT(*) FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1))
SELECT T1.first_name ,  T1.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state = 'VA'
SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT min(age) FROM Dogs));
SELECT T1.email_address FROM Professionals AS T1 WHERE T1.state  =  "Hawaii" OR T1.state  =  "Wisconsin"
SELECT date_arrived, date_departed FROM Dogs
SELECT count(*) FROM Treatments WHERE dog_id IN (SELECT dog_id FROM Dog)
SELECT count(*) FROM Treatments WHERE professional_id IN (SELECT id FROM professionals WHERE profession = 'veterinarian')
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'
SELECT T1.first_name ,  T1.last_name ,  T1.email_address FROM Owners AS T1 JOIN State AS T2 ON T2.state_id  =  T1.state WHERE T2.state  LIKE  '%North%'
SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment LIMIT 1
SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)
SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn = 1
SELECT avg(age) FROM Dogs
SELECT age FROM Dogs ORDER BY age DESC LIMIT 1
SELECT charge_type ,  charge_amount FROM Charges
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
SELECT email_address ,  cell_number ,  home_phone FROM professionals
SELECT DISTINCT breed_code, size_code FROM dogs
SELECT T1.first_name ,  T2.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Birth_Year ,  Citizenship FROM singer
SELECT Name FROM singer WHERE Citizenship != "France"
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
SELECT T1.Name FROM singer AS T1 ORDER BY T1.Net_Worth_Millions DESC LIMIT 1
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1
SELECT Citizenship ,  MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT T1.Title ,  T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID
SELECT DISTINCT T1.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.Sales  >  300000
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING count(*)  >=  1
SELECT T1.Name ,  SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Singer_ID
SELECT Name FROM singer EXCEPT SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
SELECT count(*) FROM Other_Available_Features
SELECT t1.feature_type_name FROM Ref_Feature_Types AS t1 JOIN Other_Available_Features AS t2 ON t1.feature_type_code  =  t2.feature_type_code WHERE t2.feature_name  =  'AirCon'
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties)
SELECT T1.property_name FROM Properties AS T1 WHERE T1.property_type_code  IN  ('H','A') AND T1.room_count  >  1
